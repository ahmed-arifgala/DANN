{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "79eb2ec4",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-04T12:37:59.461962Z",
     "iopub.status.busy": "2024-07-04T12:37:59.461251Z",
     "iopub.status.idle": "2024-07-04T12:38:02.893986Z",
     "shell.execute_reply": "2024-07-04T12:38:02.893224Z"
    },
    "papermill": {
     "duration": 3.446495,
     "end_time": "2024-07-04T12:38:02.896252",
     "exception": false,
     "start_time": "2024-07-04T12:37:59.449757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.utils.data as data\n",
    "from PIL import Image\n",
    "import os\n",
    "import torch.backends.cudnn as cudnn\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "55edcf30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:02.917284Z",
     "iopub.status.busy": "2024-07-04T12:38:02.916919Z",
     "iopub.status.idle": "2024-07-04T12:38:02.921005Z",
     "shell.execute_reply": "2024-07-04T12:38:02.920214Z"
    },
    "papermill": {
     "duration": 0.016536,
     "end_time": "2024-07-04T12:38:02.922953",
     "exception": false,
     "start_time": "2024-07-04T12:38:02.906417",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "os.environ['CUDA_LAUNCH_BLOCKING'] = '1'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2d80b489",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:02.943755Z",
     "iopub.status.busy": "2024-07-04T12:38:02.943478Z",
     "iopub.status.idle": "2024-07-04T12:38:02.947129Z",
     "shell.execute_reply": "2024-07-04T12:38:02.946380Z"
    },
    "papermill": {
     "duration": 0.016279,
     "end_time": "2024-07-04T12:38:02.948965",
     "exception": false,
     "start_time": "2024-07-04T12:38:02.932686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Calculate mean and standard deviation\n",
    "# data = mnist_data.data.numpy().astype(np.float32) / 255.0\n",
    "# mean = np.mean(data)\n",
    "# std = np.std(data)\n",
    "\n",
    "# print('mean: ', mean)\n",
    "# print('std: ', std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ad039f17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:02.969798Z",
     "iopub.status.busy": "2024-07-04T12:38:02.969059Z",
     "iopub.status.idle": "2024-07-04T12:38:03.030496Z",
     "shell.execute_reply": "2024-07-04T12:38:03.029437Z"
    },
    "papermill": {
     "duration": 0.073863,
     "end_time": "2024-07-04T12:38:03.032586",
     "exception": false,
     "start_time": "2024-07-04T12:38:02.958723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CUDA available: True\n",
      "device:  cuda\n"
     ]
    }
   ],
   "source": [
    "# Check if CUDA (GPU support) is available\n",
    "import torch\n",
    "cuda = torch.cuda.is_available()\n",
    "\n",
    "# Print whether CUDA is available\n",
    "print('CUDA available:', cuda)\n",
    "\n",
    "device = torch.device('cuda' if cuda else 'cpu')\n",
    "print(\"device: \", device)\n",
    "\n",
    "if cuda:\n",
    "    cudnn.benchmark = True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62c0c158",
   "metadata": {
    "papermill": {
     "duration": 0.009594,
     "end_time": "2024-07-04T12:38:03.052157",
     "exception": false,
     "start_time": "2024-07-04T12:38:03.042563",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3ca61e6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:03.073770Z",
     "iopub.status.busy": "2024-07-04T12:38:03.072963Z",
     "iopub.status.idle": "2024-07-04T12:38:04.681116Z",
     "shell.execute_reply": "2024-07-04T12:38:04.680345Z"
    },
    "papermill": {
     "duration": 1.621446,
     "end_time": "2024-07-04T12:38:04.683518",
     "exception": false,
     "start_time": "2024-07-04T12:38:03.062072",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import torch.backends.cudnn as cudnn\n",
    "import torch.utils.data\n",
    "from torchvision import transforms\n",
    "from torchvision import datasets\n",
    "import random\n",
    "import torch.optim as optim\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fef1faad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:04.708925Z",
     "iopub.status.busy": "2024-07-04T12:38:04.707546Z",
     "iopub.status.idle": "2024-07-04T12:38:04.719864Z",
     "shell.execute_reply": "2024-07-04T12:38:04.719017Z"
    },
    "papermill": {
     "duration": 0.025584,
     "end_time": "2024-07-04T12:38:04.721850",
     "exception": false,
     "start_time": "2024-07-04T12:38:04.696266",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<torch._C.Generator at 0x7a413ec5b290>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#data file names\n",
    "source_dataset_name = 'source_domain'\n",
    "target_dataset_name = 'target_domain'\n",
    "\n",
    "#folders that contain the image foldes and label text files\n",
    "source_image_root = os.path.join('/kaggle/input/plantvillage-dann/Plantvillage_Dataset', source_dataset_name)\n",
    "target_image_root = os.path.join('/kaggle/input/plantvillage-dann/Plantvillage_Dataset', target_dataset_name)\n",
    "\n",
    "#dir where model is to be stored\n",
    "model_root = os.path.join('/kaggle/working', 'models')\n",
    "\n",
    "#hyperparameters\n",
    "cuda = True\n",
    "cudnn.benchmark = True\n",
    "lr = 1e-3\n",
    "batch_size = 128\n",
    "image_size = 28\n",
    "n_epoch = 400\n",
    "\n",
    "manual_seed = random.randint(1, 10000)\n",
    "random.seed(manual_seed)\n",
    "torch.manual_seed(manual_seed)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60fe9fc6",
   "metadata": {
    "papermill": {
     "duration": 0.00963,
     "end_time": "2024-07-04T12:38:04.741658",
     "exception": false,
     "start_time": "2024-07-04T12:38:04.732028",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Data Loader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "254d467a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:04.762604Z",
     "iopub.status.busy": "2024-07-04T12:38:04.762329Z",
     "iopub.status.idle": "2024-07-04T12:38:04.770651Z",
     "shell.execute_reply": "2024-07-04T12:38:04.769862Z"
    },
    "papermill": {
     "duration": 0.020878,
     "end_time": "2024-07-04T12:38:04.772469",
     "exception": false,
     "start_time": "2024-07-04T12:38:04.751591",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## custom data loader function to load the data and apply the transformation\n",
    "\n",
    "#   def __init__(self, data_root, data_list, transform=None, domain=None):\n",
    "        \n",
    "class GetLoader(data.Dataset):\n",
    "    def __init__(self, data_root, data_list, transform=None):\n",
    "        self.root = data_root ## data image folder\n",
    "        self.transform = transform \n",
    "#         self.domain = domain\n",
    "\n",
    "        ## read label txt file\n",
    "        f = open(data_list, 'r')\n",
    "        data_list = f.readlines()\n",
    "        f.close()\n",
    "\n",
    "        self.n_data = len(data_list)\n",
    "\n",
    "        self.img_paths = []\n",
    "        self.img_labels = []\n",
    "\n",
    "        for line in data_list:\n",
    "            img_file, label = line.strip().split(' ', 1)\n",
    "            self.img_paths.append(img_file)\n",
    "            self.img_labels.append(label)\n",
    "            \n",
    "\n",
    "    def __getitem__(self, item):\n",
    "        img_paths, labels = self.img_paths[item], self.img_labels[item]\n",
    "        imgs = Image.open(os.path.join(self.root, img_paths)).convert('RGB')\n",
    "\n",
    "#         if self.domain == 'source':\n",
    "#             imgs = imgs.convert('RGB')\n",
    "#         elif self.domain == 'target':\n",
    "#             imgs = imgs.convert('L')\n",
    "#         else:\n",
    "#             print('Error! Incorrect domain name.')\n",
    "            \n",
    "            \n",
    "        if self.transform is not None:\n",
    "            imgs = self.transform(imgs)\n",
    "            labels = int(labels)\n",
    "\n",
    "        return imgs, labels\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.n_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "95a7f671",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:04.793567Z",
     "iopub.status.busy": "2024-07-04T12:38:04.793302Z",
     "iopub.status.idle": "2024-07-04T12:38:04.797346Z",
     "shell.execute_reply": "2024-07-04T12:38:04.796612Z"
    },
    "papermill": {
     "duration": 0.016705,
     "end_time": "2024-07-04T12:38:04.799186",
     "exception": false,
     "start_time": "2024-07-04T12:38:04.782481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Fetch data label\n",
    "\n",
    "# source domain\n",
    "label_list_source = os.path.join(target_image_root, 'train_labels.txt')\n",
    "\n",
    "# target domain\n",
    "label_list_target = os.path.join(target_image_root, 'train_labels.txt')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f11a963a",
   "metadata": {
    "papermill": {
     "duration": 0.009905,
     "end_time": "2024-07-04T12:38:04.819017",
     "exception": false,
     "start_time": "2024-07-04T12:38:04.809112",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Standardization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "670f3656",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:04.839941Z",
     "iopub.status.busy": "2024-07-04T12:38:04.839679Z",
     "iopub.status.idle": "2024-07-04T12:38:04.845574Z",
     "shell.execute_reply": "2024-07-04T12:38:04.844728Z"
    },
    "papermill": {
     "duration": 0.018451,
     "end_time": "2024-07-04T12:38:04.847449",
     "exception": false,
     "start_time": "2024-07-04T12:38:04.828998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "##Standardization function\n",
    "\n",
    "def calculate_mean_std(loader):\n",
    "    \n",
    "    ##initializing accumulaters\n",
    "    mean = 0.0\n",
    "    std = 0.0\n",
    "    total_images_count = 0\n",
    "\n",
    "    for images, _ in loader: # loader returns the images and the labels for each batch\n",
    "        images_count_in_a_batch = images.size(0) #returns the batch size shape(batch_size, channels, height, width)\n",
    "        images = images.view(images_count_in_a_batch, images.size(1), -1) #reshape the image (batch_size, channel, flattened)\n",
    "        mean += images.mean(2).sum(0) #takes mean at the flattened dim and sums for all the images in the batch\n",
    "        std += images.std(2).sum(0) \n",
    "        total_images_count += images_count_in_a_batch \n",
    "\n",
    "    mean /= total_images_count #to calc avg mean\n",
    "    std /= total_images_count #to calc avg std\n",
    "\n",
    "    return mean, std\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6a09b1e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:04.868225Z",
     "iopub.status.busy": "2024-07-04T12:38:04.867918Z",
     "iopub.status.idle": "2024-07-04T12:38:04.872031Z",
     "shell.execute_reply": "2024-07-04T12:38:04.871229Z"
    },
    "papermill": {
     "duration": 0.016711,
     "end_time": "2024-07-04T12:38:04.874099",
     "exception": false,
     "start_time": "2024-07-04T12:38:04.857388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Temporary transform for calculating mean and std\n",
    "temp_transform = transforms.Compose([\n",
    "    transforms.Resize(image_size),\n",
    "    transforms.ToTensor()\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c62f54a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:04.895284Z",
     "iopub.status.busy": "2024-07-04T12:38:04.895004Z",
     "iopub.status.idle": "2024-07-04T12:38:05.036955Z",
     "shell.execute_reply": "2024-07-04T12:38:05.036046Z"
    },
    "papermill": {
     "duration": 0.154903,
     "end_time": "2024-07-04T12:38:05.039231",
     "exception": false,
     "start_time": "2024-07-04T12:38:04.884328",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Source Domain\n",
    "temp_dataset_source = GetLoader(\n",
    "                                data_root = os.path.join(source_image_root, 'train'),\n",
    "                                data_list = label_list_source,\n",
    "                                transform = temp_transform,\n",
    "#                                 domain = 'source'\n",
    "                               )\n",
    "\n",
    "temp_loader_source = torch.utils.data.DataLoader(\n",
    "                                temp_dataset_source, \n",
    "                                batch_size=batch_size, \n",
    "                                shuffle=True, \n",
    "                                num_workers=4\n",
    "                                )\n",
    "\n",
    "# Target Domain\n",
    "temp_dataset_target = GetLoader(\n",
    "                                data_root=os.path.join(target_image_root, 'train'), \n",
    "                                data_list=label_list_target, \n",
    "                                transform=temp_transform,\n",
    "#                                 domain = 'target'\n",
    "                                )\n",
    "\n",
    "temp_loader_target = torch.utils.data.DataLoader(\n",
    "                                temp_dataset_target, \n",
    "                                batch_size=batch_size, \n",
    "                                shuffle=True, \n",
    "                                num_workers=4\n",
    "                                )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bf454ac5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.060445Z",
     "iopub.status.busy": "2024-07-04T12:38:05.060143Z",
     "iopub.status.idle": "2024-07-04T12:38:05.063964Z",
     "shell.execute_reply": "2024-07-04T12:38:05.063222Z"
    },
    "papermill": {
     "duration": 0.016378,
     "end_time": "2024-07-04T12:38:05.065826",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.049448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# mean_source, std_source = calculate_mean_std(temp_loader_source)\n",
    "# mean_target, std_target = calculate_mean_std(temp_loader_target)\n",
    "\n",
    "\n",
    "# mean_source = [0.4666, 0.4894, 0.4106]\n",
    "# std_source = [0.1542, 0.1256, 0.1727]\n",
    "# mean_target = [0.4718]\n",
    "# std_target = [0.1345]\n",
    "\n",
    "# # Print results\n",
    "# print(f\"Source Mean: {mean_source}, Source Std: {std_source}\")\n",
    "# print(f\"Target Mean: {mean_target}, Target Std: {std_target}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca279c6f",
   "metadata": {
    "papermill": {
     "duration": 0.009939,
     "end_time": "2024-07-04T12:38:05.085656",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.075717",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "### Loading data after standardization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "33fe40d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.106470Z",
     "iopub.status.busy": "2024-07-04T12:38:05.106153Z",
     "iopub.status.idle": "2024-07-04T12:38:05.111673Z",
     "shell.execute_reply": "2024-07-04T12:38:05.110917Z"
    },
    "papermill": {
     "duration": 0.018013,
     "end_time": "2024-07-04T12:38:05.113542",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.095529",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Define final transformer\n",
    "\n",
    "img_transform_source = transforms.Compose([\n",
    "    transforms.Resize(image_size),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=(0.4666, 0.4894, 0.4106), std=(0.1542, 0.1256, 0.1727))\n",
    "])\n",
    "\n",
    "img_transform_target = transforms.Compose([\n",
    "    transforms.Resize(image_size),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=(0.4718,), std=(0.1345,))\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "789c64ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.134114Z",
     "iopub.status.busy": "2024-07-04T12:38:05.133848Z",
     "iopub.status.idle": "2024-07-04T12:38:05.183250Z",
     "shell.execute_reply": "2024-07-04T12:38:05.182412Z"
    },
    "papermill": {
     "duration": 0.061935,
     "end_time": "2024-07-04T12:38:05.185369",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.123434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torch/utils/data/dataloader.py:557: UserWarning: This DataLoader will create 8 worker processes in total. Our suggested max number of worker in current system is 4, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
      "  warnings.warn(_create_warning_msg(\n"
     ]
    }
   ],
   "source": [
    "## Loading Source Data\n",
    "\n",
    "\n",
    "dataset_source = GetLoader(\n",
    "    data_root=os.path.join(source_image_root, 'train'), #folder that contains the data images\n",
    "    data_list=label_list_source,#label text file\n",
    "    transform=img_transform_source #transformation\n",
    ")\n",
    "\n",
    "dataloader_source = torch.utils.data.DataLoader(\n",
    "    dataset=dataset_source,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=True,\n",
    "    num_workers=8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7802072d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.206501Z",
     "iopub.status.busy": "2024-07-04T12:38:05.206228Z",
     "iopub.status.idle": "2024-07-04T12:38:05.252309Z",
     "shell.execute_reply": "2024-07-04T12:38:05.251614Z"
    },
    "papermill": {
     "duration": 0.058897,
     "end_time": "2024-07-04T12:38:05.254289",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.195392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Loading Target Data\n",
    "\n",
    "dataset_target = GetLoader(\n",
    "    data_root=os.path.join(target_image_root, 'train'), #folder that contains the data images\n",
    "    data_list=label_list_target,#label text file\n",
    "    transform=img_transform_target #transformation\n",
    ")\n",
    "\n",
    "dataloader_target = torch.utils.data.DataLoader(\n",
    "    dataset=dataset_target,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=True,\n",
    "    num_workers=8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "52ce06b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.276047Z",
     "iopub.status.busy": "2024-07-04T12:38:05.275411Z",
     "iopub.status.idle": "2024-07-04T12:38:05.279302Z",
     "shell.execute_reply": "2024-07-04T12:38:05.278459Z"
    },
    "papermill": {
     "duration": 0.01662,
     "end_time": "2024-07-04T12:38:05.281238",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.264618",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from torch.autograd import Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "916c5f89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.302252Z",
     "iopub.status.busy": "2024-07-04T12:38:05.301961Z",
     "iopub.status.idle": "2024-07-04T12:38:05.306893Z",
     "shell.execute_reply": "2024-07-04T12:38:05.306088Z"
    },
    "papermill": {
     "duration": 0.017409,
     "end_time": "2024-07-04T12:38:05.308668",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.291259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class ReverseLayerF(Function):\n",
    "\n",
    "    @staticmethod\n",
    "    def forward(ctx, x, alpha):\n",
    "        ctx.alpha = alpha\n",
    "\n",
    "        return x.view_as(x)\n",
    "\n",
    "    @staticmethod\n",
    "    def backward(ctx, grad_output):\n",
    "        output = grad_output.neg() * ctx.alpha\n",
    "\n",
    "        return output, None"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b544823",
   "metadata": {
    "papermill": {
     "duration": 0.009737,
     "end_time": "2024-07-04T12:38:05.328311",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.318574",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "94cf0992",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.349345Z",
     "iopub.status.busy": "2024-07-04T12:38:05.349070Z",
     "iopub.status.idle": "2024-07-04T12:38:05.352659Z",
     "shell.execute_reply": "2024-07-04T12:38:05.351853Z"
    },
    "papermill": {
     "duration": 0.016048,
     "end_time": "2024-07-04T12:38:05.354469",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.338421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a32318b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.375444Z",
     "iopub.status.busy": "2024-07-04T12:38:05.375185Z",
     "iopub.status.idle": "2024-07-04T12:38:05.393886Z",
     "shell.execute_reply": "2024-07-04T12:38:05.393079Z"
    },
    "papermill": {
     "duration": 0.03137,
     "end_time": "2024-07-04T12:38:05.395782",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.364412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CNNModel(nn.Module):\n",
    "\n",
    "    def __init__(self):\n",
    "        super(CNNModel, self).__init__()\n",
    "        self.feature = nn.Sequential()\n",
    "        self.feature.add_module('f_conv1', nn.Conv2d(3, 64, kernel_size=5))\n",
    "        self.feature.add_module('f_bn1', nn.BatchNorm2d(64))\n",
    "        self.feature.add_module('f_pool1', nn.MaxPool2d(2))\n",
    "        self.feature.add_module('f_relu1', nn.ReLU(True))\n",
    "        self.feature.add_module('f_conv2', nn.Conv2d(64, 50, kernel_size=5))\n",
    "        self.feature.add_module('f_bn2', nn.BatchNorm2d(50))\n",
    "        self.feature.add_module('f_drop1', nn.Dropout())\n",
    "        self.feature.add_module('f_pool2', nn.MaxPool2d(2))\n",
    "        self.feature.add_module('f_relu2', nn.ReLU(True))\n",
    "\n",
    "        self.class_classifier = nn.Sequential()\n",
    "        self.class_classifier.add_module('c_fc1', nn.Linear(50 * 4 * 4, 100))\n",
    "        self.class_classifier.add_module('c_bn1', nn.BatchNorm1d(100))\n",
    "        self.class_classifier.add_module('c_relu1', nn.ReLU(True))\n",
    "        self.class_classifier.add_module('c_drop1', nn.Dropout())\n",
    "        self.class_classifier.add_module('c_fc2', nn.Linear(100, 100))\n",
    "        self.class_classifier.add_module('c_bn2', nn.BatchNorm1d(100))\n",
    "        self.class_classifier.add_module('c_relu2', nn.ReLU(True))\n",
    "        self.class_classifier.add_module('c_fc3', nn.Linear(100, 38))\n",
    "        self.class_classifier.add_module('c_softmax', nn.LogSoftmax())\n",
    "\n",
    "        self.domain_classifier = nn.Sequential()\n",
    "        self.domain_classifier.add_module('d_fc1', nn.Linear(50 * 4 * 4, 100))\n",
    "        self.domain_classifier.add_module('d_bn1', nn.BatchNorm1d(100))\n",
    "        self.domain_classifier.add_module('d_relu1', nn.ReLU(True))\n",
    "        self.domain_classifier.add_module('d_fc2', nn.Linear(100, 2))\n",
    "        self.domain_classifier.add_module('d_softmax', nn.LogSoftmax(dim=1))\n",
    "\n",
    "    def forward(self, input_data, alpha):\n",
    "        input_data = input_data.expand(input_data.data.shape[0], 3, 28, 28)\n",
    "        feature = self.feature(input_data)\n",
    "        feature = feature.view(-1, 50 * 4 * 4)\n",
    "        reverse_feature = ReverseLayerF.apply(feature, alpha)\n",
    "        class_output = self.class_classifier(feature)\n",
    "        domain_output = self.domain_classifier(reverse_feature)\n",
    "\n",
    "        return class_output, domain_output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88332adc",
   "metadata": {
    "papermill": {
     "duration": 0.009659,
     "end_time": "2024-07-04T12:38:05.415414",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.405755",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Test Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "69e037b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.436369Z",
     "iopub.status.busy": "2024-07-04T12:38:05.436083Z",
     "iopub.status.idle": "2024-07-04T12:38:05.450199Z",
     "shell.execute_reply": "2024-07-04T12:38:05.449405Z"
    },
    "papermill": {
     "duration": 0.026649,
     "end_time": "2024-07-04T12:38:05.452055",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.425406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "def test(dataset_name, epoch):\n",
    "    assert dataset_name in ['source_domain', 'target_domain']\n",
    "\n",
    "#     model_root = os.path.join('/kaggle/working', 'models')\n",
    "\n",
    "    image_root = os.path.join('/kaggle/input/plantvillage-dann/Plantvillage_Dataset', dataset_name)\n",
    "    \n",
    "    cudnn.benchmark = True\n",
    "    batch_size = 128\n",
    "    image_size = 28\n",
    "    alpha = 0\n",
    "\n",
    "    \"\"\"load data\"\"\"\n",
    "\n",
    "    img_transform_source = transforms.Compose([\n",
    "        transforms.Resize(image_size),\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize(mean=(0.4666, 0.4894, 0.4106), std=(0.1542, 0.1256, 0.1727))\n",
    "    ])\n",
    "\n",
    "    img_transform_target = transforms.Compose([\n",
    "        transforms.Resize(image_size),\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize(mean=(0.4718,), std=(0.1345,))\n",
    "    ])\n",
    "        \n",
    "    test_list = os.path.join(image_root, 'test_labels.txt')\n",
    "\n",
    "    dataset = GetLoader(\n",
    "        data_root=os.path.join(image_root, 'test'),\n",
    "        data_list=test_list,\n",
    "        transform=img_transform_source if dataset_name == 'source_domain' else img_transform_target\n",
    "    )\n",
    "        \n",
    "\n",
    "    dataloader = torch.utils.data.DataLoader(\n",
    "        dataset=dataset,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=False,\n",
    "        num_workers=8\n",
    "    )\n",
    "\n",
    "    \"\"\" training \"\"\"\n",
    "\n",
    "    my_net = torch.load(os.path.join(\n",
    "        model_root, 'plantvillage_model_epoch_' + str(epoch) + '.pth'\n",
    "    ))\n",
    "    my_net = my_net.eval()\n",
    "\n",
    "    if cuda:\n",
    "        my_net = my_net.cuda()\n",
    "\n",
    "    len_dataloader = len(dataloader)\n",
    "    data_target_iter = iter(dataloader)\n",
    "\n",
    "    i = 0\n",
    "    n_total = 0\n",
    "    n_correct = 0\n",
    "    total_loss = 0  # Initialize total loss\n",
    "\n",
    "\n",
    "    while i < len_dataloader:\n",
    "\n",
    "        # test model using target data\n",
    "        data_target = next(data_target_iter)\n",
    "        t_img, t_label = data_target\n",
    "\n",
    "        batch_size = len(t_label)\n",
    "\n",
    "        input_img = torch.FloatTensor(batch_size, 3, image_size, image_size)\n",
    "        class_label = torch.LongTensor(batch_size)\n",
    "\n",
    "        if cuda:\n",
    "            t_img = t_img.cuda()\n",
    "            t_label = t_label.cuda()\n",
    "            input_img = input_img.cuda()\n",
    "            class_label = class_label.cuda()\n",
    "\n",
    "        input_img.resize_as_(t_img).copy_(t_img)\n",
    "        class_label.resize_as_(t_label).copy_(t_label)\n",
    "\n",
    "        ##run model\n",
    "        class_output, _ = my_net(input_data=input_img, alpha=alpha)\n",
    "        \n",
    "        ##calc loss\n",
    "        err_test_label = loss_class(class_output, class_label)\n",
    "        \n",
    "        total_loss += err_test_label.item()  # Accumulate the loss\n",
    "\n",
    "        \n",
    "        ##calc acc\n",
    "        pred = class_output.data.max(1, keepdim=True)[1]\n",
    "        n_correct += pred.eq(class_label.data.view_as(pred)).cpu().sum().item()\n",
    "        n_total += batch_size\n",
    "\n",
    "        i += 1\n",
    "        \n",
    "    avg_loss = total_loss / len_dataloader  # Compute average loss\n",
    "    accu = n_correct / n_total\n",
    "\n",
    "#     print('epoch: %d, accuracy of the %s dataset: %f' % (epoch, dataset_name, accu))\n",
    "    \n",
    "    return avg_loss, accu"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb444cbd",
   "metadata": {
    "papermill": {
     "duration": 0.0097,
     "end_time": "2024-07-04T12:38:05.471615",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.461915",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Main"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c36aee05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.492630Z",
     "iopub.status.busy": "2024-07-04T12:38:05.492363Z",
     "iopub.status.idle": "2024-07-04T12:38:05.499214Z",
     "shell.execute_reply": "2024-07-04T12:38:05.498338Z"
    },
    "papermill": {
     "duration": 0.019434,
     "end_time": "2024-07-04T12:38:05.501080",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.481646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['train_labels.txt', 'test', 'test_labels.txt', 'train']\n"
     ]
    }
   ],
   "source": [
    "print(os.listdir(target_image_root))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f12b2a03",
   "metadata": {
    "papermill": {
     "duration": 0.009703,
     "end_time": "2024-07-04T12:38:05.521040",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.511337",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Load Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "64ec3d47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.542568Z",
     "iopub.status.busy": "2024-07-04T12:38:05.541897Z",
     "iopub.status.idle": "2024-07-04T12:38:05.591700Z",
     "shell.execute_reply": "2024-07-04T12:38:05.590831Z"
    },
    "papermill": {
     "duration": 0.06261,
     "end_time": "2024-07-04T12:38:05.593761",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.531151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_net = CNNModel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8ba53e97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.614968Z",
     "iopub.status.busy": "2024-07-04T12:38:05.614723Z",
     "iopub.status.idle": "2024-07-04T12:38:05.619854Z",
     "shell.execute_reply": "2024-07-04T12:38:05.619190Z"
    },
    "papermill": {
     "duration": 0.017794,
     "end_time": "2024-07-04T12:38:05.621769",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.603975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# setup optimizer\n",
    "\n",
    "optimizer = optim.Adam(my_net.parameters(), lr=lr)\n",
    "\n",
    "loss_class = torch.nn.NLLLoss()\n",
    "loss_domain = torch.nn.NLLLoss()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4d58cd70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.642783Z",
     "iopub.status.busy": "2024-07-04T12:38:05.642541Z",
     "iopub.status.idle": "2024-07-04T12:38:05.799367Z",
     "shell.execute_reply": "2024-07-04T12:38:05.798352Z"
    },
    "papermill": {
     "duration": 0.169996,
     "end_time": "2024-07-04T12:38:05.801795",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.631799",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "if cuda:\n",
    "    my_net = my_net.cuda()\n",
    "    loss_class = loss_class.cuda()\n",
    "    loss_domain = loss_domain.cuda()\n",
    "\n",
    "for p in my_net.parameters():\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7f79a586",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.823349Z",
     "iopub.status.busy": "2024-07-04T12:38:05.823004Z",
     "iopub.status.idle": "2024-07-04T12:38:05.827323Z",
     "shell.execute_reply": "2024-07-04T12:38:05.826442Z"
    },
    "papermill": {
     "duration": 0.017135,
     "end_time": "2024-07-04T12:38:05.829296",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.812161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "if not os.path.exists(model_root):\n",
    "    os.makedirs(model_root)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5ebb4d6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.850425Z",
     "iopub.status.busy": "2024-07-04T12:38:05.850136Z",
     "iopub.status.idle": "2024-07-04T12:38:05.854148Z",
     "shell.execute_reply": "2024-07-04T12:38:05.853306Z"
    },
    "papermill": {
     "duration": 0.017071,
     "end_time": "2024-07-04T12:38:05.856388",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.839317",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "400\n"
     ]
    }
   ],
   "source": [
    "print(n_epoch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "717633aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T12:38:05.878006Z",
     "iopub.status.busy": "2024-07-04T12:38:05.877545Z",
     "iopub.status.idle": "2024-07-04T19:07:27.254255Z",
     "shell.execute_reply": "2024-07-04T19:07:27.252731Z"
    },
    "papermill": {
     "duration": 23361.39028,
     "end_time": "2024-07-04T19:07:27.256826",
     "exception": false,
     "start_time": "2024-07-04T12:38:05.866546",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TRAINING STARTED...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1518: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.\n",
      "  return self._call_impl(*args, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "epoch:  0\n",
      "\tTrain:\n",
      "\t\terr_s_label: 1.722804, err_s_domain: 0.503035, err_t_domain: 0.508754, accuracy: 0.546041\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 1.131366, accuracy: 0.702280\n",
      "\t\tTarget dataset -  loss: 3.272876, accuracy: 0.234369\n",
      "\n",
      "epoch:  1\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.922566, err_s_domain: 0.179229, err_t_domain: 0.178644, accuracy: 0.725322\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.728693, accuracy: 0.784755\n",
      "\t\tTarget dataset -  loss: 3.512648, accuracy: 0.243104\n",
      "\n",
      "epoch:  2\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.734986, err_s_domain: 0.084004, err_t_domain: 0.082715, accuracy: 0.773930\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.591720, accuracy: 0.829441\n",
      "\t\tTarget dataset -  loss: 3.803808, accuracy: 0.199798\n",
      "\n",
      "epoch:  3\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.622438, err_s_domain: 0.047587, err_t_domain: 0.046343, accuracy: 0.804232\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.508938, accuracy: 0.846451\n",
      "\t\tTarget dataset -  loss: 4.067315, accuracy: 0.208073\n",
      "\n",
      "epoch:  4\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.556481, err_s_domain: 0.030771, err_t_domain: 0.029955, accuracy: 0.824633\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.507325, accuracy: 0.845991\n",
      "\t\tTarget dataset -  loss: 4.248429, accuracy: 0.179937\n",
      "\n",
      "epoch:  5\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.504080, err_s_domain: 0.023475, err_t_domain: 0.022486, accuracy: 0.840890\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.424460, accuracy: 0.868518\n",
      "\t\tTarget dataset -  loss: 4.042181, accuracy: 0.233726\n",
      "\n",
      "epoch:  6\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.468660, err_s_domain: 0.020248, err_t_domain: 0.020493, accuracy: 0.850469\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.407480, accuracy: 0.877712\n",
      "\t\tTarget dataset -  loss: 4.892277, accuracy: 0.172122\n",
      "\n",
      "epoch:  7\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.430828, err_s_domain: 0.013996, err_t_domain: 0.013410, accuracy: 0.862143\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.333291, accuracy: 0.897940\n",
      "\t\tTarget dataset -  loss: 4.428479, accuracy: 0.215704\n",
      "\n",
      "epoch:  8\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.406750, err_s_domain: 0.012093, err_t_domain: 0.012069, accuracy: 0.871330\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.363550, accuracy: 0.882034\n",
      "\t\tTarget dataset -  loss: 4.173387, accuracy: 0.226370\n",
      "\n",
      "epoch:  9\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.386842, err_s_domain: 0.011935, err_t_domain: 0.011486, accuracy: 0.875682\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.332439, accuracy: 0.897021\n",
      "\t\tTarget dataset -  loss: 4.284784, accuracy: 0.218555\n",
      "\n",
      "epoch:  10\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.362525, err_s_domain: 0.010449, err_t_domain: 0.009975, accuracy: 0.884570\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.356470, accuracy: 0.885896\n",
      "\t\tTarget dataset -  loss: 3.980101, accuracy: 0.282089\n",
      "\n",
      "epoch:  11\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.346616, err_s_domain: 0.009418, err_t_domain: 0.009257, accuracy: 0.887633\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.336093, accuracy: 0.890033\n",
      "\t\tTarget dataset -  loss: 4.495350, accuracy: 0.253586\n",
      "\n",
      "epoch:  12\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.344222, err_s_domain: 0.011157, err_t_domain: 0.011004, accuracy: 0.886965\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.310017, accuracy: 0.899503\n",
      "\t\tTarget dataset -  loss: 4.656063, accuracy: 0.238139\n",
      "\n",
      "epoch:  13\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.325766, err_s_domain: 0.009839, err_t_domain: 0.009379, accuracy: 0.893113\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.420305, accuracy: 0.864472\n",
      "\t\tTarget dataset -  loss: 4.324135, accuracy: 0.262137\n",
      "\n",
      "epoch:  14\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.320724, err_s_domain: 0.008177, err_t_domain: 0.007554, accuracy: 0.895416\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.277144, accuracy: 0.912100\n",
      "\t\tTarget dataset -  loss: 4.278545, accuracy: 0.262137\n",
      "\n",
      "epoch:  15\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.314264, err_s_domain: 0.009168, err_t_domain: 0.008411, accuracy: 0.899054\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.308097, accuracy: 0.899044\n",
      "\t\tTarget dataset -  loss: 4.176388, accuracy: 0.268113\n",
      "\n",
      "epoch:  16\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.299397, err_s_domain: 0.006866, err_t_domain: 0.006466, accuracy: 0.901310\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.338804, accuracy: 0.888378\n",
      "\t\tTarget dataset -  loss: 4.523995, accuracy: 0.262688\n",
      "\n",
      "epoch:  17\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.294152, err_s_domain: 0.005403, err_t_domain: 0.005232, accuracy: 0.902830\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.283828, accuracy: 0.907135\n",
      "\t\tTarget dataset -  loss: 4.298414, accuracy: 0.268665\n",
      "\n",
      "epoch:  18\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.286316, err_s_domain: 0.006324, err_t_domain: 0.006091, accuracy: 0.906422\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.310723, accuracy: 0.901986\n",
      "\t\tTarget dataset -  loss: 4.399476, accuracy: 0.249724\n",
      "\n",
      "epoch:  19\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.282988, err_s_domain: 0.006399, err_t_domain: 0.006710, accuracy: 0.906330\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.328243, accuracy: 0.893527\n",
      "\t\tTarget dataset -  loss: 4.813790, accuracy: 0.206142\n",
      "\n",
      "epoch:  20\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.277737, err_s_domain: 0.008574, err_t_domain: 0.008379, accuracy: 0.907965\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.282840, accuracy: 0.910629\n",
      "\t\tTarget dataset -  loss: 4.169341, accuracy: 0.279882\n",
      "\n",
      "epoch:  21\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.264964, err_s_domain: 0.005990, err_t_domain: 0.005553, accuracy: 0.912178\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.313676, accuracy: 0.899779\n",
      "\t\tTarget dataset -  loss: 4.459835, accuracy: 0.262137\n",
      "\n",
      "epoch:  22\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.259931, err_s_domain: 0.005358, err_t_domain: 0.005634, accuracy: 0.913238\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.341800, accuracy: 0.889573\n",
      "\t\tTarget dataset -  loss: 4.544131, accuracy: 0.271883\n",
      "\n",
      "epoch:  23\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.251043, err_s_domain: 0.005127, err_t_domain: 0.004781, accuracy: 0.917544\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.265314, accuracy: 0.914307\n",
      "\t\tTarget dataset -  loss: 4.846528, accuracy: 0.220118\n",
      "\n",
      "epoch:  24\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.249432, err_s_domain: 0.004388, err_t_domain: 0.004274, accuracy: 0.916277\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.263205, accuracy: 0.917341\n",
      "\t\tTarget dataset -  loss: 4.631636, accuracy: 0.255149\n",
      "\n",
      "epoch:  25\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.247557, err_s_domain: 0.005206, err_t_domain: 0.004868, accuracy: 0.919017\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.229367, accuracy: 0.926627\n",
      "\t\tTarget dataset -  loss: 4.900605, accuracy: 0.220210\n",
      "\n",
      "epoch:  26\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.241566, err_s_domain: 0.003684, err_t_domain: 0.003711, accuracy: 0.919800\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.246491, accuracy: 0.921662\n",
      "\t\tTarget dataset -  loss: 4.460965, accuracy: 0.265447\n",
      "\n",
      "epoch:  27\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.243001, err_s_domain: 0.004422, err_t_domain: 0.004165, accuracy: 0.920652\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.255456, accuracy: 0.917249\n",
      "\t\tTarget dataset -  loss: 4.692081, accuracy: 0.255425\n",
      "\n",
      "epoch:  28\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.232743, err_s_domain: 0.005744, err_t_domain: 0.005820, accuracy: 0.923530\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.366003, accuracy: 0.880747\n",
      "\t\tTarget dataset -  loss: 4.690505, accuracy: 0.253310\n",
      "\n",
      "epoch:  29\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.225288, err_s_domain: 0.006401, err_t_domain: 0.005784, accuracy: 0.924935\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.304251, accuracy: 0.902262\n",
      "\t\tTarget dataset -  loss: 4.604486, accuracy: 0.242828\n",
      "\n",
      "epoch:  30\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.223701, err_s_domain: 0.008478, err_t_domain: 0.008523, accuracy: 0.926247\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.394000, accuracy: 0.872563\n",
      "\t\tTarget dataset -  loss: 4.541516, accuracy: 0.300294\n",
      "\n",
      "epoch:  31\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.233563, err_s_domain: 0.010499, err_t_domain: 0.009888, accuracy: 0.922402\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.285924, accuracy: 0.906951\n",
      "\t\tTarget dataset -  loss: 4.552563, accuracy: 0.277584\n",
      "\n",
      "epoch:  32\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.628880, err_s_domain: 0.738986, err_t_domain: 0.778500, accuracy: 0.812637\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.928454, accuracy: 0.712394\n",
      "\t\tTarget dataset -  loss: 3.910544, accuracy: 0.252391\n",
      "\n",
      "epoch:  33\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.627517, err_s_domain: 0.742410, err_t_domain: 0.765882, accuracy: 0.804301\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.524287, accuracy: 0.833946\n",
      "\t\tTarget dataset -  loss: 3.516714, accuracy: 0.315189\n",
      "\n",
      "epoch:  34\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.506549, err_s_domain: 0.582715, err_t_domain: 0.592825, accuracy: 0.839025\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.468430, accuracy: 0.848382\n",
      "\t\tTarget dataset -  loss: 3.864709, accuracy: 0.289904\n",
      "\n",
      "epoch:  35\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.472699, err_s_domain: 0.547941, err_t_domain: 0.557263, accuracy: 0.848258\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.516888, accuracy: 0.832199\n",
      "\t\tTarget dataset -  loss: 3.463736, accuracy: 0.330085\n",
      "\n",
      "epoch:  36\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.458761, err_s_domain: 0.529467, err_t_domain: 0.536138, accuracy: 0.853301\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.446905, accuracy: 0.859323\n",
      "\t\tTarget dataset -  loss: 3.250084, accuracy: 0.348566\n",
      "\n",
      "epoch:  37\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.442137, err_s_domain: 0.508600, err_t_domain: 0.512542, accuracy: 0.857538\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.578207, accuracy: 0.816477\n",
      "\t\tTarget dataset -  loss: 2.871544, accuracy: 0.386723\n",
      "\n",
      "epoch:  38\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.449895, err_s_domain: 0.504814, err_t_domain: 0.501094, accuracy: 0.854890\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.535819, accuracy: 0.831740\n",
      "\t\tTarget dataset -  loss: 3.325341, accuracy: 0.341026\n",
      "\n",
      "epoch:  39\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.445100, err_s_domain: 0.501111, err_t_domain: 0.505279, accuracy: 0.857284\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.534880, accuracy: 0.834038\n",
      "\t\tTarget dataset -  loss: 3.345950, accuracy: 0.323373\n",
      "\n",
      "epoch:  40\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.438419, err_s_domain: 0.500507, err_t_domain: 0.502417, accuracy: 0.857445\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.545435, accuracy: 0.830360\n",
      "\t\tTarget dataset -  loss: 3.516733, accuracy: 0.292387\n",
      "\n",
      "epoch:  41\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.434611, err_s_domain: 0.507204, err_t_domain: 0.506856, accuracy: 0.860945\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.782304, accuracy: 0.759562\n",
      "\t\tTarget dataset -  loss: 2.637978, accuracy: 0.412192\n",
      "\n",
      "epoch:  42\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.430230, err_s_domain: 0.496949, err_t_domain: 0.497720, accuracy: 0.859978\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.671701, accuracy: 0.785675\n",
      "\t\tTarget dataset -  loss: 3.005006, accuracy: 0.354910\n",
      "\n",
      "epoch:  43\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.451085, err_s_domain: 0.472922, err_t_domain: 0.474909, accuracy: 0.856110\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.853218, accuracy: 0.743932\n",
      "\t\tTarget dataset -  loss: 3.262301, accuracy: 0.361162\n",
      "\n",
      "epoch:  44\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.451851, err_s_domain: 0.493149, err_t_domain: 0.494927, accuracy: 0.855811\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.767969, accuracy: 0.755057\n",
      "\t\tTarget dataset -  loss: 2.900766, accuracy: 0.397757\n",
      "\n",
      "epoch:  45\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.443891, err_s_domain: 0.498256, err_t_domain: 0.496358, accuracy: 0.857791\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.598658, accuracy: 0.812707\n",
      "\t\tTarget dataset -  loss: 2.605157, accuracy: 0.445844\n",
      "\n",
      "epoch:  46\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.445195, err_s_domain: 0.494367, err_t_domain: 0.498527, accuracy: 0.857146\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.961587, accuracy: 0.709176\n",
      "\t\tTarget dataset -  loss: 2.924803, accuracy: 0.375322\n",
      "\n",
      "epoch:  47\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.461598, err_s_domain: 0.509428, err_t_domain: 0.514055, accuracy: 0.853876\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.693120, accuracy: 0.785307\n",
      "\t\tTarget dataset -  loss: 2.870157, accuracy: 0.372288\n",
      "\n",
      "epoch:  48\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.473097, err_s_domain: 0.518477, err_t_domain: 0.521181, accuracy: 0.850077\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.590662, accuracy: 0.814546\n",
      "\t\tTarget dataset -  loss: 3.286924, accuracy: 0.358680\n",
      "\n",
      "epoch:  49\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.463764, err_s_domain: 0.522981, err_t_domain: 0.524201, accuracy: 0.853992\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.739607, accuracy: 0.776756\n",
      "\t\tTarget dataset -  loss: 3.043965, accuracy: 0.373023\n",
      "\n",
      "epoch:  50\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.459121, err_s_domain: 0.531250, err_t_domain: 0.535658, accuracy: 0.851919\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.611236, accuracy: 0.805259\n",
      "\t\tTarget dataset -  loss: 3.070428, accuracy: 0.375965\n",
      "\n",
      "epoch:  51\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.447034, err_s_domain: 0.514272, err_t_domain: 0.512951, accuracy: 0.854751\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.545924, accuracy: 0.824660\n",
      "\t\tTarget dataset -  loss: 2.706607, accuracy: 0.420927\n",
      "\n",
      "epoch:  52\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.453630, err_s_domain: 0.535191, err_t_domain: 0.539594, accuracy: 0.855373\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.468376, accuracy: 0.851416\n",
      "\t\tTarget dataset -  loss: 2.470935, accuracy: 0.456418\n",
      "\n",
      "epoch:  53\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.441083, err_s_domain: 0.521886, err_t_domain: 0.521176, accuracy: 0.857929\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.815949, accuracy: 0.753770\n",
      "\t\tTarget dataset -  loss: 2.424597, accuracy: 0.461567\n",
      "\n",
      "epoch:  54\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.454341, err_s_domain: 0.543190, err_t_domain: 0.544106, accuracy: 0.856432\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.703918, accuracy: 0.779515\n",
      "\t\tTarget dataset -  loss: 2.433018, accuracy: 0.462762\n",
      "\n",
      "epoch:  55\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.436106, err_s_domain: 0.522028, err_t_domain: 0.517623, accuracy: 0.860255\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.591123, accuracy: 0.815281\n",
      "\t\tTarget dataset -  loss: 2.771995, accuracy: 0.400791\n",
      "\n",
      "epoch:  56\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.456396, err_s_domain: 0.542554, err_t_domain: 0.542769, accuracy: 0.854360\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.521568, accuracy: 0.835325\n",
      "\t\tTarget dataset -  loss: 2.388650, accuracy: 0.451729\n",
      "\n",
      "epoch:  57\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.442859, err_s_domain: 0.530456, err_t_domain: 0.535932, accuracy: 0.859311\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.490203, accuracy: 0.844428\n",
      "\t\tTarget dataset -  loss: 2.429406, accuracy: 0.456326\n",
      "\n",
      "epoch:  58\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.437114, err_s_domain: 0.546677, err_t_domain: 0.548796, accuracy: 0.861429\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.516154, accuracy: 0.834866\n",
      "\t\tTarget dataset -  loss: 2.427505, accuracy: 0.465612\n",
      "\n",
      "epoch:  59\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.447230, err_s_domain: 0.539563, err_t_domain: 0.539873, accuracy: 0.856570\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.534095, accuracy: 0.834958\n",
      "\t\tTarget dataset -  loss: 2.677928, accuracy: 0.448694\n",
      "\n",
      "epoch:  60\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.457771, err_s_domain: 0.549096, err_t_domain: 0.549165, accuracy: 0.852587\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.846810, accuracy: 0.749448\n",
      "\t\tTarget dataset -  loss: 2.383062, accuracy: 0.467359\n",
      "\n",
      "epoch:  61\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.474136, err_s_domain: 0.559477, err_t_domain: 0.563736, accuracy: 0.849801\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.381926, accuracy: 0.883045\n",
      "\t\tTarget dataset -  loss: 2.289079, accuracy: 0.482346\n",
      "\n",
      "epoch:  62\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.491831, err_s_domain: 0.580725, err_t_domain: 0.583757, accuracy: 0.843284\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.584735, accuracy: 0.820063\n",
      "\t\tTarget dataset -  loss: 2.924695, accuracy: 0.402446\n",
      "\n",
      "epoch:  63\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.438016, err_s_domain: 0.529913, err_t_domain: 0.527466, accuracy: 0.859840\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.662556, accuracy: 0.794869\n",
      "\t\tTarget dataset -  loss: 2.609385, accuracy: 0.444557\n",
      "\n",
      "epoch:  64\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.454946, err_s_domain: 0.566519, err_t_domain: 0.571267, accuracy: 0.853255\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.523539, accuracy: 0.833946\n",
      "\t\tTarget dataset -  loss: 2.434907, accuracy: 0.444281\n",
      "\n",
      "epoch:  65\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.445069, err_s_domain: 0.561398, err_t_domain: 0.565317, accuracy: 0.856939\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.560138, accuracy: 0.823005\n",
      "\t\tTarget dataset -  loss: 2.304716, accuracy: 0.482163\n",
      "\n",
      "epoch:  66\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.469659, err_s_domain: 0.568272, err_t_domain: 0.572542, accuracy: 0.850446\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.531078, accuracy: 0.832291\n",
      "\t\tTarget dataset -  loss: 2.468697, accuracy: 0.464141\n",
      "\n",
      "epoch:  67\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.448572, err_s_domain: 0.554551, err_t_domain: 0.552599, accuracy: 0.857399\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.534264, accuracy: 0.835050\n",
      "\t\tTarget dataset -  loss: 2.445115, accuracy: 0.456969\n",
      "\n",
      "epoch:  68\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.440485, err_s_domain: 0.560879, err_t_domain: 0.558970, accuracy: 0.860163\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.448674, accuracy: 0.857668\n",
      "\t\tTarget dataset -  loss: 2.397617, accuracy: 0.472416\n",
      "\n",
      "epoch:  69\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.431849, err_s_domain: 0.555965, err_t_domain: 0.555092, accuracy: 0.859288\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.546446, accuracy: 0.830177\n",
      "\t\tTarget dataset -  loss: 2.299989, accuracy: 0.500184\n",
      "\n",
      "epoch:  70\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.440688, err_s_domain: 0.544044, err_t_domain: 0.547815, accuracy: 0.858896\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.448801, accuracy: 0.857209\n",
      "\t\tTarget dataset -  loss: 2.659130, accuracy: 0.417617\n",
      "\n",
      "epoch:  71\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.441124, err_s_domain: 0.578245, err_t_domain: 0.577993, accuracy: 0.858505\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.511444, accuracy: 0.838636\n",
      "\t\tTarget dataset -  loss: 2.795306, accuracy: 0.407411\n",
      "\n",
      "epoch:  72\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.451993, err_s_domain: 0.572839, err_t_domain: 0.572278, accuracy: 0.857031\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.611215, accuracy: 0.816477\n",
      "\t\tTarget dataset -  loss: 2.523866, accuracy: 0.458716\n",
      "\n",
      "epoch:  73\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.427867, err_s_domain: 0.554562, err_t_domain: 0.556276, accuracy: 0.861959\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.642156, accuracy: 0.798455\n",
      "\t\tTarget dataset -  loss: 2.408742, accuracy: 0.473336\n",
      "\n",
      "epoch:  74\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.428547, err_s_domain: 0.573083, err_t_domain: 0.571229, accuracy: 0.860370\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.530553, accuracy: 0.832199\n",
      "\t\tTarget dataset -  loss: 2.409254, accuracy: 0.480048\n",
      "\n",
      "epoch:  75\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.429507, err_s_domain: 0.560465, err_t_domain: 0.567307, accuracy: 0.864538\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.550015, accuracy: 0.824292\n",
      "\t\tTarget dataset -  loss: 1.980290, accuracy: 0.528595\n",
      "\n",
      "epoch:  76\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.437586, err_s_domain: 0.582397, err_t_domain: 0.583932, accuracy: 0.858390\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.635140, accuracy: 0.802409\n",
      "\t\tTarget dataset -  loss: 2.111176, accuracy: 0.507815\n",
      "\n",
      "epoch:  77\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.433085, err_s_domain: 0.566846, err_t_domain: 0.569096, accuracy: 0.862557\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.432756, accuracy: 0.862082\n",
      "\t\tTarget dataset -  loss: 2.374489, accuracy: 0.472049\n",
      "\n",
      "epoch:  78\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.433590, err_s_domain: 0.575714, err_t_domain: 0.577081, accuracy: 0.860669\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.458354, accuracy: 0.852795\n",
      "\t\tTarget dataset -  loss: 2.328016, accuracy: 0.498713\n",
      "\n",
      "epoch:  79\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.431459, err_s_domain: 0.577699, err_t_domain: 0.577138, accuracy: 0.861567\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.714960, accuracy: 0.785583\n",
      "\t\tTarget dataset -  loss: 2.150468, accuracy: 0.496414\n",
      "\n",
      "epoch:  80\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.422779, err_s_domain: 0.573396, err_t_domain: 0.574430, accuracy: 0.864837\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.428849, accuracy: 0.866035\n",
      "\t\tTarget dataset -  loss: 2.147997, accuracy: 0.519125\n",
      "\n",
      "epoch:  81\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.437296, err_s_domain: 0.573982, err_t_domain: 0.578193, accuracy: 0.860163\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.654526, accuracy: 0.797812\n",
      "\t\tTarget dataset -  loss: 2.196977, accuracy: 0.480691\n",
      "\n",
      "epoch:  82\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.455732, err_s_domain: 0.580338, err_t_domain: 0.576811, accuracy: 0.855419\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.708825, accuracy: 0.779423\n",
      "\t\tTarget dataset -  loss: 2.524832, accuracy: 0.454119\n",
      "\n",
      "epoch:  83\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.443126, err_s_domain: 0.587927, err_t_domain: 0.589180, accuracy: 0.859242\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.522916, accuracy: 0.832199\n",
      "\t\tTarget dataset -  loss: 2.136718, accuracy: 0.505793\n",
      "\n",
      "epoch:  84\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.434905, err_s_domain: 0.587446, err_t_domain: 0.593086, accuracy: 0.863616\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.584269, accuracy: 0.817120\n",
      "\t\tTarget dataset -  loss: 1.985639, accuracy: 0.525929\n",
      "\n",
      "epoch:  85\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.429015, err_s_domain: 0.574088, err_t_domain: 0.578753, accuracy: 0.864146\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.474325, accuracy: 0.849669\n",
      "\t\tTarget dataset -  loss: 1.932755, accuracy: 0.552133\n",
      "\n",
      "epoch:  86\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.431295, err_s_domain: 0.583649, err_t_domain: 0.580160, accuracy: 0.862880\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.465327, accuracy: 0.846451\n",
      "\t\tTarget dataset -  loss: 2.001618, accuracy: 0.521791\n",
      "\n",
      "epoch:  87\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.421182, err_s_domain: 0.586650, err_t_domain: 0.589139, accuracy: 0.865366\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.531245, accuracy: 0.831004\n",
      "\t\tTarget dataset -  loss: 2.202936, accuracy: 0.513976\n",
      "\n",
      "epoch:  88\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.419825, err_s_domain: 0.588451, err_t_domain: 0.592573, accuracy: 0.865067\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.574264, accuracy: 0.819971\n",
      "\t\tTarget dataset -  loss: 2.134968, accuracy: 0.522251\n",
      "\n",
      "epoch:  89\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.419916, err_s_domain: 0.579851, err_t_domain: 0.585153, accuracy: 0.864123\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.562166, accuracy: 0.820706\n",
      "\t\tTarget dataset -  loss: 2.082814, accuracy: 0.511493\n",
      "\n",
      "epoch:  90\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.417651, err_s_domain: 0.582486, err_t_domain: 0.581256, accuracy: 0.864929\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.480335, accuracy: 0.845164\n",
      "\t\tTarget dataset -  loss: 2.176658, accuracy: 0.508919\n",
      "\n",
      "epoch:  91\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.435781, err_s_domain: 0.589625, err_t_domain: 0.590455, accuracy: 0.858781\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.529711, accuracy: 0.825763\n",
      "\t\tTarget dataset -  loss: 2.204198, accuracy: 0.498253\n",
      "\n",
      "epoch:  92\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.432793, err_s_domain: 0.591296, err_t_domain: 0.594963, accuracy: 0.861498\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.496203, accuracy: 0.838544\n",
      "\t\tTarget dataset -  loss: 1.867839, accuracy: 0.544961\n",
      "\n",
      "epoch:  93\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.421271, err_s_domain: 0.593540, err_t_domain: 0.594102, accuracy: 0.863593\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.602471, accuracy: 0.810868\n",
      "\t\tTarget dataset -  loss: 2.293700, accuracy: 0.486668\n",
      "\n",
      "epoch:  94\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.431431, err_s_domain: 0.593647, err_t_domain: 0.593092, accuracy: 0.862741\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.478599, accuracy: 0.848106\n",
      "\t\tTarget dataset -  loss: 2.057388, accuracy: 0.515999\n",
      "\n",
      "epoch:  95\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.418253, err_s_domain: 0.587731, err_t_domain: 0.591924, accuracy: 0.865850\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.586172, accuracy: 0.814822\n",
      "\t\tTarget dataset -  loss: 1.942405, accuracy: 0.533008\n",
      "\n",
      "epoch:  96\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.422649, err_s_domain: 0.595455, err_t_domain: 0.593621, accuracy: 0.865251\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.592402, accuracy: 0.811879\n",
      "\t\tTarget dataset -  loss: 1.801596, accuracy: 0.562891\n",
      "\n",
      "epoch:  97\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.409835, err_s_domain: 0.593968, err_t_domain: 0.597269, accuracy: 0.868912\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.444214, accuracy: 0.855370\n",
      "\t\tTarget dataset -  loss: 1.775670, accuracy: 0.571626\n",
      "\n",
      "epoch:  98\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.402502, err_s_domain: 0.580969, err_t_domain: 0.581294, accuracy: 0.870524\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.424783, accuracy: 0.860335\n",
      "\t\tTarget dataset -  loss: 1.906140, accuracy: 0.546892\n",
      "\n",
      "epoch:  99\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.409606, err_s_domain: 0.592626, err_t_domain: 0.591503, accuracy: 0.867047\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.823138, accuracy: 0.747609\n",
      "\t\tTarget dataset -  loss: 2.031519, accuracy: 0.531721\n",
      "\n",
      "epoch:  100\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.438695, err_s_domain: 0.604761, err_t_domain: 0.607928, accuracy: 0.859334\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.610178, accuracy: 0.806730\n",
      "\t\tTarget dataset -  loss: 1.948995, accuracy: 0.537974\n",
      "\n",
      "epoch:  101\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.433848, err_s_domain: 0.598509, err_t_domain: 0.597634, accuracy: 0.859725\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.462765, accuracy: 0.848474\n",
      "\t\tTarget dataset -  loss: 2.014627, accuracy: 0.519952\n",
      "\n",
      "epoch:  102\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.441094, err_s_domain: 0.600727, err_t_domain: 0.605276, accuracy: 0.857653\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.554198, accuracy: 0.826223\n",
      "\t\tTarget dataset -  loss: 1.988511, accuracy: 0.511217\n",
      "\n",
      "epoch:  103\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.413663, err_s_domain: 0.596541, err_t_domain: 0.595295, accuracy: 0.863616\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.443859, accuracy: 0.856473\n",
      "\t\tTarget dataset -  loss: 1.993355, accuracy: 0.527951\n",
      "\n",
      "epoch:  104\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.409311, err_s_domain: 0.596304, err_t_domain: 0.595882, accuracy: 0.867715\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.512839, accuracy: 0.834590\n",
      "\t\tTarget dataset -  loss: 1.976769, accuracy: 0.541192\n",
      "\n",
      "epoch:  105\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.411141, err_s_domain: 0.599835, err_t_domain: 0.601069, accuracy: 0.867393\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.507325, accuracy: 0.833487\n",
      "\t\tTarget dataset -  loss: 1.578241, accuracy: 0.598382\n",
      "\n",
      "epoch:  106\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.402306, err_s_domain: 0.593739, err_t_domain: 0.593992, accuracy: 0.870409\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.421879, accuracy: 0.863001\n",
      "\t\tTarget dataset -  loss: 1.790630, accuracy: 0.560868\n",
      "\n",
      "epoch:  107\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.409590, err_s_domain: 0.594754, err_t_domain: 0.595568, accuracy: 0.869534\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.506345, accuracy: 0.837072\n",
      "\t\tTarget dataset -  loss: 1.767227, accuracy: 0.570430\n",
      "\n",
      "epoch:  108\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.439524, err_s_domain: 0.599902, err_t_domain: 0.602840, accuracy: 0.859518\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.592176, accuracy: 0.811971\n",
      "\t\tTarget dataset -  loss: 1.938203, accuracy: 0.543031\n",
      "\n",
      "epoch:  109\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.438121, err_s_domain: 0.610579, err_t_domain: 0.612650, accuracy: 0.858689\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.499548, accuracy: 0.841210\n",
      "\t\tTarget dataset -  loss: 1.921209, accuracy: 0.544869\n",
      "\n",
      "epoch:  110\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.429965, err_s_domain: 0.606197, err_t_domain: 0.605070, accuracy: 0.861820\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.425334, accuracy: 0.862174\n",
      "\t\tTarget dataset -  loss: 1.838579, accuracy: 0.561971\n",
      "\n",
      "epoch:  111\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.411191, err_s_domain: 0.604237, err_t_domain: 0.607542, accuracy: 0.866909\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.571844, accuracy: 0.820338\n",
      "\t\tTarget dataset -  loss: 1.844030, accuracy: 0.549283\n",
      "\n",
      "epoch:  112\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.405327, err_s_domain: 0.600150, err_t_domain: 0.602656, accuracy: 0.871791\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.458158, accuracy: 0.858220\n",
      "\t\tTarget dataset -  loss: 1.866125, accuracy: 0.553788\n",
      "\n",
      "epoch:  113\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.395091, err_s_domain: 0.599675, err_t_domain: 0.597927, accuracy: 0.872574\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.450269, accuracy: 0.851600\n",
      "\t\tTarget dataset -  loss: 1.737370, accuracy: 0.579993\n",
      "\n",
      "epoch:  114\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.387639, err_s_domain: 0.604162, err_t_domain: 0.607739, accuracy: 0.874370\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.493660, accuracy: 0.841486\n",
      "\t\tTarget dataset -  loss: 1.923042, accuracy: 0.532825\n",
      "\n",
      "epoch:  115\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.395270, err_s_domain: 0.599101, err_t_domain: 0.598987, accuracy: 0.872412\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.567523, accuracy: 0.814362\n",
      "\t\tTarget dataset -  loss: 1.704479, accuracy: 0.583303\n",
      "\n",
      "epoch:  116\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.393998, err_s_domain: 0.602741, err_t_domain: 0.602737, accuracy: 0.872136\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.569279, accuracy: 0.823005\n",
      "\t\tTarget dataset -  loss: 1.883637, accuracy: 0.560960\n",
      "\n",
      "epoch:  117\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.406423, err_s_domain: 0.614492, err_t_domain: 0.617515, accuracy: 0.867715\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.397159, accuracy: 0.874218\n",
      "\t\tTarget dataset -  loss: 1.906557, accuracy: 0.541467\n",
      "\n",
      "epoch:  118\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.397360, err_s_domain: 0.611435, err_t_domain: 0.610251, accuracy: 0.870847\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.675725, accuracy: 0.789261\n",
      "\t\tTarget dataset -  loss: 1.634284, accuracy: 0.581924\n",
      "\n",
      "epoch:  119\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.408913, err_s_domain: 0.604906, err_t_domain: 0.605217, accuracy: 0.867508\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.392659, accuracy: 0.873667\n",
      "\t\tTarget dataset -  loss: 1.728572, accuracy: 0.592221\n",
      "\n",
      "epoch:  120\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.393131, err_s_domain: 0.600695, err_t_domain: 0.598414, accuracy: 0.873080\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.467588, accuracy: 0.850497\n",
      "\t\tTarget dataset -  loss: 1.745057, accuracy: 0.586429\n",
      "\n",
      "epoch:  121\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.392663, err_s_domain: 0.609640, err_t_domain: 0.612305, accuracy: 0.873126\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.353504, accuracy: 0.881390\n",
      "\t\tTarget dataset -  loss: 1.581192, accuracy: 0.612633\n",
      "\n",
      "epoch:  122\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.390109, err_s_domain: 0.605310, err_t_domain: 0.606525, accuracy: 0.874554\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.421322, accuracy: 0.860243\n",
      "\t\tTarget dataset -  loss: 1.664582, accuracy: 0.584682\n",
      "\n",
      "epoch:  123\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.386086, err_s_domain: 0.604176, err_t_domain: 0.607516, accuracy: 0.873909\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.468968, accuracy: 0.851324\n",
      "\t\tTarget dataset -  loss: 1.668375, accuracy: 0.585234\n",
      "\n",
      "epoch:  124\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.401728, err_s_domain: 0.607852, err_t_domain: 0.610928, accuracy: 0.869304\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.565737, accuracy: 0.821993\n",
      "\t\tTarget dataset -  loss: 1.631072, accuracy: 0.598933\n",
      "\n",
      "epoch:  125\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.385173, err_s_domain: 0.601581, err_t_domain: 0.599892, accuracy: 0.874876\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.405091, accuracy: 0.866587\n",
      "\t\tTarget dataset -  loss: 1.745441, accuracy: 0.582107\n",
      "\n",
      "epoch:  126\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.386691, err_s_domain: 0.609417, err_t_domain: 0.609988, accuracy: 0.875544\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.438589, accuracy: 0.860335\n",
      "\t\tTarget dataset -  loss: 1.643970, accuracy: 0.584866\n",
      "\n",
      "epoch:  127\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.378638, err_s_domain: 0.606959, err_t_domain: 0.607244, accuracy: 0.877778\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.480170, accuracy: 0.846175\n",
      "\t\tTarget dataset -  loss: 1.713059, accuracy: 0.573556\n",
      "\n",
      "epoch:  128\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.379321, err_s_domain: 0.603244, err_t_domain: 0.603848, accuracy: 0.877824\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.352322, accuracy: 0.885344\n",
      "\t\tTarget dataset -  loss: 1.767537, accuracy: 0.576223\n",
      "\n",
      "epoch:  129\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.386802, err_s_domain: 0.611799, err_t_domain: 0.611103, accuracy: 0.874899\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.679750, accuracy: 0.789996\n",
      "\t\tTarget dataset -  loss: 1.551740, accuracy: 0.591210\n",
      "\n",
      "epoch:  130\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.404275, err_s_domain: 0.616476, err_t_domain: 0.618067, accuracy: 0.869074\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.486635, accuracy: 0.843876\n",
      "\t\tTarget dataset -  loss: 1.542960, accuracy: 0.606013\n",
      "\n",
      "epoch:  131\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.404778, err_s_domain: 0.611877, err_t_domain: 0.610218, accuracy: 0.870985\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.459458, accuracy: 0.855094\n",
      "\t\tTarget dataset -  loss: 1.588673, accuracy: 0.600405\n",
      "\n",
      "epoch:  132\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.394140, err_s_domain: 0.612888, err_t_domain: 0.611611, accuracy: 0.871906\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.486512, accuracy: 0.841578\n",
      "\t\tTarget dataset -  loss: 1.569204, accuracy: 0.594704\n",
      "\n",
      "epoch:  133\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.392582, err_s_domain: 0.607310, err_t_domain: 0.610495, accuracy: 0.873011\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.412344, accuracy: 0.862357\n",
      "\t\tTarget dataset -  loss: 1.644064, accuracy: 0.601876\n",
      "\n",
      "epoch:  134\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.380095, err_s_domain: 0.606857, err_t_domain: 0.609911, accuracy: 0.876488\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.503425, accuracy: 0.837440\n",
      "\t\tTarget dataset -  loss: 1.535960, accuracy: 0.613737\n",
      "\n",
      "epoch:  135\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.383082, err_s_domain: 0.615379, err_t_domain: 0.617181, accuracy: 0.876603\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.460856, accuracy: 0.848474\n",
      "\t\tTarget dataset -  loss: 1.684796, accuracy: 0.576958\n",
      "\n",
      "epoch:  136\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.372482, err_s_domain: 0.614321, err_t_domain: 0.617079, accuracy: 0.879435\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.452362, accuracy: 0.854358\n",
      "\t\tTarget dataset -  loss: 1.603252, accuracy: 0.608955\n",
      "\n",
      "epoch:  137\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.373678, err_s_domain: 0.611984, err_t_domain: 0.611906, accuracy: 0.879620\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.382418, accuracy: 0.875138\n",
      "\t\tTarget dataset -  loss: 1.563284, accuracy: 0.613001\n",
      "\n",
      "epoch:  138\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.371631, err_s_domain: 0.613597, err_t_domain: 0.614213, accuracy: 0.878768\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.481556, accuracy: 0.845256\n",
      "\t\tTarget dataset -  loss: 1.700405, accuracy: 0.586153\n",
      "\n",
      "epoch:  139\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.378500, err_s_domain: 0.616549, err_t_domain: 0.616649, accuracy: 0.876534\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.510069, accuracy: 0.835693\n",
      "\t\tTarget dataset -  loss: 1.322876, accuracy: 0.639481\n",
      "\n",
      "epoch:  140\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.374161, err_s_domain: 0.617165, err_t_domain: 0.617638, accuracy: 0.878676\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.409730, accuracy: 0.866587\n",
      "\t\tTarget dataset -  loss: 1.544612, accuracy: 0.608496\n",
      "\n",
      "epoch:  141\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.402657, err_s_domain: 0.626270, err_t_domain: 0.625126, accuracy: 0.869787\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.499231, accuracy: 0.834498\n",
      "\t\tTarget dataset -  loss: 1.557990, accuracy: 0.622471\n",
      "\n",
      "epoch:  142\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.368779, err_s_domain: 0.612824, err_t_domain: 0.612941, accuracy: 0.877985\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.395987, accuracy: 0.867139\n",
      "\t\tTarget dataset -  loss: 1.630953, accuracy: 0.589923\n",
      "\n",
      "epoch:  143\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.366121, err_s_domain: 0.616478, err_t_domain: 0.619781, accuracy: 0.881139\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.568809, accuracy: 0.821442\n",
      "\t\tTarget dataset -  loss: 1.580618, accuracy: 0.602979\n",
      "\n",
      "epoch:  144\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.378715, err_s_domain: 0.617593, err_t_domain: 0.618519, accuracy: 0.876718\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.451339, accuracy: 0.851968\n",
      "\t\tTarget dataset -  loss: 1.585231, accuracy: 0.614748\n",
      "\n",
      "epoch:  145\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.358622, err_s_domain: 0.611606, err_t_domain: 0.610841, accuracy: 0.881784\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.444331, accuracy: 0.856933\n",
      "\t\tTarget dataset -  loss: 1.633359, accuracy: 0.610243\n",
      "\n",
      "epoch:  146\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.378317, err_s_domain: 0.619902, err_t_domain: 0.620682, accuracy: 0.877824\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.469448, accuracy: 0.846083\n",
      "\t\tTarget dataset -  loss: 1.429272, accuracy: 0.620908\n",
      "\n",
      "epoch:  147\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.382835, err_s_domain: 0.622871, err_t_domain: 0.625156, accuracy: 0.876189\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.532399, accuracy: 0.832475\n",
      "\t\tTarget dataset -  loss: 1.513632, accuracy: 0.622471\n",
      "\n",
      "epoch:  148\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.387064, err_s_domain: 0.621771, err_t_domain: 0.624962, accuracy: 0.875360\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.427715, accuracy: 0.863277\n",
      "\t\tTarget dataset -  loss: 1.636255, accuracy: 0.617506\n",
      "\n",
      "epoch:  149\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.362353, err_s_domain: 0.610913, err_t_domain: 0.611360, accuracy: 0.883097\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.525926, accuracy: 0.829441\n",
      "\t\tTarget dataset -  loss: 1.491693, accuracy: 0.620725\n",
      "\n",
      "epoch:  150\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.353451, err_s_domain: 0.614801, err_t_domain: 0.613522, accuracy: 0.885860\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.539720, accuracy: 0.826039\n",
      "\t\tTarget dataset -  loss: 1.529897, accuracy: 0.628080\n",
      "\n",
      "epoch:  151\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.371110, err_s_domain: 0.623788, err_t_domain: 0.624431, accuracy: 0.878883\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.440108, accuracy: 0.856473\n",
      "\t\tTarget dataset -  loss: 1.628529, accuracy: 0.593693\n",
      "\n",
      "epoch:  152\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.373880, err_s_domain: 0.620742, err_t_domain: 0.621217, accuracy: 0.879067\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.360387, accuracy: 0.883689\n",
      "\t\tTarget dataset -  loss: 1.375924, accuracy: 0.642608\n",
      "\n",
      "epoch:  153\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.364777, err_s_domain: 0.619760, err_t_domain: 0.622347, accuracy: 0.882176\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.481217, accuracy: 0.845256\n",
      "\t\tTarget dataset -  loss: 1.535298, accuracy: 0.608955\n",
      "\n",
      "epoch:  154\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.364335, err_s_domain: 0.614307, err_t_domain: 0.611693, accuracy: 0.880541\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.414160, accuracy: 0.867047\n",
      "\t\tTarget dataset -  loss: 1.405582, accuracy: 0.634241\n",
      "\n",
      "epoch:  155\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.365964, err_s_domain: 0.618044, err_t_domain: 0.622778, accuracy: 0.881853\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.386277, accuracy: 0.873023\n",
      "\t\tTarget dataset -  loss: 1.470730, accuracy: 0.618794\n",
      "\n",
      "epoch:  156\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.350374, err_s_domain: 0.620531, err_t_domain: 0.620842, accuracy: 0.886159\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.538018, accuracy: 0.828797\n",
      "\t\tTarget dataset -  loss: 1.537098, accuracy: 0.621828\n",
      "\n",
      "epoch:  157\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.362576, err_s_domain: 0.616617, err_t_domain: 0.619190, accuracy: 0.882728\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.451889, accuracy: 0.857576\n",
      "\t\tTarget dataset -  loss: 1.502167, accuracy: 0.621460\n",
      "\n",
      "epoch:  158\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.364710, err_s_domain: 0.619014, err_t_domain: 0.619107, accuracy: 0.881208\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.362987, accuracy: 0.880471\n",
      "\t\tTarget dataset -  loss: 1.536908, accuracy: 0.621644\n",
      "\n",
      "epoch:  159\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.346248, err_s_domain: 0.614937, err_t_domain: 0.612750, accuracy: 0.886481\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.462018, accuracy: 0.853347\n",
      "\t\tTarget dataset -  loss: 1.550968, accuracy: 0.616219\n",
      "\n",
      "epoch:  160\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.345058, err_s_domain: 0.616333, err_t_domain: 0.619228, accuracy: 0.887287\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.474613, accuracy: 0.846819\n",
      "\t\tTarget dataset -  loss: 1.500272, accuracy: 0.629184\n",
      "\n",
      "epoch:  161\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.355555, err_s_domain: 0.620236, err_t_domain: 0.621056, accuracy: 0.884731\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.434877, accuracy: 0.859783\n",
      "\t\tTarget dataset -  loss: 1.390895, accuracy: 0.645458\n",
      "\n",
      "epoch:  162\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.369257, err_s_domain: 0.621915, err_t_domain: 0.624693, accuracy: 0.881968\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.538134, accuracy: 0.829165\n",
      "\t\tTarget dataset -  loss: 1.564940, accuracy: 0.618886\n",
      "\n",
      "epoch:  163\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.362289, err_s_domain: 0.619765, err_t_domain: 0.621141, accuracy: 0.882958\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.461022, accuracy: 0.855554\n",
      "\t\tTarget dataset -  loss: 1.552475, accuracy: 0.615943\n",
      "\n",
      "epoch:  164\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.361617, err_s_domain: 0.623090, err_t_domain: 0.621356, accuracy: 0.884179\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.395167, accuracy: 0.873023\n",
      "\t\tTarget dataset -  loss: 1.543129, accuracy: 0.604174\n",
      "\n",
      "epoch:  165\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.353377, err_s_domain: 0.624963, err_t_domain: 0.625152, accuracy: 0.884409\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.349644, accuracy: 0.886355\n",
      "\t\tTarget dataset -  loss: 1.641143, accuracy: 0.606473\n",
      "\n",
      "epoch:  166\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.348996, err_s_domain: 0.620346, err_t_domain: 0.623940, accuracy: 0.884893\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.508869, accuracy: 0.837440\n",
      "\t\tTarget dataset -  loss: 1.527004, accuracy: 0.619713\n",
      "\n",
      "epoch:  167\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.360623, err_s_domain: 0.621582, err_t_domain: 0.625482, accuracy: 0.883856\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.521089, accuracy: 0.837624\n",
      "\t\tTarget dataset -  loss: 1.586606, accuracy: 0.612817\n",
      "\n",
      "epoch:  168\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.345759, err_s_domain: 0.615656, err_t_domain: 0.615262, accuracy: 0.887656\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.422323, accuracy: 0.865116\n",
      "\t\tTarget dataset -  loss: 1.442670, accuracy: 0.635252\n",
      "\n",
      "epoch:  169\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.347960, err_s_domain: 0.622579, err_t_domain: 0.622131, accuracy: 0.886435\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.379638, accuracy: 0.876057\n",
      "\t\tTarget dataset -  loss: 1.362208, accuracy: 0.657227\n",
      "\n",
      "epoch:  170\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.341037, err_s_domain: 0.622158, err_t_domain: 0.621541, accuracy: 0.888853\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.408198, accuracy: 0.869161\n",
      "\t\tTarget dataset -  loss: 1.410077, accuracy: 0.642148\n",
      "\n",
      "epoch:  171\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.357748, err_s_domain: 0.625602, err_t_domain: 0.625804, accuracy: 0.884570\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.396246, accuracy: 0.874402\n",
      "\t\tTarget dataset -  loss: 1.629735, accuracy: 0.601692\n",
      "\n",
      "epoch:  172\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.362868, err_s_domain: 0.626770, err_t_domain: 0.627772, accuracy: 0.880840\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.502315, accuracy: 0.834498\n",
      "\t\tTarget dataset -  loss: 1.641126, accuracy: 0.590934\n",
      "\n",
      "epoch:  173\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.368788, err_s_domain: 0.625180, err_t_domain: 0.626884, accuracy: 0.878768\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.480566, accuracy: 0.847738\n",
      "\t\tTarget dataset -  loss: 1.391138, accuracy: 0.641320\n",
      "\n",
      "epoch:  174\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.368765, err_s_domain: 0.624536, err_t_domain: 0.627468, accuracy: 0.881922\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.454650, accuracy: 0.850497\n",
      "\t\tTarget dataset -  loss: 1.604121, accuracy: 0.592957\n",
      "\n",
      "epoch:  175\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.358573, err_s_domain: 0.619430, err_t_domain: 0.621171, accuracy: 0.883534\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.365432, accuracy: 0.883413\n",
      "\t\tTarget dataset -  loss: 1.339145, accuracy: 0.643159\n",
      "\n",
      "epoch:  176\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.344866, err_s_domain: 0.620102, err_t_domain: 0.621742, accuracy: 0.889221\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.425150, accuracy: 0.861806\n",
      "\t\tTarget dataset -  loss: 1.410710, accuracy: 0.639298\n",
      "\n",
      "epoch:  177\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.335625, err_s_domain: 0.617787, err_t_domain: 0.618584, accuracy: 0.891777\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.382572, accuracy: 0.878540\n",
      "\t\tTarget dataset -  loss: 1.498227, accuracy: 0.622471\n",
      "\n",
      "epoch:  178\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.341627, err_s_domain: 0.622639, err_t_domain: 0.623983, accuracy: 0.887840\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.427996, accuracy: 0.860611\n",
      "\t\tTarget dataset -  loss: 1.364078, accuracy: 0.646102\n",
      "\n",
      "epoch:  179\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.357083, err_s_domain: 0.622813, err_t_domain: 0.624105, accuracy: 0.883166\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.547929, accuracy: 0.829901\n",
      "\t\tTarget dataset -  loss: 1.391240, accuracy: 0.648952\n",
      "\n",
      "epoch:  180\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.338993, err_s_domain: 0.621703, err_t_domain: 0.621743, accuracy: 0.889705\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.371361, accuracy: 0.880930\n",
      "\t\tTarget dataset -  loss: 1.474435, accuracy: 0.637275\n",
      "\n",
      "epoch:  181\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.332248, err_s_domain: 0.623993, err_t_domain: 0.627322, accuracy: 0.892284\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.528505, accuracy: 0.837532\n",
      "\t\tTarget dataset -  loss: 1.291930, accuracy: 0.654469\n",
      "\n",
      "epoch:  182\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.338686, err_s_domain: 0.626592, err_t_domain: 0.626097, accuracy: 0.888715\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.502932, accuracy: 0.838636\n",
      "\t\tTarget dataset -  loss: 1.472960, accuracy: 0.639665\n",
      "\n",
      "epoch:  183\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.342569, err_s_domain: 0.624595, err_t_domain: 0.624803, accuracy: 0.887771\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.357357, accuracy: 0.880839\n",
      "\t\tTarget dataset -  loss: 1.471630, accuracy: 0.641136\n",
      "\n",
      "epoch:  184\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.340582, err_s_domain: 0.623840, err_t_domain: 0.623129, accuracy: 0.889590\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.394221, accuracy: 0.873851\n",
      "\t\tTarget dataset -  loss: 1.438138, accuracy: 0.631666\n",
      "\n",
      "epoch:  185\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.350340, err_s_domain: 0.623335, err_t_domain: 0.624863, accuracy: 0.886458\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.321773, accuracy: 0.898860\n",
      "\t\tTarget dataset -  loss: 1.487309, accuracy: 0.622104\n",
      "\n",
      "epoch:  186\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.349206, err_s_domain: 0.623505, err_t_domain: 0.624576, accuracy: 0.887103\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.531411, accuracy: 0.830177\n",
      "\t\tTarget dataset -  loss: 1.620887, accuracy: 0.602703\n",
      "\n",
      "epoch:  187\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.340041, err_s_domain: 0.622020, err_t_domain: 0.621899, accuracy: 0.888323\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.439761, accuracy: 0.860059\n",
      "\t\tTarget dataset -  loss: 1.463182, accuracy: 0.641320\n",
      "\n",
      "epoch:  188\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.348361, err_s_domain: 0.625000, err_t_domain: 0.625587, accuracy: 0.887241\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.325838, accuracy: 0.895826\n",
      "\t\tTarget dataset -  loss: 1.425872, accuracy: 0.635528\n",
      "\n",
      "epoch:  189\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.344995, err_s_domain: 0.627779, err_t_domain: 0.627322, accuracy: 0.889613\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.447105, accuracy: 0.854910\n",
      "\t\tTarget dataset -  loss: 1.448011, accuracy: 0.624678\n",
      "\n",
      "epoch:  190\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.329850, err_s_domain: 0.622252, err_t_domain: 0.624055, accuracy: 0.892468\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.415483, accuracy: 0.867414\n",
      "\t\tTarget dataset -  loss: 1.395059, accuracy: 0.637275\n",
      "\n",
      "epoch:  191\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.329883, err_s_domain: 0.623058, err_t_domain: 0.623015, accuracy: 0.890373\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.481269, accuracy: 0.847462\n",
      "\t\tTarget dataset -  loss: 1.405319, accuracy: 0.631666\n",
      "\n",
      "epoch:  192\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.344135, err_s_domain: 0.623909, err_t_domain: 0.626149, accuracy: 0.888554\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.410396, accuracy: 0.869529\n",
      "\t\tTarget dataset -  loss: 1.434037, accuracy: 0.627988\n",
      "\n",
      "epoch:  193\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.334850, err_s_domain: 0.620749, err_t_domain: 0.621053, accuracy: 0.891225\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.481541, accuracy: 0.850680\n",
      "\t\tTarget dataset -  loss: 1.542623, accuracy: 0.618794\n",
      "\n",
      "epoch:  194\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.350508, err_s_domain: 0.629211, err_t_domain: 0.632901, accuracy: 0.885215\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.468905, accuracy: 0.847278\n",
      "\t\tTarget dataset -  loss: 1.542997, accuracy: 0.625690\n",
      "\n",
      "epoch:  195\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.338515, err_s_domain: 0.625668, err_t_domain: 0.626629, accuracy: 0.888531\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.476818, accuracy: 0.845623\n",
      "\t\tTarget dataset -  loss: 1.571594, accuracy: 0.617874\n",
      "\n",
      "epoch:  196\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.330908, err_s_domain: 0.631530, err_t_domain: 0.632054, accuracy: 0.892814\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.491341, accuracy: 0.844612\n",
      "\t\tTarget dataset -  loss: 1.457247, accuracy: 0.629919\n",
      "\n",
      "epoch:  197\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.330958, err_s_domain: 0.623944, err_t_domain: 0.626139, accuracy: 0.891363\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.442382, accuracy: 0.859231\n",
      "\t\tTarget dataset -  loss: 1.413682, accuracy: 0.642791\n",
      "\n",
      "epoch:  198\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.342052, err_s_domain: 0.631753, err_t_domain: 0.630731, accuracy: 0.888876\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.562540, accuracy: 0.827234\n",
      "\t\tTarget dataset -  loss: 1.386148, accuracy: 0.646561\n",
      "\n",
      "epoch:  199\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.326970, err_s_domain: 0.625445, err_t_domain: 0.628090, accuracy: 0.894172\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.458828, accuracy: 0.852795\n",
      "\t\tTarget dataset -  loss: 1.335718, accuracy: 0.655664\n",
      "\n",
      "epoch:  200\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.334801, err_s_domain: 0.626961, err_t_domain: 0.629990, accuracy: 0.892837\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.466928, accuracy: 0.851232\n",
      "\t\tTarget dataset -  loss: 1.292035, accuracy: 0.662468\n",
      "\n",
      "epoch:  201\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.331030, err_s_domain: 0.627460, err_t_domain: 0.629146, accuracy: 0.891018\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.432002, accuracy: 0.860886\n",
      "\t\tTarget dataset -  loss: 1.480924, accuracy: 0.629827\n",
      "\n",
      "epoch:  202\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.337664, err_s_domain: 0.628134, err_t_domain: 0.629757, accuracy: 0.892929\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.407893, accuracy: 0.871368\n",
      "\t\tTarget dataset -  loss: 1.605849, accuracy: 0.609599\n",
      "\n",
      "epoch:  203\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.329513, err_s_domain: 0.624750, err_t_domain: 0.625468, accuracy: 0.892284\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.413306, accuracy: 0.866955\n",
      "\t\tTarget dataset -  loss: 1.487034, accuracy: 0.633781\n",
      "\n",
      "epoch:  204\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.327098, err_s_domain: 0.629022, err_t_domain: 0.631909, accuracy: 0.893619\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.474405, accuracy: 0.852611\n",
      "\t\tTarget dataset -  loss: 1.412112, accuracy: 0.639665\n",
      "\n",
      "epoch:  205\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.318797, err_s_domain: 0.626391, err_t_domain: 0.627856, accuracy: 0.895807\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.368466, accuracy: 0.881482\n",
      "\t\tTarget dataset -  loss: 1.386296, accuracy: 0.643619\n",
      "\n",
      "epoch:  206\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.321552, err_s_domain: 0.625227, err_t_domain: 0.626821, accuracy: 0.893758\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.418094, accuracy: 0.862082\n",
      "\t\tTarget dataset -  loss: 1.464348, accuracy: 0.629092\n",
      "\n",
      "epoch:  207\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.315645, err_s_domain: 0.624433, err_t_domain: 0.625524, accuracy: 0.897235\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.467128, accuracy: 0.848474\n",
      "\t\tTarget dataset -  loss: 1.375149, accuracy: 0.654561\n",
      "\n",
      "epoch:  208\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.331110, err_s_domain: 0.623370, err_t_domain: 0.625506, accuracy: 0.892698\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.480614, accuracy: 0.847370\n",
      "\t\tTarget dataset -  loss: 1.510036, accuracy: 0.621828\n",
      "\n",
      "epoch:  209\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.329523, err_s_domain: 0.630031, err_t_domain: 0.629639, accuracy: 0.893735\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.459185, accuracy: 0.853990\n",
      "\t\tTarget dataset -  loss: 1.475144, accuracy: 0.632494\n",
      "\n",
      "epoch:  210\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.346604, err_s_domain: 0.637577, err_t_domain: 0.641863, accuracy: 0.889314\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.501262, accuracy: 0.840291\n",
      "\t\tTarget dataset -  loss: 1.498341, accuracy: 0.613369\n",
      "\n",
      "epoch:  211\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.324252, err_s_domain: 0.627876, err_t_domain: 0.628627, accuracy: 0.894218\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.453490, accuracy: 0.854082\n",
      "\t\tTarget dataset -  loss: 1.471288, accuracy: 0.636631\n",
      "\n",
      "epoch:  212\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.328366, err_s_domain: 0.631669, err_t_domain: 0.634277, accuracy: 0.893735\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.640746, accuracy: 0.800202\n",
      "\t\tTarget dataset -  loss: 1.374579, accuracy: 0.643987\n",
      "\n",
      "epoch:  213\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.320281, err_s_domain: 0.629825, err_t_domain: 0.631601, accuracy: 0.894448\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.386426, accuracy: 0.874218\n",
      "\t\tTarget dataset -  loss: 1.596285, accuracy: 0.614840\n",
      "\n",
      "epoch:  214\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.329568, err_s_domain: 0.628824, err_t_domain: 0.630509, accuracy: 0.892008\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.389693, accuracy: 0.876609\n",
      "\t\tTarget dataset -  loss: 1.566225, accuracy: 0.624586\n",
      "\n",
      "epoch:  215\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.333046, err_s_domain: 0.632820, err_t_domain: 0.633709, accuracy: 0.892537\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.419796, accuracy: 0.862633\n",
      "\t\tTarget dataset -  loss: 1.595102, accuracy: 0.616955\n",
      "\n",
      "epoch:  216\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.316691, err_s_domain: 0.629316, err_t_domain: 0.632912, accuracy: 0.895945\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.451310, accuracy: 0.855094\n",
      "\t\tTarget dataset -  loss: 1.442364, accuracy: 0.636171\n",
      "\n",
      "epoch:  217\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.309020, err_s_domain: 0.628351, err_t_domain: 0.629745, accuracy: 0.898846\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.414437, accuracy: 0.870449\n",
      "\t\tTarget dataset -  loss: 1.377513, accuracy: 0.650791\n",
      "\n",
      "epoch:  218\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.312695, err_s_domain: 0.627701, err_t_domain: 0.628403, accuracy: 0.898017\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.455574, accuracy: 0.857392\n",
      "\t\tTarget dataset -  loss: 1.411112, accuracy: 0.634241\n",
      "\n",
      "epoch:  219\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.319849, err_s_domain: 0.629457, err_t_domain: 0.629725, accuracy: 0.895669\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.427599, accuracy: 0.866587\n",
      "\t\tTarget dataset -  loss: 1.491187, accuracy: 0.634516\n",
      "\n",
      "epoch:  220\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.330059, err_s_domain: 0.632455, err_t_domain: 0.636028, accuracy: 0.893481\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.462467, accuracy: 0.854450\n",
      "\t\tTarget dataset -  loss: 1.558398, accuracy: 0.621552\n",
      "\n",
      "epoch:  221\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.312539, err_s_domain: 0.626790, err_t_domain: 0.625717, accuracy: 0.897465\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.454129, accuracy: 0.857944\n",
      "\t\tTarget dataset -  loss: 1.501128, accuracy: 0.625046\n",
      "\n",
      "epoch:  222\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.314802, err_s_domain: 0.632174, err_t_domain: 0.632063, accuracy: 0.896314\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.407042, accuracy: 0.874035\n",
      "\t\tTarget dataset -  loss: 1.504757, accuracy: 0.627253\n",
      "\n",
      "epoch:  223\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.319336, err_s_domain: 0.624085, err_t_domain: 0.626371, accuracy: 0.896843\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.493196, accuracy: 0.843509\n",
      "\t\tTarget dataset -  loss: 1.374954, accuracy: 0.649871\n",
      "\n",
      "epoch:  224\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.318090, err_s_domain: 0.628202, err_t_domain: 0.630126, accuracy: 0.896797\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.499747, accuracy: 0.847278\n",
      "\t\tTarget dataset -  loss: 1.532436, accuracy: 0.614196\n",
      "\n",
      "epoch:  225\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.324937, err_s_domain: 0.633449, err_t_domain: 0.636602, accuracy: 0.894656\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.424552, accuracy: 0.863277\n",
      "\t\tTarget dataset -  loss: 1.354810, accuracy: 0.658146\n",
      "\n",
      "epoch:  226\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.312207, err_s_domain: 0.628000, err_t_domain: 0.627799, accuracy: 0.899261\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.383572, accuracy: 0.876517\n",
      "\t\tTarget dataset -  loss: 1.443002, accuracy: 0.643895\n",
      "\n",
      "epoch:  227\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.317505, err_s_domain: 0.633570, err_t_domain: 0.633616, accuracy: 0.895001\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.476988, accuracy: 0.850313\n",
      "\t\tTarget dataset -  loss: 1.395330, accuracy: 0.644446\n",
      "\n",
      "epoch:  228\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.309682, err_s_domain: 0.629450, err_t_domain: 0.629879, accuracy: 0.898846\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.397910, accuracy: 0.873023\n",
      "\t\tTarget dataset -  loss: 1.449325, accuracy: 0.634976\n",
      "\n",
      "epoch:  229\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.317267, err_s_domain: 0.629374, err_t_domain: 0.630288, accuracy: 0.895346\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.396861, accuracy: 0.874494\n",
      "\t\tTarget dataset -  loss: 1.436036, accuracy: 0.636171\n",
      "\n",
      "epoch:  230\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.308000, err_s_domain: 0.627756, err_t_domain: 0.627939, accuracy: 0.899629\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.363595, accuracy: 0.882861\n",
      "\t\tTarget dataset -  loss: 1.455056, accuracy: 0.636079\n",
      "\n",
      "epoch:  231\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.309517, err_s_domain: 0.627302, err_t_domain: 0.629948, accuracy: 0.898064\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.360293, accuracy: 0.883873\n",
      "\t\tTarget dataset -  loss: 1.487293, accuracy: 0.630011\n",
      "\n",
      "epoch:  232\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.316653, err_s_domain: 0.634501, err_t_domain: 0.633114, accuracy: 0.896475\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.431611, accuracy: 0.860702\n",
      "\t\tTarget dataset -  loss: 1.534805, accuracy: 0.628632\n",
      "\n",
      "epoch:  233\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.311359, err_s_domain: 0.633313, err_t_domain: 0.633091, accuracy: 0.898294\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.410795, accuracy: 0.868978\n",
      "\t\tTarget dataset -  loss: 1.455163, accuracy: 0.640953\n",
      "\n",
      "epoch:  234\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.309797, err_s_domain: 0.626452, err_t_domain: 0.627796, accuracy: 0.898823\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.371495, accuracy: 0.879092\n",
      "\t\tTarget dataset -  loss: 1.406828, accuracy: 0.647940\n",
      "\n",
      "epoch:  235\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.306851, err_s_domain: 0.631542, err_t_domain: 0.632074, accuracy: 0.899883\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.449736, accuracy: 0.860702\n",
      "\t\tTarget dataset -  loss: 1.391068, accuracy: 0.664491\n",
      "\n",
      "epoch:  236\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.310322, err_s_domain: 0.629076, err_t_domain: 0.630332, accuracy: 0.899422\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.497310, accuracy: 0.848014\n",
      "\t\tTarget dataset -  loss: 1.367104, accuracy: 0.650147\n",
      "\n",
      "epoch:  237\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.322312, err_s_domain: 0.639874, err_t_domain: 0.639377, accuracy: 0.894310\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.370137, accuracy: 0.880195\n",
      "\t\tTarget dataset -  loss: 1.429352, accuracy: 0.649595\n",
      "\n",
      "epoch:  238\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.319722, err_s_domain: 0.630279, err_t_domain: 0.632664, accuracy: 0.895669\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.388469, accuracy: 0.879000\n",
      "\t\tTarget dataset -  loss: 1.499421, accuracy: 0.644263\n",
      "\n",
      "epoch:  239\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.320491, err_s_domain: 0.633203, err_t_domain: 0.634937, accuracy: 0.894840\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.416175, accuracy: 0.866127\n",
      "\t\tTarget dataset -  loss: 1.343738, accuracy: 0.649136\n",
      "\n",
      "epoch:  240\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.310614, err_s_domain: 0.632806, err_t_domain: 0.631748, accuracy: 0.897534\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.480783, accuracy: 0.847646\n",
      "\t\tTarget dataset -  loss: 1.571367, accuracy: 0.623023\n",
      "\n",
      "epoch:  241\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.302607, err_s_domain: 0.628260, err_t_domain: 0.629742, accuracy: 0.901909\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.400976, accuracy: 0.870633\n",
      "\t\tTarget dataset -  loss: 1.339178, accuracy: 0.663295\n",
      "\n",
      "epoch:  242\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.312672, err_s_domain: 0.627408, err_t_domain: 0.628324, accuracy: 0.899537\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.415712, accuracy: 0.866771\n",
      "\t\tTarget dataset -  loss: 1.480271, accuracy: 0.643343\n",
      "\n",
      "epoch:  243\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.305599, err_s_domain: 0.629898, err_t_domain: 0.631163, accuracy: 0.900251\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.404637, accuracy: 0.871368\n",
      "\t\tTarget dataset -  loss: 1.391881, accuracy: 0.647481\n",
      "\n",
      "epoch:  244\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.309609, err_s_domain: 0.632779, err_t_domain: 0.632703, accuracy: 0.898271\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.339714, accuracy: 0.889298\n",
      "\t\tTarget dataset -  loss: 1.282962, accuracy: 0.669272\n",
      "\n",
      "epoch:  245\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.299464, err_s_domain: 0.630229, err_t_domain: 0.633005, accuracy: 0.902392\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.378262, accuracy: 0.878448\n",
      "\t\tTarget dataset -  loss: 1.583937, accuracy: 0.622563\n",
      "\n",
      "epoch:  246\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.299655, err_s_domain: 0.632979, err_t_domain: 0.632517, accuracy: 0.901333\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.355866, accuracy: 0.886539\n",
      "\t\tTarget dataset -  loss: 1.452456, accuracy: 0.636079\n",
      "\n",
      "epoch:  247\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.309199, err_s_domain: 0.632340, err_t_domain: 0.633351, accuracy: 0.898455\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.379522, accuracy: 0.878448\n",
      "\t\tTarget dataset -  loss: 1.397586, accuracy: 0.650883\n",
      "\n",
      "epoch:  248\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.315949, err_s_domain: 0.636129, err_t_domain: 0.639053, accuracy: 0.896751\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.385059, accuracy: 0.874678\n",
      "\t\tTarget dataset -  loss: 1.520008, accuracy: 0.633873\n",
      "\n",
      "epoch:  249\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.313485, err_s_domain: 0.634305, err_t_domain: 0.634203, accuracy: 0.897810\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.358759, accuracy: 0.886539\n",
      "\t\tTarget dataset -  loss: 1.378650, accuracy: 0.657687\n",
      "\n",
      "epoch:  250\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.297001, err_s_domain: 0.630566, err_t_domain: 0.631082, accuracy: 0.902646\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.384480, accuracy: 0.873759\n",
      "\t\tTarget dataset -  loss: 1.370967, accuracy: 0.654377\n",
      "\n",
      "epoch:  251\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.298216, err_s_domain: 0.630922, err_t_domain: 0.632538, accuracy: 0.900021\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.378118, accuracy: 0.879827\n",
      "\t\tTarget dataset -  loss: 1.341343, accuracy: 0.661548\n",
      "\n",
      "epoch:  252\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.296038, err_s_domain: 0.630937, err_t_domain: 0.633965, accuracy: 0.903152\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.471432, accuracy: 0.851508\n",
      "\t\tTarget dataset -  loss: 1.251982, accuracy: 0.680949\n",
      "\n",
      "epoch:  253\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.301800, err_s_domain: 0.631738, err_t_domain: 0.633622, accuracy: 0.900665\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.344522, accuracy: 0.890677\n",
      "\t\tTarget dataset -  loss: 1.336167, accuracy: 0.661456\n",
      "\n",
      "epoch:  254\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.295546, err_s_domain: 0.628984, err_t_domain: 0.631256, accuracy: 0.901356\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.389545, accuracy: 0.874035\n",
      "\t\tTarget dataset -  loss: 1.480002, accuracy: 0.635620\n",
      "\n",
      "epoch:  255\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.297974, err_s_domain: 0.629468, err_t_domain: 0.629448, accuracy: 0.903383\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.365439, accuracy: 0.882586\n",
      "\t\tTarget dataset -  loss: 1.478858, accuracy: 0.631482\n",
      "\n",
      "epoch:  256\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.298853, err_s_domain: 0.631165, err_t_domain: 0.631683, accuracy: 0.901840\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.406506, accuracy: 0.872655\n",
      "\t\tTarget dataset -  loss: 1.344072, accuracy: 0.664307\n",
      "\n",
      "epoch:  257\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.299185, err_s_domain: 0.632638, err_t_domain: 0.633689, accuracy: 0.902162\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.403879, accuracy: 0.869713\n",
      "\t\tTarget dataset -  loss: 1.304983, accuracy: 0.664215\n",
      "\n",
      "epoch:  258\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.317042, err_s_domain: 0.632704, err_t_domain: 0.634348, accuracy: 0.896452\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.417529, accuracy: 0.869621\n",
      "\t\tTarget dataset -  loss: 1.500538, accuracy: 0.642424\n",
      "\n",
      "epoch:  259\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.302103, err_s_domain: 0.634935, err_t_domain: 0.633985, accuracy: 0.900481\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.393840, accuracy: 0.873667\n",
      "\t\tTarget dataset -  loss: 1.331349, accuracy: 0.661181\n",
      "\n",
      "epoch:  260\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.305738, err_s_domain: 0.636095, err_t_domain: 0.634570, accuracy: 0.899698\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.387094, accuracy: 0.877437\n",
      "\t\tTarget dataset -  loss: 1.403253, accuracy: 0.651067\n",
      "\n",
      "epoch:  261\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.300973, err_s_domain: 0.629806, err_t_domain: 0.631158, accuracy: 0.901080\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.343988, accuracy: 0.890217\n",
      "\t\tTarget dataset -  loss: 1.514059, accuracy: 0.640401\n",
      "\n",
      "epoch:  262\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.298690, err_s_domain: 0.632148, err_t_domain: 0.631207, accuracy: 0.902991\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.378326, accuracy: 0.877529\n",
      "\t\tTarget dataset -  loss: 1.478131, accuracy: 0.635896\n",
      "\n",
      "epoch:  263\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.300082, err_s_domain: 0.633949, err_t_domain: 0.636479, accuracy: 0.902991\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.409103, accuracy: 0.866311\n",
      "\t\tTarget dataset -  loss: 1.480481, accuracy: 0.630655\n",
      "\n",
      "epoch:  264\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.297286, err_s_domain: 0.632323, err_t_domain: 0.634341, accuracy: 0.902738\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.351739, accuracy: 0.884149\n",
      "\t\tTarget dataset -  loss: 1.468188, accuracy: 0.642791\n",
      "\n",
      "epoch:  265\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.305731, err_s_domain: 0.635451, err_t_domain: 0.637436, accuracy: 0.900090\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.393595, accuracy: 0.870725\n",
      "\t\tTarget dataset -  loss: 1.276131, accuracy: 0.667433\n",
      "\n",
      "epoch:  266\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.293605, err_s_domain: 0.632585, err_t_domain: 0.632566, accuracy: 0.902461\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.366961, accuracy: 0.883597\n",
      "\t\tTarget dataset -  loss: 1.407368, accuracy: 0.645274\n",
      "\n",
      "epoch:  267\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.296250, err_s_domain: 0.632206, err_t_domain: 0.633704, accuracy: 0.903613\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.419272, accuracy: 0.866035\n",
      "\t\tTarget dataset -  loss: 1.351971, accuracy: 0.657043\n",
      "\n",
      "epoch:  268\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.298025, err_s_domain: 0.633682, err_t_domain: 0.633898, accuracy: 0.904165\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.449842, accuracy: 0.859691\n",
      "\t\tTarget dataset -  loss: 1.413954, accuracy: 0.652446\n",
      "\n",
      "epoch:  269\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.300858, err_s_domain: 0.633344, err_t_domain: 0.633560, accuracy: 0.902116\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.427243, accuracy: 0.863645\n",
      "\t\tTarget dataset -  loss: 1.255728, accuracy: 0.675156\n",
      "\n",
      "epoch:  270\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.292512, err_s_domain: 0.631259, err_t_domain: 0.633536, accuracy: 0.904004\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.427084, accuracy: 0.865300\n",
      "\t\tTarget dataset -  loss: 1.509276, accuracy: 0.643251\n",
      "\n",
      "epoch:  271\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.293975, err_s_domain: 0.633034, err_t_domain: 0.633378, accuracy: 0.902807\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.381593, accuracy: 0.878172\n",
      "\t\tTarget dataset -  loss: 1.276465, accuracy: 0.673501\n",
      "\n",
      "epoch:  272\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.293500, err_s_domain: 0.632673, err_t_domain: 0.635050, accuracy: 0.903774\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.340730, accuracy: 0.890217\n",
      "\t\tTarget dataset -  loss: 1.406737, accuracy: 0.657687\n",
      "\n",
      "epoch:  273\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.296602, err_s_domain: 0.633118, err_t_domain: 0.632350, accuracy: 0.902323\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.449036, accuracy: 0.855186\n",
      "\t\tTarget dataset -  loss: 1.392159, accuracy: 0.653181\n",
      "\n",
      "epoch:  274\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.304639, err_s_domain: 0.636932, err_t_domain: 0.637053, accuracy: 0.899491\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.455298, accuracy: 0.855094\n",
      "\t\tTarget dataset -  loss: 1.510827, accuracy: 0.628356\n",
      "\n",
      "epoch:  275\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.294054, err_s_domain: 0.633417, err_t_domain: 0.633535, accuracy: 0.905639\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.380188, accuracy: 0.878080\n",
      "\t\tTarget dataset -  loss: 1.407808, accuracy: 0.653549\n",
      "\n",
      "epoch:  276\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.288596, err_s_domain: 0.635929, err_t_domain: 0.636617, accuracy: 0.905017\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.412015, accuracy: 0.868242\n",
      "\t\tTarget dataset -  loss: 1.467001, accuracy: 0.636723\n",
      "\n",
      "epoch:  277\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.294052, err_s_domain: 0.637001, err_t_domain: 0.636978, accuracy: 0.902531\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.480375, accuracy: 0.845348\n",
      "\t\tTarget dataset -  loss: 1.324569, accuracy: 0.654836\n",
      "\n",
      "epoch:  278\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.290424, err_s_domain: 0.635021, err_t_domain: 0.635957, accuracy: 0.904695\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.347573, accuracy: 0.886171\n",
      "\t\tTarget dataset -  loss: 1.400397, accuracy: 0.655296\n",
      "\n",
      "epoch:  279\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.291524, err_s_domain: 0.632677, err_t_domain: 0.634733, accuracy: 0.904626\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.377432, accuracy: 0.882126\n",
      "\t\tTarget dataset -  loss: 1.292343, accuracy: 0.659618\n",
      "\n",
      "epoch:  280\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.280244, err_s_domain: 0.633215, err_t_domain: 0.633021, accuracy: 0.908011\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.364486, accuracy: 0.883873\n",
      "\t\tTarget dataset -  loss: 1.437084, accuracy: 0.643619\n",
      "\n",
      "epoch:  281\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.288812, err_s_domain: 0.632850, err_t_domain: 0.632223, accuracy: 0.906261\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.325742, accuracy: 0.897021\n",
      "\t\tTarget dataset -  loss: 1.334636, accuracy: 0.663387\n",
      "\n",
      "epoch:  282\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.296474, err_s_domain: 0.632645, err_t_domain: 0.635102, accuracy: 0.902830\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.329057, accuracy: 0.893435\n",
      "\t\tTarget dataset -  loss: 1.374099, accuracy: 0.659985\n",
      "\n",
      "epoch:  283\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.290987, err_s_domain: 0.634146, err_t_domain: 0.632562, accuracy: 0.905156\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.392803, accuracy: 0.873851\n",
      "\t\tTarget dataset -  loss: 1.479314, accuracy: 0.635252\n",
      "\n",
      "epoch:  284\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.298708, err_s_domain: 0.633730, err_t_domain: 0.635123, accuracy: 0.902830\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.384283, accuracy: 0.878448\n",
      "\t\tTarget dataset -  loss: 1.457621, accuracy: 0.647940\n",
      "\n",
      "epoch:  285\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.296963, err_s_domain: 0.634515, err_t_domain: 0.635235, accuracy: 0.903152\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.367344, accuracy: 0.879275\n",
      "\t\tTarget dataset -  loss: 1.495228, accuracy: 0.625414\n",
      "\n",
      "epoch:  286\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.293382, err_s_domain: 0.631103, err_t_domain: 0.632544, accuracy: 0.905109\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.402411, accuracy: 0.869897\n",
      "\t\tTarget dataset -  loss: 1.306644, accuracy: 0.661824\n",
      "\n",
      "epoch:  287\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.286934, err_s_domain: 0.631806, err_t_domain: 0.632959, accuracy: 0.904741\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.396368, accuracy: 0.874218\n",
      "\t\tTarget dataset -  loss: 1.457670, accuracy: 0.641504\n",
      "\n",
      "epoch:  288\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.294430, err_s_domain: 0.632811, err_t_domain: 0.634118, accuracy: 0.903152\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.410549, accuracy: 0.871276\n",
      "\t\tTarget dataset -  loss: 1.324584, accuracy: 0.656399\n",
      "\n",
      "epoch:  289\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.298342, err_s_domain: 0.636952, err_t_domain: 0.636245, accuracy: 0.904948\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.369465, accuracy: 0.881666\n",
      "\t\tTarget dataset -  loss: 1.298578, accuracy: 0.671111\n",
      "\n",
      "epoch:  290\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.284302, err_s_domain: 0.631741, err_t_domain: 0.632526, accuracy: 0.906077\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.414626, accuracy: 0.870173\n",
      "\t\tTarget dataset -  loss: 1.524210, accuracy: 0.641688\n",
      "\n",
      "epoch:  291\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.283508, err_s_domain: 0.632172, err_t_domain: 0.632002, accuracy: 0.907274\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.360325, accuracy: 0.888194\n",
      "\t\tTarget dataset -  loss: 1.424483, accuracy: 0.662744\n",
      "\n",
      "epoch:  292\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.291236, err_s_domain: 0.632583, err_t_domain: 0.634830, accuracy: 0.904741\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.415562, accuracy: 0.868334\n",
      "\t\tTarget dataset -  loss: 1.383858, accuracy: 0.657871\n",
      "\n",
      "epoch:  293\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.282419, err_s_domain: 0.634209, err_t_domain: 0.634492, accuracy: 0.906698\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.468216, accuracy: 0.854910\n",
      "\t\tTarget dataset -  loss: 1.226600, accuracy: 0.684719\n",
      "\n",
      "epoch:  294\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.286207, err_s_domain: 0.633330, err_t_domain: 0.633092, accuracy: 0.904925\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.400688, accuracy: 0.871552\n",
      "\t\tTarget dataset -  loss: 1.269715, accuracy: 0.677087\n",
      "\n",
      "epoch:  295\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.292146, err_s_domain: 0.634966, err_t_domain: 0.637027, accuracy: 0.905363\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.399192, accuracy: 0.872196\n",
      "\t\tTarget dataset -  loss: 1.247646, accuracy: 0.671846\n",
      "\n",
      "epoch:  296\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.288483, err_s_domain: 0.632539, err_t_domain: 0.634115, accuracy: 0.905731\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.379509, accuracy: 0.880011\n",
      "\t\tTarget dataset -  loss: 1.409287, accuracy: 0.643619\n",
      "\n",
      "epoch:  297\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.283917, err_s_domain: 0.633350, err_t_domain: 0.633133, accuracy: 0.905754\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.362853, accuracy: 0.885528\n",
      "\t\tTarget dataset -  loss: 1.413989, accuracy: 0.640585\n",
      "\n",
      "epoch:  298\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.291616, err_s_domain: 0.636214, err_t_domain: 0.636238, accuracy: 0.905063\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.381453, accuracy: 0.876609\n",
      "\t\tTarget dataset -  loss: 1.359523, accuracy: 0.652354\n",
      "\n",
      "epoch:  299\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.288925, err_s_domain: 0.634936, err_t_domain: 0.638368, accuracy: 0.904188\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.417963, accuracy: 0.869989\n",
      "\t\tTarget dataset -  loss: 1.398095, accuracy: 0.650791\n",
      "\n",
      "epoch:  300\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.283457, err_s_domain: 0.635951, err_t_domain: 0.639079, accuracy: 0.906215\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.379497, accuracy: 0.880655\n",
      "\t\tTarget dataset -  loss: 1.335720, accuracy: 0.665962\n",
      "\n",
      "epoch:  301\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.285304, err_s_domain: 0.638861, err_t_domain: 0.639140, accuracy: 0.907619\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.381090, accuracy: 0.875046\n",
      "\t\tTarget dataset -  loss: 1.285401, accuracy: 0.671754\n",
      "\n",
      "epoch:  302\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.282722, err_s_domain: 0.637122, err_t_domain: 0.637914, accuracy: 0.906929\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.399933, accuracy: 0.874310\n",
      "\t\tTarget dataset -  loss: 1.385884, accuracy: 0.653549\n",
      "\n",
      "epoch:  303\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.283945, err_s_domain: 0.633917, err_t_domain: 0.636055, accuracy: 0.906906\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.410757, accuracy: 0.869621\n",
      "\t\tTarget dataset -  loss: 1.340858, accuracy: 0.661824\n",
      "\n",
      "epoch:  304\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.287098, err_s_domain: 0.639365, err_t_domain: 0.639902, accuracy: 0.905340\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.411157, accuracy: 0.868426\n",
      "\t\tTarget dataset -  loss: 1.309054, accuracy: 0.680581\n",
      "\n",
      "epoch:  305\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.282964, err_s_domain: 0.634883, err_t_domain: 0.637012, accuracy: 0.907182\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.374289, accuracy: 0.878080\n",
      "\t\tTarget dataset -  loss: 1.432993, accuracy: 0.650607\n",
      "\n",
      "epoch:  306\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.281946, err_s_domain: 0.630647, err_t_domain: 0.633470, accuracy: 0.905501\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.387873, accuracy: 0.876977\n",
      "\t\tTarget dataset -  loss: 1.414882, accuracy: 0.640861\n",
      "\n",
      "epoch:  307\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.277067, err_s_domain: 0.633858, err_t_domain: 0.634816, accuracy: 0.907873\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.347868, accuracy: 0.890493\n",
      "\t\tTarget dataset -  loss: 1.395734, accuracy: 0.662744\n",
      "\n",
      "epoch:  308\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.283276, err_s_domain: 0.631630, err_t_domain: 0.634706, accuracy: 0.907182\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.387207, accuracy: 0.877988\n",
      "\t\tTarget dataset -  loss: 1.400020, accuracy: 0.646561\n",
      "\n",
      "epoch:  309\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.281359, err_s_domain: 0.635256, err_t_domain: 0.637174, accuracy: 0.907527\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.429571, accuracy: 0.870357\n",
      "\t\tTarget dataset -  loss: 1.464791, accuracy: 0.647113\n",
      "\n",
      "epoch:  310\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.294763, err_s_domain: 0.636814, err_t_domain: 0.637285, accuracy: 0.904856\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.351777, accuracy: 0.892148\n",
      "\t\tTarget dataset -  loss: 1.447521, accuracy: 0.638838\n",
      "\n",
      "epoch:  311\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.283549, err_s_domain: 0.635778, err_t_domain: 0.635782, accuracy: 0.906952\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.386482, accuracy: 0.882494\n",
      "\t\tTarget dataset -  loss: 1.360839, accuracy: 0.657687\n",
      "\n",
      "epoch:  312\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.283308, err_s_domain: 0.634422, err_t_domain: 0.637057, accuracy: 0.906514\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.395455, accuracy: 0.875965\n",
      "\t\tTarget dataset -  loss: 1.457099, accuracy: 0.642883\n",
      "\n",
      "epoch:  313\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.283353, err_s_domain: 0.630322, err_t_domain: 0.631790, accuracy: 0.907113\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.380815, accuracy: 0.874402\n",
      "\t\tTarget dataset -  loss: 1.445746, accuracy: 0.645366\n",
      "\n",
      "epoch:  314\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.274785, err_s_domain: 0.634988, err_t_domain: 0.635058, accuracy: 0.908840\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.380990, accuracy: 0.880195\n",
      "\t\tTarget dataset -  loss: 1.456337, accuracy: 0.649963\n",
      "\n",
      "epoch:  315\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.283108, err_s_domain: 0.636262, err_t_domain: 0.636944, accuracy: 0.905340\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.382216, accuracy: 0.877712\n",
      "\t\tTarget dataset -  loss: 1.345463, accuracy: 0.665870\n",
      "\n",
      "epoch:  316\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.270368, err_s_domain: 0.635657, err_t_domain: 0.634705, accuracy: 0.911672\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.355514, accuracy: 0.882310\n",
      "\t\tTarget dataset -  loss: 1.443957, accuracy: 0.655020\n",
      "\n",
      "epoch:  317\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.275671, err_s_domain: 0.633045, err_t_domain: 0.634065, accuracy: 0.910682\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.404830, accuracy: 0.871276\n",
      "\t\tTarget dataset -  loss: 1.310611, accuracy: 0.673961\n",
      "\n",
      "epoch:  318\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.281077, err_s_domain: 0.635110, err_t_domain: 0.635731, accuracy: 0.907159\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.413070, accuracy: 0.870081\n",
      "\t\tTarget dataset -  loss: 1.597581, accuracy: 0.630195\n",
      "\n",
      "epoch:  319\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.279375, err_s_domain: 0.635505, err_t_domain: 0.638494, accuracy: 0.908333\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.463759, accuracy: 0.861714\n",
      "\t\tTarget dataset -  loss: 1.496059, accuracy: 0.648860\n",
      "\n",
      "epoch:  320\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.283387, err_s_domain: 0.637312, err_t_domain: 0.638862, accuracy: 0.906514\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.379862, accuracy: 0.879000\n",
      "\t\tTarget dataset -  loss: 1.600953, accuracy: 0.630379\n",
      "\n",
      "epoch:  321\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.279805, err_s_domain: 0.633946, err_t_domain: 0.637462, accuracy: 0.908103\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.463845, accuracy: 0.853990\n",
      "\t\tTarget dataset -  loss: 1.303952, accuracy: 0.663847\n",
      "\n",
      "epoch:  322\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.270930, err_s_domain: 0.632196, err_t_domain: 0.632776, accuracy: 0.910843\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.367481, accuracy: 0.883873\n",
      "\t\tTarget dataset -  loss: 1.413511, accuracy: 0.656032\n",
      "\n",
      "epoch:  323\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.271825, err_s_domain: 0.635390, err_t_domain: 0.635693, accuracy: 0.910129\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.354767, accuracy: 0.888102\n",
      "\t\tTarget dataset -  loss: 1.337740, accuracy: 0.669180\n",
      "\n",
      "epoch:  324\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.271160, err_s_domain: 0.634422, err_t_domain: 0.634589, accuracy: 0.910912\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.407566, accuracy: 0.872747\n",
      "\t\tTarget dataset -  loss: 1.396091, accuracy: 0.653641\n",
      "\n",
      "epoch:  325\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.276203, err_s_domain: 0.636350, err_t_domain: 0.637191, accuracy: 0.908840\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.333172, accuracy: 0.894538\n",
      "\t\tTarget dataset -  loss: 1.515333, accuracy: 0.641412\n",
      "\n",
      "epoch:  326\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.268323, err_s_domain: 0.634771, err_t_domain: 0.635433, accuracy: 0.911142\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.443577, accuracy: 0.859875\n",
      "\t\tTarget dataset -  loss: 1.518008, accuracy: 0.638562\n",
      "\n",
      "epoch:  327\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.269689, err_s_domain: 0.632235, err_t_domain: 0.634488, accuracy: 0.911165\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.354744, accuracy: 0.889665\n",
      "\t\tTarget dataset -  loss: 1.415011, accuracy: 0.661916\n",
      "\n",
      "epoch:  328\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.273705, err_s_domain: 0.635397, err_t_domain: 0.638327, accuracy: 0.909623\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.412287, accuracy: 0.871644\n",
      "\t\tTarget dataset -  loss: 1.443570, accuracy: 0.645090\n",
      "\n",
      "epoch:  329\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.281904, err_s_domain: 0.635313, err_t_domain: 0.637685, accuracy: 0.908379\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.445165, accuracy: 0.864564\n",
      "\t\tTarget dataset -  loss: 1.450251, accuracy: 0.652630\n",
      "\n",
      "epoch:  330\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.274015, err_s_domain: 0.636451, err_t_domain: 0.636843, accuracy: 0.909784\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.397722, accuracy: 0.873299\n",
      "\t\tTarget dataset -  loss: 1.328338, accuracy: 0.661732\n",
      "\n",
      "epoch:  331\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.274189, err_s_domain: 0.633384, err_t_domain: 0.634605, accuracy: 0.909830\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.354260, accuracy: 0.886355\n",
      "\t\tTarget dataset -  loss: 1.425216, accuracy: 0.648860\n",
      "\n",
      "epoch:  332\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.267932, err_s_domain: 0.634340, err_t_domain: 0.635312, accuracy: 0.912800\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.401130, accuracy: 0.872655\n",
      "\t\tTarget dataset -  loss: 1.448244, accuracy: 0.643251\n",
      "\n",
      "epoch:  333\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.277220, err_s_domain: 0.636811, err_t_domain: 0.638787, accuracy: 0.909116\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.377265, accuracy: 0.882861\n",
      "\t\tTarget dataset -  loss: 1.380180, accuracy: 0.659342\n",
      "\n",
      "epoch:  334\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.269798, err_s_domain: 0.634083, err_t_domain: 0.635037, accuracy: 0.909738\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.392537, accuracy: 0.877529\n",
      "\t\tTarget dataset -  loss: 1.514319, accuracy: 0.632218\n",
      "\n",
      "epoch:  335\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.273311, err_s_domain: 0.634676, err_t_domain: 0.636778, accuracy: 0.909346\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.378176, accuracy: 0.878908\n",
      "\t\tTarget dataset -  loss: 1.396700, accuracy: 0.654377\n",
      "\n",
      "epoch:  336\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.281021, err_s_domain: 0.636623, err_t_domain: 0.636776, accuracy: 0.908057\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.418559, accuracy: 0.868886\n",
      "\t\tTarget dataset -  loss: 1.568514, accuracy: 0.624862\n",
      "\n",
      "epoch:  337\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.285537, err_s_domain: 0.635689, err_t_domain: 0.638708, accuracy: 0.906583\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.395959, accuracy: 0.873391\n",
      "\t\tTarget dataset -  loss: 1.381441, accuracy: 0.652354\n",
      "\n",
      "epoch:  338\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.277394, err_s_domain: 0.637980, err_t_domain: 0.636260, accuracy: 0.908932\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.313487, accuracy: 0.901802\n",
      "\t\tTarget dataset -  loss: 1.332509, accuracy: 0.665042\n",
      "\n",
      "epoch:  339\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.267623, err_s_domain: 0.636603, err_t_domain: 0.637119, accuracy: 0.913514\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.416320, accuracy: 0.874218\n",
      "\t\tTarget dataset -  loss: 1.424893, accuracy: 0.658422\n",
      "\n",
      "epoch:  340\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.270935, err_s_domain: 0.635669, err_t_domain: 0.637990, accuracy: 0.911787\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.366853, accuracy: 0.883229\n",
      "\t\tTarget dataset -  loss: 1.283203, accuracy: 0.679110\n",
      "\n",
      "epoch:  341\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.272430, err_s_domain: 0.636392, err_t_domain: 0.636349, accuracy: 0.909899\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.439869, accuracy: 0.863001\n",
      "\t\tTarget dataset -  loss: 1.475636, accuracy: 0.647021\n",
      "\n",
      "epoch:  342\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.269230, err_s_domain: 0.631716, err_t_domain: 0.633872, accuracy: 0.909853\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.351358, accuracy: 0.889849\n",
      "\t\tTarget dataset -  loss: 1.437647, accuracy: 0.653825\n",
      "\n",
      "epoch:  343\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.281211, err_s_domain: 0.634437, err_t_domain: 0.636411, accuracy: 0.908126\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.390301, accuracy: 0.874310\n",
      "\t\tTarget dataset -  loss: 1.524654, accuracy: 0.634241\n",
      "\n",
      "epoch:  344\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.290588, err_s_domain: 0.640511, err_t_domain: 0.642619, accuracy: 0.904373\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.409333, accuracy: 0.868334\n",
      "\t\tTarget dataset -  loss: 1.498198, accuracy: 0.640769\n",
      "\n",
      "epoch:  345\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.284764, err_s_domain: 0.639662, err_t_domain: 0.640377, accuracy: 0.906491\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.442860, accuracy: 0.862174\n",
      "\t\tTarget dataset -  loss: 1.383968, accuracy: 0.644998\n",
      "\n",
      "epoch:  346\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.279925, err_s_domain: 0.643036, err_t_domain: 0.643835, accuracy: 0.907988\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.513321, accuracy: 0.841578\n",
      "\t\tTarget dataset -  loss: 1.371815, accuracy: 0.658698\n",
      "\n",
      "epoch:  347\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.287593, err_s_domain: 0.641542, err_t_domain: 0.641656, accuracy: 0.905501\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.377661, accuracy: 0.877804\n",
      "\t\tTarget dataset -  loss: 1.301874, accuracy: 0.666513\n",
      "\n",
      "epoch:  348\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.280789, err_s_domain: 0.637520, err_t_domain: 0.636093, accuracy: 0.907850\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.479477, accuracy: 0.852335\n",
      "\t\tTarget dataset -  loss: 1.334008, accuracy: 0.662744\n",
      "\n",
      "epoch:  349\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.270391, err_s_domain: 0.634795, err_t_domain: 0.634995, accuracy: 0.910336\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.387812, accuracy: 0.879275\n",
      "\t\tTarget dataset -  loss: 1.333797, accuracy: 0.667157\n",
      "\n",
      "epoch:  350\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.266624, err_s_domain: 0.631535, err_t_domain: 0.632841, accuracy: 0.912225\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.365364, accuracy: 0.885068\n",
      "\t\tTarget dataset -  loss: 1.287068, accuracy: 0.676903\n",
      "\n",
      "epoch:  351\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.273993, err_s_domain: 0.635911, err_t_domain: 0.635684, accuracy: 0.911396\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.357288, accuracy: 0.886263\n",
      "\t\tTarget dataset -  loss: 1.488411, accuracy: 0.644630\n",
      "\n",
      "epoch:  352\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.265578, err_s_domain: 0.636693, err_t_domain: 0.638363, accuracy: 0.912616\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.374301, accuracy: 0.883597\n",
      "\t\tTarget dataset -  loss: 1.425067, accuracy: 0.655848\n",
      "\n",
      "epoch:  353\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.266836, err_s_domain: 0.636152, err_t_domain: 0.637963, accuracy: 0.910797\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.390805, accuracy: 0.873391\n",
      "\t\tTarget dataset -  loss: 1.311012, accuracy: 0.680397\n",
      "\n",
      "epoch:  354\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.267007, err_s_domain: 0.638218, err_t_domain: 0.640369, accuracy: 0.912616\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.415952, accuracy: 0.867874\n",
      "\t\tTarget dataset -  loss: 1.388250, accuracy: 0.658514\n",
      "\n",
      "epoch:  355\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.263962, err_s_domain: 0.635243, err_t_domain: 0.636796, accuracy: 0.912271\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.398424, accuracy: 0.873759\n",
      "\t\tTarget dataset -  loss: 1.440375, accuracy: 0.653549\n",
      "\n",
      "epoch:  356\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.270994, err_s_domain: 0.638332, err_t_domain: 0.639505, accuracy: 0.909300\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.431138, accuracy: 0.866955\n",
      "\t\tTarget dataset -  loss: 1.293162, accuracy: 0.678191\n",
      "\n",
      "epoch:  357\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.266547, err_s_domain: 0.639591, err_t_domain: 0.639867, accuracy: 0.911511\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.427985, accuracy: 0.868610\n",
      "\t\tTarget dataset -  loss: 1.502142, accuracy: 0.640309\n",
      "\n",
      "epoch:  358\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.266398, err_s_domain: 0.635971, err_t_domain: 0.636638, accuracy: 0.912086\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.360848, accuracy: 0.882126\n",
      "\t\tTarget dataset -  loss: 1.433396, accuracy: 0.655756\n",
      "\n",
      "epoch:  359\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.270757, err_s_domain: 0.638110, err_t_domain: 0.639988, accuracy: 0.912109\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.384214, accuracy: 0.878724\n",
      "\t\tTarget dataset -  loss: 1.325433, accuracy: 0.672674\n",
      "\n",
      "epoch:  360\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.272433, err_s_domain: 0.638384, err_t_domain: 0.639730, accuracy: 0.911396\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.334518, accuracy: 0.893435\n",
      "\t\tTarget dataset -  loss: 1.303882, accuracy: 0.677363\n",
      "\n",
      "epoch:  361\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.265783, err_s_domain: 0.637738, err_t_domain: 0.639295, accuracy: 0.913238\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.391264, accuracy: 0.873943\n",
      "\t\tTarget dataset -  loss: 1.407268, accuracy: 0.662100\n",
      "\n",
      "epoch:  362\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.262849, err_s_domain: 0.639258, err_t_domain: 0.638505, accuracy: 0.913169\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.440429, accuracy: 0.866679\n",
      "\t\tTarget dataset -  loss: 1.327963, accuracy: 0.671111\n",
      "\n",
      "epoch:  363\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.270326, err_s_domain: 0.636346, err_t_domain: 0.640196, accuracy: 0.911373\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.339868, accuracy: 0.895090\n",
      "\t\tTarget dataset -  loss: 1.456857, accuracy: 0.651067\n",
      "\n",
      "epoch:  364\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.272766, err_s_domain: 0.635642, err_t_domain: 0.636833, accuracy: 0.910106\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.480934, accuracy: 0.852979\n",
      "\t\tTarget dataset -  loss: 1.317319, accuracy: 0.668812\n",
      "\n",
      "epoch:  365\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.262015, err_s_domain: 0.634526, err_t_domain: 0.636590, accuracy: 0.913445\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.354345, accuracy: 0.886447\n",
      "\t\tTarget dataset -  loss: 1.393253, accuracy: 0.662284\n",
      "\n",
      "epoch:  366\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.272138, err_s_domain: 0.640678, err_t_domain: 0.641155, accuracy: 0.909899\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.361691, accuracy: 0.883873\n",
      "\t\tTarget dataset -  loss: 1.364544, accuracy: 0.667433\n",
      "\n",
      "epoch:  367\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.280435, err_s_domain: 0.637414, err_t_domain: 0.640889, accuracy: 0.908909\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.421620, accuracy: 0.867782\n",
      "\t\tTarget dataset -  loss: 1.523414, accuracy: 0.634149\n",
      "\n",
      "epoch:  368\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.261477, err_s_domain: 0.637576, err_t_domain: 0.638773, accuracy: 0.915494\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.341036, accuracy: 0.891688\n",
      "\t\tTarget dataset -  loss: 1.423792, accuracy: 0.656859\n",
      "\n",
      "epoch:  369\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.256486, err_s_domain: 0.637435, err_t_domain: 0.636693, accuracy: 0.915517\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.338404, accuracy: 0.892975\n",
      "\t\tTarget dataset -  loss: 1.434305, accuracy: 0.658606\n",
      "\n",
      "epoch:  370\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.258243, err_s_domain: 0.633742, err_t_domain: 0.634962, accuracy: 0.916899\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.330152, accuracy: 0.895458\n",
      "\t\tTarget dataset -  loss: 1.465516, accuracy: 0.637734\n",
      "\n",
      "epoch:  371\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.270446, err_s_domain: 0.637375, err_t_domain: 0.637592, accuracy: 0.911257\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.416281, accuracy: 0.873391\n",
      "\t\tTarget dataset -  loss: 1.271355, accuracy: 0.679662\n",
      "\n",
      "epoch:  372\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.258336, err_s_domain: 0.637380, err_t_domain: 0.638515, accuracy: 0.914113\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.440921, accuracy: 0.862817\n",
      "\t\tTarget dataset -  loss: 1.278479, accuracy: 0.666513\n",
      "\n",
      "epoch:  373\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.260118, err_s_domain: 0.639526, err_t_domain: 0.640304, accuracy: 0.914090\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.365494, accuracy: 0.885987\n",
      "\t\tTarget dataset -  loss: 1.550458, accuracy: 0.640493\n",
      "\n",
      "epoch:  374\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.261152, err_s_domain: 0.638830, err_t_domain: 0.639191, accuracy: 0.913882\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.390545, accuracy: 0.876885\n",
      "\t\tTarget dataset -  loss: 1.402204, accuracy: 0.657043\n",
      "\n",
      "epoch:  375\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.266911, err_s_domain: 0.638436, err_t_domain: 0.639648, accuracy: 0.912155\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.380549, accuracy: 0.881482\n",
      "\t\tTarget dataset -  loss: 1.378361, accuracy: 0.671203\n",
      "\n",
      "epoch:  376\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.262526, err_s_domain: 0.636307, err_t_domain: 0.637581, accuracy: 0.913790\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.416981, accuracy: 0.867231\n",
      "\t\tTarget dataset -  loss: 1.311738, accuracy: 0.671478\n",
      "\n",
      "epoch:  377\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.268858, err_s_domain: 0.638462, err_t_domain: 0.638478, accuracy: 0.910682\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.359026, accuracy: 0.885436\n",
      "\t\tTarget dataset -  loss: 1.306226, accuracy: 0.677363\n",
      "\n",
      "epoch:  378\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.263973, err_s_domain: 0.635391, err_t_domain: 0.637468, accuracy: 0.913952\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.363040, accuracy: 0.881666\n",
      "\t\tTarget dataset -  loss: 1.296564, accuracy: 0.673961\n",
      "\n",
      "epoch:  379\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.270611, err_s_domain: 0.638492, err_t_domain: 0.640690, accuracy: 0.911327\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.379826, accuracy: 0.879827\n",
      "\t\tTarget dataset -  loss: 1.286623, accuracy: 0.673685\n",
      "\n",
      "epoch:  380\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.260658, err_s_domain: 0.636712, err_t_domain: 0.637233, accuracy: 0.913330\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.354175, accuracy: 0.883413\n",
      "\t\tTarget dataset -  loss: 1.426628, accuracy: 0.652997\n",
      "\n",
      "epoch:  381\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.258162, err_s_domain: 0.637447, err_t_domain: 0.637950, accuracy: 0.915632\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.450472, accuracy: 0.861990\n",
      "\t\tTarget dataset -  loss: 1.377651, accuracy: 0.662560\n",
      "\n",
      "epoch:  382\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.263503, err_s_domain: 0.638451, err_t_domain: 0.640377, accuracy: 0.913767\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.378407, accuracy: 0.880379\n",
      "\t\tTarget dataset -  loss: 1.406227, accuracy: 0.652630\n",
      "\n",
      "epoch:  383\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.264995, err_s_domain: 0.639850, err_t_domain: 0.640682, accuracy: 0.913560\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.395000, accuracy: 0.870816\n",
      "\t\tTarget dataset -  loss: 1.357077, accuracy: 0.662192\n",
      "\n",
      "epoch:  384\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.263664, err_s_domain: 0.637939, err_t_domain: 0.637539, accuracy: 0.913882\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.323048, accuracy: 0.896193\n",
      "\t\tTarget dataset -  loss: 1.317770, accuracy: 0.673317\n",
      "\n",
      "epoch:  385\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.259348, err_s_domain: 0.636185, err_t_domain: 0.636463, accuracy: 0.913675\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.407290, accuracy: 0.872288\n",
      "\t\tTarget dataset -  loss: 1.257175, accuracy: 0.685546\n",
      "\n",
      "epoch:  386\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.254970, err_s_domain: 0.634416, err_t_domain: 0.634341, accuracy: 0.914734\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.376350, accuracy: 0.877069\n",
      "\t\tTarget dataset -  loss: 1.406510, accuracy: 0.656032\n",
      "\n",
      "epoch:  387\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.264246, err_s_domain: 0.638249, err_t_domain: 0.641476, accuracy: 0.912662\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.460989, accuracy: 0.856657\n",
      "\t\tTarget dataset -  loss: 1.381400, accuracy: 0.659342\n",
      "\n",
      "epoch:  388\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.283869, err_s_domain: 0.644778, err_t_domain: 0.646066, accuracy: 0.907757\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.564688, accuracy: 0.826039\n",
      "\t\tTarget dataset -  loss: 1.396995, accuracy: 0.653549\n",
      "\n",
      "epoch:  389\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.270539, err_s_domain: 0.640991, err_t_domain: 0.642024, accuracy: 0.911165\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.428453, accuracy: 0.864104\n",
      "\t\tTarget dataset -  loss: 1.472341, accuracy: 0.637918\n",
      "\n",
      "epoch:  390\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.261217, err_s_domain: 0.638695, err_t_domain: 0.638402, accuracy: 0.914711\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.400662, accuracy: 0.874586\n",
      "\t\tTarget dataset -  loss: 1.431780, accuracy: 0.656216\n",
      "\n",
      "epoch:  391\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.254301, err_s_domain: 0.634214, err_t_domain: 0.635562, accuracy: 0.916369\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.429527, accuracy: 0.865300\n",
      "\t\tTarget dataset -  loss: 1.449623, accuracy: 0.655848\n",
      "\n",
      "epoch:  392\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.254518, err_s_domain: 0.637391, err_t_domain: 0.638516, accuracy: 0.917083\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.457712, accuracy: 0.861070\n",
      "\t\tTarget dataset -  loss: 1.346043, accuracy: 0.672030\n",
      "\n",
      "epoch:  393\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.254989, err_s_domain: 0.636566, err_t_domain: 0.638047, accuracy: 0.916323\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.488238, accuracy: 0.845715\n",
      "\t\tTarget dataset -  loss: 1.365105, accuracy: 0.655112\n",
      "\n",
      "epoch:  394\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.257910, err_s_domain: 0.637458, err_t_domain: 0.638340, accuracy: 0.915034\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.385229, accuracy: 0.880839\n",
      "\t\tTarget dataset -  loss: 1.344953, accuracy: 0.671846\n",
      "\n",
      "epoch:  395\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.255427, err_s_domain: 0.640017, err_t_domain: 0.640927, accuracy: 0.914965\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.399872, accuracy: 0.876609\n",
      "\t\tTarget dataset -  loss: 1.395208, accuracy: 0.660813\n",
      "\n",
      "epoch:  396\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.254131, err_s_domain: 0.640043, err_t_domain: 0.641516, accuracy: 0.916438\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.373025, accuracy: 0.883505\n",
      "\t\tTarget dataset -  loss: 1.503529, accuracy: 0.644814\n",
      "\n",
      "epoch:  397\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.258755, err_s_domain: 0.640796, err_t_domain: 0.640385, accuracy: 0.913859\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.328401, accuracy: 0.893159\n",
      "\t\tTarget dataset -  loss: 1.402091, accuracy: 0.657227\n",
      "\n",
      "epoch:  398\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.253352, err_s_domain: 0.636264, err_t_domain: 0.637313, accuracy: 0.916277\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.390263, accuracy: 0.878356\n",
      "\t\tTarget dataset -  loss: 1.241599, accuracy: 0.695660\n",
      "\n",
      "epoch:  399\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.257533, err_s_domain: 0.636275, err_t_domain: 0.638038, accuracy: 0.916553\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.420911, accuracy: 0.871828\n",
      "\t\tTarget dataset -  loss: 1.373391, accuracy: 0.668444\n",
      "TRAINING COMPLETED\n"
     ]
    }
   ],
   "source": [
    "# training\n",
    "\n",
    "# Initialize lists to store metrics\n",
    "train_losses_s_label = []\n",
    "train_losses_s_domain = []\n",
    "train_losses_t_domain = []\n",
    "train_accs = []\n",
    "test_losses_source = []\n",
    "test_accs_source = []\n",
    "test_losses_target = []\n",
    "test_accs_target = []\n",
    "\n",
    "print('TRAINING STARTED...')\n",
    "\n",
    "for epoch in range(n_epoch):\n",
    "\n",
    "    \n",
    "    len_dataloader = min(len(dataloader_source), len(dataloader_target)) ##returns the number of batches to find the min no of batches\n",
    "    data_source_iter = iter(dataloader_source) ##initialize iterator\n",
    "    data_target_iter = iter(dataloader_target)\n",
    "\n",
    "    # Initialize accumulators for the losses\n",
    "    total_err_s_label = 0\n",
    "    total_err_s_domain = 0\n",
    "    total_err_t_domain = 0\n",
    "    total_correct = 0\n",
    "    total_samples = 0\n",
    "    \n",
    "    i = 0\n",
    "    while i < len_dataloader: ##run iterations equal to the number of batches\n",
    "\n",
    "        p = float(i + epoch * len_dataloader) / n_epoch / len_dataloader\n",
    "        alpha = 2. / (1. + np.exp(-10 * p)) - 1\n",
    "\n",
    "        # training model using SOURCE DATA \n",
    "        \n",
    "        data_source = next(data_source_iter) ##fetch the next batch of data\n",
    "        s_img, s_label = data_source ## returns the images and their corresponding labels\n",
    "\n",
    "        my_net.zero_grad() ## resets the gradient to remove gradients of previous batches\n",
    "        batch_size = len(s_label)\n",
    "\n",
    "        ##initialize variables\n",
    "        input_img = torch.FloatTensor(batch_size, 3, image_size, image_size)\n",
    "        class_label = torch.LongTensor(batch_size)\n",
    "        domain_label = torch.zeros(batch_size) ##to zero becz it is source domain\n",
    "        domain_label = domain_label.long()\n",
    "        \n",
    "#         print(type(input_img))\n",
    "#         print(type(class_label))\n",
    "#         print(type(domain_label))\n",
    "\n",
    "        if cuda:\n",
    "             # Check tensor types and shapes before transferring to CUDA\n",
    "#             print(type(s_img), s_img.size(), s_img.dtype)\n",
    "#             print(type(s_label), s_label.size(), s_label.dtype)\n",
    "    \n",
    "            s_img = s_img.cuda()\n",
    "            s_label = s_label.cuda()\n",
    "            input_img = input_img.cuda()\n",
    "            class_label = class_label.cuda()\n",
    "            domain_label = domain_label.cuda()\n",
    "\n",
    "        input_img.resize_as_(s_img).copy_(s_img)\n",
    "        class_label.resize_as_(s_label).copy_(s_label)\n",
    "\n",
    "        ##train the model\n",
    "        class_output, domain_output = my_net(input_data=input_img, alpha=alpha)\n",
    "        \n",
    "        ##calc errors\n",
    "        err_s_label = loss_class(class_output, class_label) ##classification error\n",
    "        err_s_domain = loss_domain(domain_output, domain_label) ##domain error\n",
    "\n",
    "        \n",
    "        # training model using TARGET DATA\n",
    "        data_target = next(data_target_iter) ##fetches the next batch\n",
    "        t_img, _ = data_target ##returns the images but not the labels as to do unsupervised learning\n",
    "\n",
    "#         print(type(t_img))\n",
    "\n",
    "        batch_size = len(t_img)\n",
    "\n",
    "        ##initialize variables\n",
    "        input_img = torch.FloatTensor(batch_size, 3, image_size, image_size)\n",
    "        domain_label = torch.ones(batch_size) ##one becz its target domain\n",
    "        domain_label = domain_label.long()\n",
    "\n",
    "        if cuda:\n",
    "            t_img = t_img.cuda()\n",
    "            input_img = input_img.cuda()\n",
    "            domain_label = domain_label.cuda()\n",
    "\n",
    "        input_img.resize_as_(t_img).copy_(t_img)\n",
    "\n",
    "        ##train the model\n",
    "        _, domain_output = my_net(input_data=input_img, alpha=alpha)\n",
    "        \n",
    "        ##calc error\n",
    "        err_t_domain = loss_domain(domain_output, domain_label)\n",
    "        err = err_t_domain + err_s_domain + err_s_label\n",
    "        \n",
    "        \n",
    "        err.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        # Accumulate the losses\n",
    "        total_err_s_label += err_s_label.item() # Convert tensor to Python number and accumulate\n",
    "        total_err_s_domain += err_s_domain.item()\n",
    "        total_err_t_domain += err_t_domain.item()\n",
    "        \n",
    "        # Calculate accuracy for source data\n",
    "        pred = class_output.data.max(1, keepdim=True)[1]\n",
    "        total_correct += pred.eq(class_label.data.view_as(pred)).cpu().sum().item()\n",
    "        total_samples += batch_size\n",
    "        \n",
    "        i += 1\n",
    "\n",
    "    # Calculate the average losses\n",
    "    avg_err_s_label = total_err_s_label / len_dataloader\n",
    "    avg_err_s_domain = total_err_s_domain / len_dataloader\n",
    "    avg_err_t_domain = total_err_t_domain / len_dataloader\n",
    "    avg_accuracy = total_correct / total_samples\n",
    "\n",
    "    # Append to lists for graph\n",
    "    train_losses_s_label.append(avg_err_s_label)\n",
    "    train_losses_s_domain.append(avg_err_s_domain)\n",
    "    train_losses_t_domain.append(avg_err_t_domain)\n",
    "    train_accs.append(avg_accuracy)\n",
    "    \n",
    "    # Print training metrics\n",
    "    print('\\nepoch: ', epoch)\n",
    "    print('\\tTrain:')\n",
    "    print('\\t\\terr_s_label: %f, err_s_domain: %f, err_t_domain: %f, accuracy: %f' %\n",
    "          (avg_err_s_label, avg_err_s_domain, avg_err_t_domain, avg_accuracy))\n",
    "    \n",
    "\n",
    "    torch.save(my_net, '{0}/plantvillage_model_epoch_{1}.pth'.format(model_root, epoch))\n",
    "   \n",
    "    test_loss_source, test_acc_source = test(source_dataset_name, epoch)\n",
    "    test_loss_target, test_acc_target = test(target_dataset_name, epoch)\n",
    "\n",
    "    # Append test metrics\n",
    "    test_losses_source.append(test_loss_source)\n",
    "    test_accs_source.append(test_acc_source)\n",
    "    \n",
    "    test_losses_target.append(test_loss_target)\n",
    "    test_accs_target.append(test_acc_target)\n",
    "    \n",
    "    # Print test metrics\n",
    "    print('\\tTest:')\n",
    "    print('\\t\\tSource dataset -  loss: %f, accuracy: %f' % (test_loss_source, test_acc_source))\n",
    "    print('\\t\\tTarget dataset -  loss: %f, accuracy: %f' % (test_loss_target, test_acc_target))\n",
    "\n",
    "    \n",
    "    \n",
    "print('TRAINING COMPLETED')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11d595e2",
   "metadata": {
    "papermill": {
     "duration": 0.077596,
     "end_time": "2024-07-04T19:07:27.505789",
     "exception": false,
     "start_time": "2024-07-04T19:07:27.428193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Graphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "04275e6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T19:07:27.662093Z",
     "iopub.status.busy": "2024-07-04T19:07:27.661688Z",
     "iopub.status.idle": "2024-07-04T19:07:29.037523Z",
     "shell.execute_reply": "2024-07-04T19:07:29.036597Z"
    },
    "papermill": {
     "duration": 1.454231,
     "end_time": "2024-07-04T19:07:29.040558",
     "exception": false,
     "start_time": "2024-07-04T19:07:27.586327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAHqCAYAAADVi/1VAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3xTZfvH8U+StuluKRTK3nuUIUseAQVkKCoooo8KOPCRoSL6qDwqw/FDZYh7CzhxgguQISigskGWFZFNGTJautvk/P5IkybdLW3Tlu/79cor55zc5+ROQXu4cl3XbTIMw0BERERERERERKQMmb09ARERERERERERufgoKCUiIiIiIiIiImVOQSkRERERERERESlzCkqJiIiIiIiIiEiZU1BKRERERERERETKnIJSIiIiIiIiIiJS5hSUEhERERERERGRMqeglIiIiIiIiIiIlDkFpUREREREREREpMwpKCUi5dqoUaNo0KBBsc6dOnUqJpOpZCckIiIiIiIiJUJBKREpFpPJVKjH6tWrvT1Vrxg1ahTBwcHenoaIiIhUAGV5X5WUlMTUqVMLfa3Vq1djMpn44osvLvi9RUSy8/H2BESkYvrggw889t9//32WL1+e43jLli0v6H3efvtt7HZ7sc59/PHHefTRRy/o/UVERERKW1ndV4EjKDVt2jQAevfufcHXExG5EApKiUix3HrrrR77v/32G8uXL89xPLukpCQCAwML/T6+vr7Fmh+Aj48PPj7635yIiIiUb8W9rxIRqehUvicipaZ37960adOGzZs307NnTwIDA/nf//4HwNdff81VV11FrVq1sFqtNG7cmKeeegqbzeZxjew9pQ4cOIDJZGLmzJm89dZbNG7cGKvVSufOndm4caPHubn1lDKZTIwfP55FixbRpk0brFYrrVu3ZunSpTnmv3r1ai655BL8/f1p3Lgxb775Zon3qfr888/p1KkTAQEBVKtWjVtvvZWjR496jDl+/Di33347derUwWq1UrNmTa699loOHDjgGrNp0yb69+9PtWrVCAgIoGHDhtxxxx0e17Hb7cyZM4fWrVvj7+9PjRo1+M9//sPZs2c9xhXmWiIiIlK2SuL3+IEDB4iMjARg2rRprrLAqVOnXvD8/v77b4YNG0ZERASBgYF069aN77//Pse4l19+mdatWxMYGEiVKlW45JJL+Pjjj12vnz9/ngkTJtCgQQOsVivVq1enX79+bNmyxeM669evZ8CAAYSFhREYGEivXr1Yt26dx5jCXktEvEcpBCJSqk6fPs3AgQO56aabuPXWW6lRowYA8+bNIzg4mIkTJxIcHMyPP/7I5MmTiY+PZ8aMGQVe9+OPP+b8+fP85z//wWQy8fzzzzN06FD+/vvvArOr1q5dy1dffcXYsWMJCQnhpZde4vrrr+fQoUNUrVoVgK1btzJgwABq1qzJtGnTsNlsPPnkk64buZIwb948br/9djp37sz06dM5ceIEL774IuvWrWPr1q2Eh4cDcP3117Nr1y7uvfdeGjRowMmTJ1m+fDmHDh1y7V955ZVERkby6KOPEh4ezoEDB/jqq6883u8///mP6z3vu+8+9u/fzyuvvMLWrVtZt24dvr6+hb6WiIiIlK2S+D0eGRnJ66+/zpgxYxgyZAhDhw4FoF27dhc0txMnTnDppZeSlJTEfffdR9WqVZk/fz7XXHMNX3zxBUOGDAEcbRnuu+8+brjhBu6//35SUlL4/fffWb9+Pf/+978BuOeee/jiiy8YP348rVq14vTp06xdu5Y9e/bQsWNHAH788UcGDhxIp06dmDJlCmazmblz53LFFVewZs0aunTpUuhriYiXGSIiJWDcuHFG9v+l9OrVywCMN954I8f4pKSkHMf+85//GIGBgUZKSorr2MiRI4369eu79vfv328ARtWqVY0zZ864jn/99dcGYHz77beuY1OmTMkxJ8Dw8/Mz/vrrL9ex7du3G4Dx8ssvu44NHjzYCAwMNI4ePeo6tnfvXsPHxyfHNXMzcuRIIygoKM/X09LSjOrVqxtt2rQxkpOTXce/++47AzAmT55sGIZhnD171gCMGTNm5HmthQsXGoCxcePGPMesWbPGAIyPPvrI4/jSpUs9jhfmWiIiIlK6st9XleTv8VOnThmAMWXKlELNZdWqVQZgfP7553mOmTBhggEYa9ascR07f/680bBhQ6NBgwaGzWYzDMMwrr32WqN169b5vl9YWJgxbty4PF+32+1G06ZNjf79+xt2u911PCkpyWjYsKHRr1+/Ql9LRLxP5XsiUqqsViu33357juMBAQGu7fPnz/PPP/9w2WWXkZSUxB9//FHgdYcPH06VKlVc+5dddhngSB0vSN++fWncuLFrv127doSGhrrOtdlsrFixguuuu45atWq5xjVp0oSBAwcWeP3C2LRpEydPnmTs2LH4+/u7jl911VW0aNHCle4eEBCAn58fq1evzpGe7+TMqPruu+9IT0/Pdcznn39OWFgY/fr1459//nE9OnXqRHBwMKtWrSr0tURERKRslfff44sXL6ZLly7861//ch0LDg7m7rvv5sCBA+zevds1vyNHjuRoueAuPDyc9evXc+zYsVxf37ZtG3v37uXf//43p0+fdv0sEhMT6dOnDz///LNrkZyCriUi3qeglIiUqtq1a+Pn55fj+K5duxgyZAhhYWGEhoYSGRnpauYZFxdX4HXr1avnse8MUOUVuMnvXOf5znNPnjxJcnIyTZo0yTEut2PFcfDgQQCaN2+e47UWLVq4XrdarTz33HMsWbKEGjVq0LNnT55//nmOHz/uGt+rVy+uv/56pk2bRrVq1bj22muZO3cuqamprjF79+4lLi6O6tWrExkZ6fFISEjg5MmThb6WiIiIlK3y/nv84MGDud7TOFcLdN7XPPLIIwQHB9OlSxeaNm3KuHHjcvSBev7559m5cyd169alS5cuTJ061eNLx7179wIwcuTIHD+Ld955h9TUVNe9ZEHXEhHvU08pESlV7hlRTufOnaNXr16Ehoby5JNP0rhxY/z9/dmyZQuPPPKI69ut/FgsllyPG4ZRqud6w4QJExg8eDCLFi3ihx9+4IknnmD69On8+OOPdOjQAZPJxBdffMFvv/3Gt99+yw8//MAdd9zBrFmz+O233wgODsZut1O9enU++uijXN/D2SurMNcSERGRslVZfo+3bNmSmJgYvvvuO5YuXcqXX37Ja6+9xuTJk5k2bRoAN954I5dddhkLFy5k2bJlzJgxg+eee46vvvqKgQMHuu4TZ8yYQfv27XN9H+fnLOhaIuJ9CkqJSJlbvXo1p0+f5quvvqJnz56u4/v37/firLJUr14df39//vrrrxyv5XasOOrXrw9ATEwMV1xxhcdrMTExrtedGjduzIMPPsiDDz7I3r17ad++PbNmzeLDDz90jenWrRvdunXjmWee4eOPP+aWW25hwYIF3HXXXTRu3JgVK1bQo0ePXAOF2eV3LRERESlbJfl7vCRXEXaqX78+MTExOY47WzK439cEBQUxfPhwhg8fTlpaGkOHDuWZZ55h0qRJrpYGNWvWZOzYsYwdO5aTJ0/SsWNHnnnmGQYOHOhqwRAaGkrfvn0LnFt+1xIR71P5noiUOWemkntmUlpaGq+99pq3puTBYrHQt29fFi1a5NGD4K+//mLJkiUl8h6XXHIJ1atX54033vBIqV+yZAl79uzhqquuAiApKYmUlBSPcxs3bkxISIjrvLNnz+bI8nJ+c+gcc+ONN2Kz2XjqqadyzCUjI4Nz584V+loiIiJStkry93hgYCCA65ySMGjQIDZs2MCvv/7qOpaYmMhbb71FgwYNaNWqFeBYldmdn58frVq1wjAM0tPTsdlsOdo4VK9enVq1arnm36lTJxo3bszMmTNJSEjIMZdTp04BFOpaIuJ9ypQSkTJ36aWXUqVKFUaOHMl9992HyWTigw8+KFflc1OnTmXZsmX06NGDMWPGYLPZeOWVV2jTpg3btm0r1DXS09N5+umncxyPiIhg7NixPPfcc9x+++306tWLm2++mRMnTvDiiy/SoEEDHnjgAQD+/PNP+vTpw4033kirVq3w8fFh4cKFnDhxgptuugmA+fPn89prrzFkyBAaN27M+fPnefvttwkNDWXQoEGAo8fEf/7zH6ZPn862bdu48sor8fX1Ze/evXz++ee8+OKL3HDDDYW6loiIiJStkvw9HhAQQKtWrfj0009p1qwZERERtGnThjZt2uQ7hy+//DLXxWhGjhzJo48+yieffMLAgQO57777iIiIYP78+ezfv58vv/wSs9mRC3HllVcSFRVFjx49qFGjBnv27OGVV17hqquuIiQkhHPnzlGnTh1uuOEGoqOjCQ4OZsWKFWzcuJFZs2YBYDabeeeddxg4cCCtW7fm9ttvp3bt2hw9epRVq1YRGhrKt99+y/nz5wu8loiUA95b+E9EKpPsSxcbhmH06tUrz2V/161bZ3Tr1s0ICAgwatWqZTz88MPGDz/8YADGqlWrXONGjhxp1K9f37W/f/9+AzBmzJiR45pkW954ypQpOeYE5Lo0cP369Y2RI0d6HFu5cqXRoUMHw8/Pz2jcuLHxzjvvGA8++KDh7++fx08hy8iRIw0g10fjxo1d4z799FOjQ4cOhtVqNSIiIoxbbrnFOHLkiOv1f/75xxg3bpzRokULIygoyAgLCzO6du1qfPbZZ64xW7ZsMW6++WajXr16htVqNapXr25cffXVxqZNm3LM66233jI6depkBAQEGCEhIUbbtm2Nhx9+2Dh27FiRryUiIiKlI7f7KsMoud/jv/zyi9GpUyfDz88vx/1TdqtWrcrzngYw1qxZYxiGYezbt8+44YYbjPDwcMPf39/o0qWL8d1333lc68033zR69uxpVK1a1bBarUbjxo2N//73v0ZcXJxhGIaRmppq/Pe//zWio6ONkJAQIygoyIiOjjZee+21HPPaunWrMXToUNe16tevb9x4443GypUri3wtEfEek2GUo9QEEZFy7rrrrmPXrl2ulV9ERERERESkeNRTSkQkD8nJyR77e/fuZfHixfTu3ds7ExIREREREalElCklIpKHmjVrMmrUKBo1asTBgwd5/fXXSU1NZevWrTRt2tTb0xMREREREanQ1OhcRCQPAwYM4JNPPuH48eNYrVa6d+/O//3f/ykgJSIiIiIiUgKUKSUiIiIiIiIiImVOPaVERERERERERKTMKSglIiIiIiIiIiJlTj2lcmG32zl27BghISGYTCZvT0dEREQqAMMwOH/+PLVq1cJsrjzf++m+SERERIqqsPdFCkrl4tixY9StW9fb0xAREZEK6PDhw9SpU8fb0ygxui8SERGR4irovkhBqVyEhIQAjh9eaGiol2cjIiIiFUF8fDx169Z13UdUFrovEhERkaIq7H2RglK5cKamh4aG6uZLREREiqSylbjpvkhERESKq6D7osrT8EBERERERERERCoMBaVERERERERERKTMKSglIiIiIiIiIiJlTj2lRETkgtlsNtLT0709DZFS5+fnl++yxuXN1KlTmTZtmsex5s2b88cff3hpRiIiUlJ0/yXe5Ovri8ViueDrKCglIiLFZhgGx48f59y5c96eikiZMJvNNGzYED8/P29PpdBat27NihUrXPs+Prr9ExGpyHT/JeVFeHg4UVFRF7TIi1fvSn7++WdmzJjB5s2biY2NZeHChVx33XV5jh81ahTz58/PcbxVq1bs2rUL0DeCIiJlyXlDVL16dQIDAyvdqmMi7ux2O8eOHSM2NpZ69epVmL/vPj4+REVFeXsaIiJSQnT/Jd5mGAZJSUmcPHkSgJo1axb7Wl4NSiUmJhIdHc0dd9zB0KFDCxz/4osv8uyzz7r2MzIyiI6OZtiwYR7j9I2giEjps9lsrhuiqlWrens6ImUiMjKSY8eOkZGRga+vr7enUyh79+6lVq1a+Pv70717d6ZPn069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V16ha9eugONGrmXLlmzYsIEuXbowbdo0Hn30UdccGjVqxFNPPcXDDz9cIkGp1157jbp16/LKK69gMplo0aIFx44d45FHHmHy5MnExsaSkZHB0KFDqV+/PgBt27YF4MyZM8TFxXH11Ve7MoBatmx5wXOScsBuh1XPQO2O0OKqkr32nm/hs9ugemsY+0vJXltEpIzpHiwnb96DFXStQ4cO0bRpU/71r39hMplc9zaAK5kmPDycqKioIr2vu5kzZ/LII49w0003AfDcc8+xatUq5syZw6uvvprvHA4dOkRUVBR9+/bF19eXevXq0aVLl2LPpSAVstF5ReZofObYtucTkBMRkdJx/fXXc+zYMb755hsGDBjA6tWr6dixo+uLkD179lC3bl2PlVhbtWpFeHg4e/bsKdJ7derUyWN/27ZtXHbZZa6bIXeJiYns27ePO++80/VtYnBwME8//bRHanlRrVixgj59+lC7dm1CQkK47bbbOH36tMcXPD4+Ph43ei1atPD4vNu3b+fJJ5/0mNfo0aOJjY3N94uiwtqzZw/du3f3+Ka1R48eJCQkcOTIEaKjo+nTpw9t27Zl2LBhvP3225w9exaAiIgIRo0aRf/+/Rk8eDAvvviiR58HqcD+XAprZsKCf5f8tbd/4ng+uavkry0iIrm6GO7BCnOtUaNGsW3bNpo3b859993HsmXLivQeBYmPj+fYsWP06NHD43iPHj1cP8f85jBs2DCSk5Np1KgRo0ePZuHChSXasiG7CtnovKIzAQaOzHERkcoiwNfC7if7e+29i8Lf359+/frRr18/nnjiCe666y6mTJnCqFGjCnW+2WzOkembnp6eY1xQUJDnPAMC8ryms8/T22+/7cpYcipu6vaBAwe4+uqrGTNmDM888wwRERGsXbuWO++8k7S0NAIDAwt1nYSEBKZNm+b6xs+dv79/seZWFBaLheXLl/PLL7+wbNkyXn75ZR577DHWr19Pw4YNmTt3Lvfddx9Lly7l008/5fHHH2f58uV069at1OcmpSjheOld25bzv1cRkYpK92Dl5x6sMNfq2LEj+/fvZ8mSJaxYsYIbb7yRvn378sUXXxTpvS5EfnOoW7cuMTExrFixguXLlzN27FhmzJjBTz/9lGtQ70IpKOUFZpMJu2EoU0pEKhWTyVSo9O3yqFWrVq4ldVu2bOmqq3d+U7d7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qFevHlarlaioKPr378+6deu8PbViGTVqFCaTCZPJhK+vLzVq1KBfv36899572O12b08PgOHDh/Pnn39e0DVWr16NyWTi3LlzJTMpKf9KutF5XplS/8RA3CHY9yPsWlj89xERkTw571XyekydOtWrc1u0aFGer8+bN6/A+R84cKBY713YL+4q8xd8Pt6ewMUoa/U9BaVERMra9ddfT1paGvPnz6dRo0acOHGClStXcvr06VJ937S0NPz8/Erl2gMGDGDu3LnYbDZOnDjB0qVLuf/++/niiy/45ptv8PHx7q/7gIAAAgICvDoHqYAK6illt4NhB0sBf7+d5Xt59ZRyd3JX4ecnIiKFFhsb69r+9NNPmTx5MjExMa5jwcHBRbpead5XZTd8+HAGDBjg2h86dCht2rThySefdB2LjIwsk7lURsqU8gJz5k9dISkRkbJ17tw51qxZw3PPPcfll19O/fr16dKlC5MmTeKaa65xjTt06BDXXnstwcHBhIaGcuONN3LixAnX66NGjeK6667zuPaECRPo3bu3a793796MHz+eCRMmUK1aNfr37w/Arl27uPrqqwkNDSUkJITLLruMffv2uc575513aNmyJf7+/rRo0YLXXnutwM/lzPiqXbs2HTt25H//+x9ff/01S5YsYd68eYX+XFOnTqV9+/a899571KtXj+DgYMaOHYvNZuP5558nKiqK6tWr88wzz3i8/+zZs2nbti1BQUHUrVuXsWPHkpCQFQDI/u2e830++OADGjRoQFhYGDfddBPnz+dRXlUIZ8+eZcSIEVSpUoXAwEAGDhzI3r17Xa8fPHiQwYMHU6VKFYKCgmjdujWLFy92nXvLLbcQGRlJQEAATZs2Ze7cucWei5QQWwFBqXmD4LWunuOc3LMEC1p9z90JBaVEREpDVFSU6xEWFobJZHLtJyYmcsstt1CjRg2Cg4Pp3LkzK1as8Di/QYMGPPXUU4wYMYLQ0FDuvvtuAN5++23q1q1LYGAgQ4YMYfbs2Tkyir7++ms6duyIv78/jRo1Ytq0aWRkZLiuCzBkyBBMJpNr311AQIDH/P38/AgMDHTt+/v785///IfIyEhCQ0O54oor2L59u+v87du3c/nllxMSEkJoaCidOnVi06ZNrF69mttvv524uLgLzhgr6B4vrzlA/vdIZUGZUl6Q1VNKYSkRqUQMA9KTvPPevoFgMhU4LDg4mODgYBYtWkS3bt2wWq05xtjtdtcv9Z9++omMjAzGjRvH8OHDWb16dZGmNX/+fMaMGeMqDTx69Cg9e/akd+/e/Pjjj4SGhrJu3TrXjdFHH33E5MmTeeWVV+jQoQNbt25l9OjRBAUFMXLkyCK99xVXXEF0dDRfffUVd911V6E/1759+1iyZAlLly5l37593HDDDfz99980a9aMn376iV9++YU77riDvn370rVrVwDMZjMvvfQSDRs25O+//2bs2LE8/PDD+QbU9u3bx6JFi/juu+84e/YsN954I88++2yOgFdhjRo1ir179/LNN98QGhrKI488wqBBg9i9eze+vr6MGzeOtLQ0fv75Z4KCgti9e7frW9knnniC3bt3s2TJEqpVq8Zff/1FcrKaX3ud3Za1nZHq+VpqAhz61bH9z16o0crzdfcglitTqhBBz5N7HAEts763FZEKpALcg+UnISGBQYMG8cwzz2C1Wnn//fcZPHgwMTEx1KtXzzVu5syZTJ48mSlTpgCwbt067rnnHp577jmuueYaVqxYwRNPPOFx7TVr1jBixAheeukl1xeBzoDWlClT2LhxI9WrV2fu3LkMGDAAi8VS5PkPGzaMgIAAlixZQlhYGG+++SZ9+vThzz//JCIigltuuYUOHTrw+uuvY7FY2LZtG76+vlx66aXMmTPHI2usqBljULh717zmAOR7j1QWFJTyArOrfM/LExERKUnpSfB/tbzz3v87Bn5BBQ7z8fFh3rx5jB49mjfeeIOOHTvSq1cvbrrpJtq1awfAypUr2bFjB/v376du3boAvP/++7Ru3ZqNGzfSuXPnQk+radOmPP/881nT/N//CAsLY8GCBa4bgWbNmrlenzJlCrNmzWLo0KEANGzYkN27d/Pmm28WOSgF0KJFC37//fcifS673c57771HSEgIrVq14vLLLycmJobFixdjNptp3rw5zz33HKtWrXIFpSZMmOB6zwYNGvD0009zzz335BuUstvtzJs3j5CQEABuu+02Vq5cWayglDMYtW7dOi699FLAEeCrW7cuixYtYtiwYRw6dIjrr7+etm3bAtCoUSPX+YcOHaJDhw5ccsklrs8g5YB7+V72FfISTpAv9/GuRueJeY8PrQ2JpxwlfucOQkTDos1VRMSbKsA9WH6io6OJjo527T/11FMsXLiQ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oQOTJk2ie/fufPzxxwpKlSd2OxiZQcvsQSlnSZ2PNSv7Ke18zvK9qk3h7P6sfTU6FxERKXe8GpQaOHAgAwcOLPJ51atXz7GqkdPs2bMZPXo0t99+OwBvvPEG33//Pe+99x6PPvrohUy3xGSV73l5IiIi4tK0aVO++uorBg8ejMlk4oknnihUJs+9995Lz549mT17NoMHD+bHH39kyZIlHqVlkydP5uqrr6ZevXrccMMNmM1mtm/fzs6dO13NuRs0aMDKlSvp0aMHVquVKlWq5Pme586d4/jx46SmpvLnn3/y5ptvsmjRIt5//33X78cHH3yQzp0789RTTzF8+HB+/fVXXnnlFV577bUL/jl98cUX/PLLL1SpUoXZs2dz4sSJUglKxcXFsW3bNo9jVatWZezYscyZM4d7772X8ePHExMTw5QpU5g4cSJms5n169ezcuVKrrzySqpXr8769es5deoULVu2ZP/+/bz11ltcc8011KpVi5iYGPbu3cuIESNKfP5yAexZKynmLN9zy5QKrwcndsCRTTnL9yIaQfzRrP0i9ZRyZkopKCUiIlKaKmRPqfbt21OzZk369evn8S1wWloamzdvdn1LDGA2m+nbty+//vprntdLTU0lPj7e41GanP9OKYnVokREpGTMnj2bKlWqcOmllzJ48GD69+9Px44dCzyvR48evPHGG8yePZvo6GiWLl3KAw884FGW179/f7777juWLVtG586d6datGy+88IKrCTc4Vqdbvnw5devWpUOHDvm+5+23307NmjVp0aIFY8aMITg4mA0bNvDvf//bNaZjx4589tlnLFiwgDZt2jB58mSefPJJjybnxfH444/TsWNH+vfvT+/evYmKisq39P5CrF692pXR5HxMmzaN2rVrs3jxYjZs2EB0dDT33HMPd955J48//jgAoaGh/PzzzwwaNIhmzZrx+OOPM2vWLAYOHEhgYCB//PEH119/Pc2aNePuu+9m3LhxrmbvUk7Y3crmAiMczynZekr5+EOraxzbuxZCerbV94Iis4JLUMSeUlbHs8r3RERESpXJKCeREZPJVGBPqZiYGFavXs0ll1xCamoq77zzDh988AHr16+nY8eOHDt2jNq1a/PLL7/QvXt313kPP/wwP/30E+vX597rZOrUqUybNi3H8bi4OI8ywZIy7qMtfL8jlqmDWzGqR9F6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TsVkMnk8WrRoUYqfouhMypQSERERyVIRekqBglIiIiIlzKtBqcTERKKjo3n11VcLNf7nn3+mX79+LF68mM2bN3P55ZczePBgtm7d6jGudevWxMbGuh5r164tjekXW2ZMSqvviYiIiEA57SmVW1AqqeznISIiUon5ePPNBw4cyMCBAws9fs6cOR77//d//8fXX3/Nt99+S4cOHVzHfXx8iIqKKqlpljhXo3PFpEREREQgrRxmSvkoU0pERKS0VeieUna7nfPnzxMREeFxfO/evdSqVYtGjRpxyy23cOjQIS/NMHfqKSUiIiLiJjXe8VyuekrlEpTS6nsiIiIlyquZUhdq5syZJCQkcOONN7qOde3alXnz5tG8eXNiY2OZNm0al112GTt37iQkJPcbndTUVFJTU1378fHxpTpvrb4nIiIi4qZc9pRSo3MREZHSVmGDUh9//DHTpk3j66+/pnr16q7j7uWA7dq1o2vXrtSvX5/PPvuMO++8M9drTZ8+nWnTppX6nJ3UU0pERETEjat8rxz1lLL4gskChi3rmIJSIiIiJapClu8tWLCAu+66i88++4y+ffvmOzY8PJxmzZrx119/5Tlm0qRJxMXFuR6HDx8u6Sl70Op7IiIiIm6cjc79ylFQymTKmS2lRuciIiIlqsIFpT755BNuv/12PvnkE6666qoCxyckJLBv3z5q1qyZ5xir1UpoaKjHozSpp5SIiIiIm/JYvgc5+0qlp3hnHiIiIpWUV8v3EhISPDKY9u/fz7Zt24iIiKBevXpMmjSJo0eP8v777wOOkr2RI0fy4osv0rVrV44fPw5AQEAAYWFhADz00EMMHjyY+vXrc+zYMaZMmYLFYuHmm28u+w+YB62+JyIiIpLJboe0zEypch+UUqaUiIhISfJqptSmTZvo0KEDHTp0AGDixIl06NCByZMnAxAbG+uxct5bb71FRkYG48aNo2bNmq7H/fff7xpz5MgRbr75Zpo3b86NN95I1apV+e2334iMjCzbD5cP9ZQSERERyZSemLVd7oJS2cv31FNKRESkJHk1U6p37975lrDNmzfPY3/16tUFXnPBggUXOKvSl7X6noJSIiIicpFz9pMyWcDH37tzyU6ZUiIiIqWqwvWUqgwyE6VUviciIiLi3k/KmU5eXjgzpfzDHc8Z2XpKGQb8uQzOle4iOSIiIpWVglJe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ykvU6FxERESkErAUtXwvwPHsEZRKzDqW272he/meYYeMlLzn416+p0wpEREp5xSU8hIfiyMolW5TUEpERESkwsotU8ovn6CUc9+WBrYMx3a6W0lebtlS2Zubp+bTwNy9fC8lLu9xIiIi5UCxglKHDx/myJGsb2E2bNjAhAkTeOutt0psYpWd1cfxo0/NsHt5JiIiIlIe6X6rgsitp1R+mVLu+7n1kipMUCq/VfXi1VNKREQqjmIFpf7973+zatUqAI4fP06/fv3YsGEDjz32GE8++WSJTrCysvpYAEhTUEpERERyofutCiK31fc8Gp1n6ynlYwUff8d2SmbPJ4+gVGZZny0DYpZC0hnP8r3s47PzaHSunlIiIlK+FSsotXPnTrp06QLAZ599Rps2bfjll1/46KOPmDdvXknOr9Lyc2VK2bw8ExERESmPdL9VQbj3lHI2Mbfms/oegH+44znlnOM5t0ypP76DT4bD8smFz5Sy2+C8e6NzZUqJiEj5VqygVHp6OlarFYAVK1ZwzTXXANCiRQtiY2NLbnaVmKt8L12ZUiIiIpKT7rcqCI+eUplNzPMr3wPwD3M8J59zPOeWKXXuoOM57jBkFDIolXgK7BlZ+wpKiYhIOVesoFTr1q154403WLNmDcuXL2fAgAEAHDt2jKpVq5boBCsrV/meTUEpERERyUn3WxWE+2p5frk1Og8mh4Bwx7OzEbn7SnzObedrqQmFb3Se+I/nforK90REpHwrVlDqueee480336R3797cfPPNREdHA/DNN9+40swlf37KlBIREZF86H6rgjCZsrazNzr38fcs73NyZkrlWr7nDEplBpRSz+dSvpdHTyn34JbzXBERkXIsl9+SBevduzf//PMP8fHxVKlSxXX87rvvJjAwsMQmV5lZ1VNKRERE8qH7rQoirA50vsvRR8rHUW6JNdTxnFvpHrj1lMrMhsqtp5TrtYRcGp3nkSmVPViVGlfg9EVERLypWEGp5ORkDMNw3SAdPHiQhQsX0rJlS/r371+iE6ysrL6OoJRW3xMREZHc6H6rArlqlue+s2Qvr6CUs3wv155S2YJSuZbv5ZEB5cyU8gt2BK6UKSUiIuVcscr3rr32Wt5//30Azp07R9euXZk1axbXXXcdr7/+eolOsLJy9pRKVVBKREREcqH7rQosvK7jOaxu7q9nL9/LradUamb5Xtp5sKV6nu88LztnQCskKnNcvGfPKxERkXKmWEGpLVu2cNlllwHwxRdfUKNGDQ4ePMj777/PSy+9VKITrKxUviciIiL50f1WBRbVFm79Coa8mfvrOcr33Mrx0rI1OjfsWdtO2Ruau87NzLgKzgxKGbasQJWIiEg5VKzyvaSkJEJCQgBYtmwZQ4cOxWw2061bNw4ePFiiE6ysnEEple+JiIhIbnS/VcE16ZP3aznK9/JZfQ8g6bTn+Qknc7+u89zgSMAEGI6MKz/1IBMRkfKpWJlSTZo0YdGiRRw+fJgffviBK6+8EoCTJ08SGhpaohOsrLIypRSUEhERkZx0v1WJ5bv6nrOnVHzWsaSzjmdnBlTiqdyv67yOX1BWs3X1lRIRkXKsWEGpyZMn89BDD9GgQQO6dOlC9+7dAce3eB06dCjRCVZWfgpKiYiISD50v1WJuZfv2e3Zekolg93m6CXllHzG8RxW2/GcV1DKeR3fIMdqgJDVm0pERKQcKlb53g033MC//vUvYmNjiY6Odh3v06cPQ4YMKbHJVWbORucq3xMREZHc6H6rEnMv38tIBtyakacn5QwkOcv3QmvB0c2OoJRhgMnkOc5ZBugXCP6hEI9nxlV+UuLg+A6odymYi/W9tYiISJEVKygFEBUVRVRUFEeOHAGgTp06dOnSpcQmVtmp0bmIiIgURPdblZSrfC/Os3QPHEGp7I3NkzIzpUIzM6XsGZB8FgIjsp2beS3fwKxMqezXysvSSbDtI7jlS2jat3DniIiIXKBifQ1it9t58sknCQsLo379+tSvX5/w8HCeeuop7HZl/hSGyvdEREQkP7rfqsSc5Xu21JxNzHMLSjnL9/yCwZoZ0MptBT5nppRvIITUdGzHHy3cnM5mNs+PO1S48SIiIiWgWJlSjz32GO+++y7PPvssPXr0AGDt2rVMnTqVlJQUnnnmmRKdZGWk8j0RERHJj+63KjFrCJjMYNhzBo3Sk3OW3DkDVxY/x8p6qXGQeBIim2U71618r0oDx/bZA4WbU1pC1vuLiIiUkWIFpebPn88777zDNddc4zrWrl07ateuzdixY3WTVAhWX2VKiYiISN50v1WJmUyOEr7ksxB/zPO19OS8S+4svhAUCaf/yr3ZuXuj8yIHpRI9ryEiIlIGilW+d+bMGVq0aJHjeIsWLThz5swFT+pi4Oopla6eUiIiIpKT7rcqOWcJ37nDnsfTEvMOSvlYHUEpgIRT8O0EeP86SM3Mckq7kEwpZ1BKmVIiIlJ2ihWUio6O5pVXXslx/JVXXqFdu3YXPKmLgXpKiYiISH50v1XJVW/peI5Z4nk8PTnn6ntOFr+soFT8Udg8F/5eBUseyTzXraeUKyh1EArTg8wZlEpTppSIiJSdYpXvPf/881x11VWsWLGC7t27A/Drr79y+PBhFi9eXKITrKzUU0pERETyo/utSq7lNRCzGE7scOxbwxy9ogpTvgdwcnfW8W0fQtf/ZAWW/IIgrC6YLI5m6gknILRm3nMxDLeeUgpKiYhI2SlWplSvXr34888/GTJkCOfOnePcuXMMHTqUXbt28cEHH5T0HCslqzKlREREJB+636rkmg8Es9v3w0FVHc9xh2D1dMe2b6DnOc5G5wDHd3q+tuMzz0wpiw+E13XsF1TCl5EKRmZLCZXviYhIGSpWphRArVq1cjTY3L59O++++y5vvfXWBU+ssnOW76XZ7NjtBmazycszEhERkfJG91uVWEA4NO4De39w7LceAmtmeY6JaguH12ftW/yyelGdz9Ygfc+3bj2lghzPVRo4AlK/L4DancDHL/e5ODOsQJlSIiJSpoodlJIL48yUAkdgyt9s8eJsRERERKTMDZoBW9o6AlLB1T2DUjd97Mha8ghK+UJYHc9r1P8XHN3kmQ3lzLBy9pXaPA9sGXDdq7nPI909KKVMKRERKTvFKt+TC+fsKQUq4RMRERG5KFWpD32egKg24BuQdbznf6HFVRAY4Tne4pdVkucU0RCa9PU85pcZlGp/a9ax03vznkeaglIiIuIdCkp5ia8lq1wvNcPmxZmIiIiIiNe5949q/2/Hs1+I5xhn+Z5fcNax4BpQt2vu16rbGW75wrHtDDad2Q9bP/RckU/leyIi4iVFKt8bOnRovq+fO3fuQuZyUTGZTFh9zKRm2LUCn4iIiLjofusiZbbAf352lNlFNHIcC6vtOcbiByaTo4Tv1B+OY8E1ILye23V8HWV+Ts4MrIwUx/Nnt8HxHXB6H/Sd4jjmXHkPlCklIiJlqkhBqbCwsAJfHzFixAVN6GLiDEqpfE9EREScdL91EasZ7bkfUtORLZV23rFvyWxU7hGUioRqTbPOcS8DBPDJ3E/PDEod3+F4XjvbLSil8j0REfGOIgWl5s6dW1rzuChZfS2QkkFqevkISqXb0ll/fD1dorrgZ8ljdRYREREpVbrfEheTCSKbOxqZQ1YGlHuz8+AaEF4/az813vMavv6O54zMYJPZB+wZju3E0xBUVeV7IiLiNeop5UV+FsePP81WPoJSi/cvZsyKMdy6+NaCB4uIiIhI6YtskbXtninlFFwDLPl8z+yTGZRyZkoFuDVPj/ne8azyPRER8RIFpbzI6uv48aeml49G52uPrgVgz5k9HE887uXZiIiIiAiRzbK2XUEptxX4gqs7nn2Dcj/fWc7nzIByz6Q6ttXxnD1TyjCKP18REZEiKBdBqVdffZUGDRrg7+9P165d2bBhQ55je/fujclkyvG46qqrXGNGjRqV4/UBAwaUxUcpEquPBaDc9JRqEt7Etf3xno+9OBMRERERATwzpXyyZUr5BmatxJe9KbrrnMxMKcPmCD45G54DJJ5yPLsHpTA8xxQk6Uzhx4qIiGTj9aDUp59+ysSJE5kyZQpbtmwhOjqa/v37c/LkyVzHf/XVV8TGxroeO3fuxGKxMGzYMI9xAwYM8Bj3ySeflMXHKRI/n8zyvXISlLKTNY9fjv3ixZmIiIiICADV3DKlTJm37jWjHdlSzQY4+k4BXHKn47l6K8/z3RufJ2S7v078x/HsXr4HhS/h27UInm8Iq58t3HgREZFsitTovDTMnj2b0aNHc/vttwPwxhtv8P333/Pee+/x6KOP5hgfERHhsb9gwQICAwNzBKWsVitRUVGlN/ESYM0MSpWXTCnDLVU7OUP9BERERES8zr2JeWBVx7M1BO7/Hcxu3y93uRtCa0Hdrp7nOzOlIJegVG6ZUmSW+nnec+fquwccz6unQ++c9+0iIiIF8WqmVFpaGps3b6Zv376uY2azmb59+/Lrr78W6hrvvvsuN910E0FBnnX0q1evpnr16jRv3pwxY8Zw+vTpEp17ScgKSpWPnlJ2Iys4lmpL9eJMRERERARwBJ4e/BMm7AS/IM/j2ce1ugZCangeN5myAlMJJzxfyzMoVcgvJ90DXiIiIsXg1Uypf/75B5vNRo0anr88a9SowR9//FHg+Rs2bGDnzp28++67HscHDBjA0KFDadiwIfv27eN///sfAwcO5Ndff8ViseS4TmpqKqmpWUGY+Pj4HGNKg7W8le+5BaXSbGlenImIiIiIuGQPNBWVb4CjT5QzKBVUHRJPQkocZKTlkSlVCM4eVyIiIsXk9fK9C/Huu+/Stm1bunTp4nH8pptucm23bduWdu3a0bhxY1avXk2fPn1yXGf69OlMmzat1OebXXlrdO4uJT2x4EEiIiIiUv75BABnszKjwutB8hmwZ0DSP8XvKWWxlug0RUTk4uPV8r1q1aphsVg4ccIzlfjEiRMF9oNKTExkwYIF3HnnnQW+T6NGjahWrRp//fVXrq9PmjSJuLg41+Pw4cOF/xAXoNyV78UfdW0rU0pERESkkvDNLLM7f9zx7B8GgdUc24mnlCklIiJe49WglJ+fH506dWLlypWuY3a7nZUrV9K9e/d8z/38889JTU3l1ltvLfB9jhw5wunTp6lZs2aur1utVkJDQz0eZcHqmxmUSi8fmVL2c4dc2zYTZNgzvDgbERERESkRPpkr8DkbnfuHQlCkYzvXoFS2TCm3xXAAsNvAlu7ZUyr7GBERkULwalAKYOLEibz99tvMnz+fPXv2MGbMGBITE12r8Y0YMYJJkyblOO/dd9/luuuuo2rVqh7HExIS+O9//8tvv/3GgQMHWLlyJddeey1NmjShf//+ZfKZCsvf11G+l5xePjKlDDyDY2p2LiIiIlIJ+GZrdG4NhSBnppRb+Z5fsOPZPSj12xvwfEOI/d2xb7fDRzfAzKae47IHtkRERArB6z2lhg8fzqlTp5g8eTLHjx+nffv2LF261NX8/NChQ5izrS4SExPD2rVrWbZsWY7rWSwWfv/9d+bPn8+5c+eoVasWV155JU899RRWa/mqew/yc/z4E1PLR0aSPds3XKm2VIJ8g/IYLSIiIiIVQn6ZUnFHHIEpgOAacCbBM8C09BHH85d3wviNsOsr2Pej41iK2+JAKXFgDS69zyAiIpWS14NSAOPHj2f8+PG5vrZ69eocx5o3b46RR4pwQEAAP/zwQ0lOr9QEWR0//oTU8pEplT0opb5SIiIiIpVAjkypMEfGE8CuhY4eUsFRENUWzuzLvdH5P3+CLQNWui0OZLjdw6acg7DapTJ9ERGpvMpFUOpiFWx1lO+Vl0wpw/As30vJKOTKKyIiIiJSfjl7P9nTHc/WEDA77kM5sdPx3GIQZGR+IZlXo/NTe8CtB6mH5HMlMlUREbm4eL2n1MXMmSmVmFY+glL27D2lUs97aSYiIiIiUmJ8Az333cv3nFpcBb6ZZX7umVIWt/YXO7/M+z1S4i5sjiIiclFSUMqLAstZT6nsJZFpaQpKiYiIiFR4vv6e+9ZQqNkOTJn/FAisCg0ucwtKZWZKpSWB+8I3Wz7I+z1SzpXYdEVE5OKh8j0vCnZmSpWTnlIGnkGpFAWlRERERCo+Z6NzJ/9QqBkN922F2O1QvRX4WB3BKsjKeko+43le0j95v4cypUREpBgUlPKioMyeUgnlJFPKnq2nVFpqgpdmIiIiIiIlJrdMKYAqDRwPpxDH6teuhuhJ2YJSTmH1IC5bbyn1lBIRkWJQ+Z4XBZe3nlLZyvdS0xPzGCkiIiIiFUb2TKmAKrmPC6npeD4f63hOOu14jmwBgdWyxtXukPNcle+JiEgxKCjlRa5G5+UkUyp7+V5qmjKlRERERCo8j0wpE4TWyn1cSJTj+fxxx7OzfC+wKkQ2zxoX2TLnuSrfExGRYlBQyouCMhudp9sMUjO831cqR6ZURh7LAYuIiIhIxeGeKRVSEyy+uY9zZkolngJbelb5XmAEtL/FsR1QxdGTKjuV74mISDGop5QXOXtKASSl2rD6WPIZXfrsZOspla6glIiIiEiF554pFVYn73EBEWD2BXu6o6+UMygVEAHt/w0WP0eD9IPrcp6rTCkRESkGZUp5kY/FjNXH8UdQHpqdG9kypVKUKSUiIlKhTZ8+nc6dOxMSEkL16tW57rrriImJ8fa0pKz5BmZt5xeUMps9S/icPaUCq4LJBO2GQWQz8AvOeW5+K/OJiIjkQUEpLytPzc6z95RKS0/x0kxERESkJPz000+MGzeO3377jeXLl5Oens6VV15JYqIWM7mo+BQyUwrcglKxbj2lIjzH+AXlPO/cIXD/gtMwYNNcOLa16PMVEZGLhsr3vCzQauF0Yvlodp6jp5Qt2UszERERkZKwdOlSj/158+ZRvXp1Nm/eTM+ePb00Kylzvm49pcLq5j82r0wpd35umVfBUZB4EjJSHCV/zvP/WgnfTXBsP34SUs9DUDVERETcKVPKy5zNzhNSvd/o3MjsKeWTGZxKzUj15nRERESkhMXFOfr+REREFDBSKpUiZUplNjs/H+vZU8qde/meNSTrmmcPZB0/uTtr+8Pr4YXWcGRTkaYtIiKVn4JSXuYs30sqR5lSAfbMoJRN5XsiIiKVhd1uZ8KECfTo0YM2bdrkOS41NZX4+HiPh1RwHplShS3fc8+Uyqd8zzcAqjRwbLsHpdLdMu4PrHFkUr3TB9bMgjN/F2X2IiJSiSko5WVBVmemVDkISmX2lPI3HBlTqbY0b05HREQkT4ZhkGH3/u/OimTcuHHs3LmTBQsW5Dtu+vTphIWFuR516xZQ7iXln8mUtV3YTKmTuyHusGM7orHnGPfG6XkFpZznZrfySZg7CM4eLGjWIiJyEVBQystcjc7LQVDKufqev7N8T0EpkRJxPu08qTaVw4r3/JP8D5uOb+LgP3t4a/kElm16lfS00ukbaDfsOVZzLWnHE49z22d96fnBJXy55bU8388wDOJS40i3p5fqfCqC8ePH891337Fq1Srq1Mk/KDFp0iTi4uJcj8OH8wguSMXhF5K1HVAl/7HOAJSzQXlEYwjK3lPKrXzPx7/wQanwehBSy1Ea+M29hZm5iIhUcmp07mWBfhYAEtO831MqK1PKsZ9qV1BK5ELFJsRy/TdDaBBSjw+vXoDZVPzvApz/8Da5f+NdCHt2fMI3v7/DnX3nUK1G20KdE5cax+d/fk7POj1pVqVZkeea1zXTbGlEBkYWODYp+Qy+lgB8/QI4nxJHYvxRIqs2w2Ip4q+tjMz/j/n45XjJZreRmJFIqF8oAOn2dH499iu7/tnF6TN/4hMfS/Ma7WnfYhhfrHuKhPTzjOo1nYYRWT+PxPREjsQfxh+DehEtOJ1ymgj/CMwmMza7jVRbKoGZGQWGYbD++Hq2x27CsKXSvk4PukR1cf2dSLenE5caR1X/qphMJjYe38jJpJPUDq5N/dD6VPGvgs1uY/H+xQT6BHJFvSs4l3qOuOQzbDixiTppKbTyj+RAQCjnyCA6Mpoq/lU4ev4Ity26jlN2t8DosZW0/P0t3ur3JuF1u7nef/X+5ZzPSGTzwVUcSTzKdc1vZNPebzmdcIzWYY2xRjTmt2O/EmiyEOIbTI30NA6YbPhFNOaOdnfx575lPL/rHRJMBk2C6jCwRlcG1u9HzbqXsuPvpew+uY11h37ibFocdfzCSPOx0rluL/yS4/D1D2Vr0lE2ndjMLY2vI8gOXx9ewYGk41Qx+XBn3f706DCaZF8rtyy6jpMZjtXjpu54nZV7PuWx3jP4K+kER+P+JsAvlN0HV/HtmW0kYmA1DDqbAhnW+UHifP1oF9mOxuHZMj8qKcMwuPfee1m4cCGrV6+mYcOGBZ5jtVqxWq1lMDspM5HNYPCLEFrbM2sqN7U7gTUMUh39x6jbJeeYwpTvxR3xPGfgDOh6NxxaD+9dCaf/KuqnEBGRSkhBKS8rj+V7AThuVtL0zbJcxP48+yeNwhphNpkxDAOL2eJY3jqPm3m7Yc814DR//XOcT09kx5k9vLf9LbD4cHWjq6keWJ21MQuJNzJoU6srDcIaAHAm5QwTf7yf2sG1ePqyZ7GlJ+PjF8ixhGOM++FOqlojeKbb4+z881suu2Qcfm7/MEg4/Btbt76DT3hDLulyH/j5k5oazwMbn+GoxcSWpbcTXbsHDazhDIv+D76htQDHP1oPHNvAqYwkzIaBOe4I0/fM5Y/Uf3hry0s82eRmena5n60ntxJzNoYASwBdanZx/aP+0Nl9rIn5kuMJR/E9/RfJcUep7hPI8Os/5deja3li8yzq+FflQNJxMjCY2Ph6LH6hJJ/9G4vJhF9YXayBkZw5/Sd7U07QyG5h/olf8AUa+oSw2Z4AQIABLQNq0KFaW7oHNyQOOz+f3UnLDPgr7SwH084S4RPEtR3HYmBix77FLD20kmBMPNTtCWzWYL7Z9y2mhJPUs1bhu7g9HMxIYHDkJTQ0LHx08jdOZv8jjNsFf37k2v36m+sZUq8faYknSTSb+OWfHSTj+FLBakCqCbpXaUkrw4dFZ3ZyxmSnq81Co/BGbE46Row9Kevau+fRLawpPgmnSLKlcsxI5bjJTl18iQyswZakrH/QmQyDTn5VOWdP4y+b4+dRxeTLWSPv/0+bDIMe1hr8mRHnEZBql25w0GKwxwJDlt1B58BatKjais+OrOKoxfMaWzY+69ped3oTnM6jSfH5v1hy8IfMN3Y8xSQeIebvI8z5+0tq2E2cMHtmM21PcXyO5Xty9pZ5Zvd7HvsnjDT+e3AhHFzoOtYgLZ1BRgDv+KazJuMMA1bcmefPItVkYi3JrN34NAAPVetG46veznN8ZTJu3Dg+/vhjvv76a0JCQjh+/DgAYWFhBAQEFHC2VCqdRhVunMUHmlwBuzL/e6vTOecYHyuYzGDYc8+UMoycQal6jgA4AeGO5/Rs2ZoJpxyr8xXxixcREanYTEZp59hXQPHx8YSFhREXF0doaGipvtfMH2J4ZdVfjOxen2nX5t10tCyM//AyfrKd45I0O5v8zHS1hPHOrWu9OicRd0npSZxPO0/VgKokZyQT4l6OkI3N7ggUWMyWPMcAGOdPYgqO9LgJXhjzOZN/e5LOVVpy+uw+7BjcXK0zq4+t5bJGAzkeWgNTRhpWWxoBvkHUjGjOM+uf5tLqnXj0sqepFuBY8vqf03sZ9O0QkrPdYPtgoqrZygm7YzEBEzCoage6VGvLp/u+ZneG49vpjqZAYmyJ3NfkBj4/soq/0hyrIPkZBmkmE40MC40Da9EqojmmwGrMj/mEs2bHe7Ux/DhJBidN9lw/d/UMGwNqXkpoYDU+P/gDJ8gZGDcbBvbMuZsMMLL9O6G1X1Ws6clsMZJynAsQbDdIMuG6xoWwGAa2MviHSoTNRq+kZKpn2EgJr8u29DNs9/OhdnoGDTPsrA3ImXEVbrORbDKRai44C87fbqdPkuMfYisDA0jJ5xyLYdAuNZXjPj7E+mR9hxRkt5NmMpGe+fOwGAZtU9PY6+dLotlMjYwMguwGf/v5us6pk57OW41uwjeiCTVaDeXvf3Zx9/K7OZntz71qho2WaWlE2sFisrDM30K/DAstq7Xl47PbSMbgdkt1rL6BnEuLJ9YaSNVzR9lDKqsDA/Ax4HabP9f7VueXpCMs9jXY6GNgmEwE2O10splp51eVepGtOZF0ClviSdYmHyPA7EeKPR1/u422PqEsMyUTZPKhm08Veldrx89pp/jm3B5iMwNbITY7C2pfRb0rn2PfH4uY/ttTrDenE2S30yUlnXQMqvgGMbhePzrWvYzDGUnM3TiTnbYEatgyGNJgEAMHvFTgn1dRleX9Q2HllVk5d+5cRo0aVahrlMfPJaVs28ewaIxj+561EJVLlu30upAaD9H/hv7PwPOZWXiPnXAcn9nUsV+3K5gsMOo7MFvg3CGY0xZ8AuBxR5CU/T/D/MHQfBDc+IEjMCYiIhVaYe8f9H98L8vKlPJ++V5SWgZYwJQO+EGa4f3sLfGO9ISTfLToFlrX7ErnPk97vGYYBov+/JJd/+ygdlgDRrQagcVs4ZfdnxIWFEXr+r2yrmNLx8fsk+c/itYcWcO51HMMajCQswdW8/mOufhHtuCMNZAg3yDubnc3ZruNuPgjzFw2hqXJR0lxu9ToFrdyX9dHAEhIS2DdweVkZKRSq0pTHl39AOdS4+hgM3NJlZa0rNaa3fYk0gw7zau1htR45u58j91GCv+yhHNzt0dYc3AFB1NOseb0DgA2nt3jeq/p//wCfmZ+PfJDnj+3H2LX8cNnl1PHHECTwCh2nz9IsslE7Qw7R30cwYeqGTZO+1g4YU8hyG6naVo62/ytfH96K9+f3upxvS1GEphNTP/7S8ARjEg0m0nL/Hn+bbLxd/Jhlh/N7NthNlHTDvHY2Wn2LL+9O82XtUYCTTIMfgnw56SPhfdPrXe9brXbqZ1hw2aCDLMPTWxwb+OhLD+7i3nxMaSaTdRKzyA6NZV4s5n1Af7sSnOsymQ2DLqm2Whi+JARWgu/8PqsOLbO9ZmH2ANpl5JKZGA1dvr5sTLpILXTMwi1hmM3m0lN+oc0DHx8A6ljM1jpZ6ZHlebUNgdwPPEEIzvdR43aXdi/bT47//yGX2xx7PAxSDEMeqdDjH8AtX2C6G2twaYze/jVlEqgYaeJ3UL36h3ZEP8Xq+3nyQCuTjWICq7FHiOFSEsgvf2qsvLMLo75WekR1YXh9QfiZ9ihVgcIrwtJZ0hc/zqBUdGYarTip89vZln6SepYAglJTaC5bxUu6TuTtKg2HD64irg/vuWh8zsIMQzub3gdjRr1Y+1f33Hi+BYaB9akV5NriKjRBgyDXT//H8+f30lzazXa1OiIr9mHbg0HsGPP5xw++BOXhDenedc7wD+Mw3EHWLt7AaHWcLq1uJ6UpNMcOrGF6GrtCGzaH9KTSQ+JIt0vkMC0ZDh3gP1H17Nk/Wyq+4ZwdY/J+Lcd5vrzblyrM9/+ex2/7/qEn7a+zR+pp+kb2ZHr+72Av9kX/ALBsDPlyCaofyn4WLkx5TzY0jBl7y1jS4d/9mKc+gPb+eP4tL8ZAqpwPXA9cGLfCnb9/j4d299BeMPeOf67GZ2RBmYfSDjuWH4+qg3jso1pB4wHjh76hVV7PqFTvSuo13KI47O0HMI7TQby1y+ziKzelrAWg8Fu8/hHbRPgmTbDHauJYTiWsL9I6LtHKZYm/Rx9qPxDIbJl7mP8ghzBJ19/R58qnwDISHb0i0p2fIlCSC24c5nneT6ZGXoZyWC3g9kMh35zHItZDMseg4HPZY1PS4S3+zgyrQbPKdGPKSIi3qdMqVyU5TeCH/x6gCe+3sWA1lG8cVunUn2vgox8txtbfBLplgC/BUMr/Pl05EavzklKRoY9Ax9z4WPQzy8YyAepRwi12Xmz7xv8mXqKdtXaUT+0Ho98fSPLz+9zjf2/Sx6lSsp5xux8FYDqJj9MPlbGdHqAp9f/H9XNflwR0YYOjQdR17DQovm1rDq4gi82zWFN4iEA6hs+nLWnEm/xzGq6Krgxv8b9SZrJREJmRonJcGRdODXwDaVJYE3+ij/IASOl2D+jvDRJt5GKwWFfHwYmpxNrslM/PZ0Qu500H39+spo54eNDl5R0Ekx2dmfrw1I/w8ac3i+ybvNrxCaf4oFLJnL62Bb2n/2Tlk2uIgIzO//8hq8T/2afPYVGAZEMbnId9+15lzNm6JgBW3wgOiWVZxrfyIIz29mbfIIHOz/Mtj+/JjXtPD8l7MecnszV6RauHr6Ivw/9zOTNM2ltCmBww0EYtjQ69nkG/v4JarUnzS+YNcse4Oej6zhmymBQRDSDej2JNfmcY9J1u3hkjsUf307SyT1EhTd0/MPDlsaZLe+xLGE/6YERXNn6VmrU7+X4h0WmtOO7+PvPrwlq3Je6tXPpR+IuNcGxVHhQtQv/A7Olw5n9jiXN/d3+/52WiOETgKkQ2Uz5Sk+BY1ug9iVg2MDi5/jm330KB9ZiDo7CVK3Jhb1XSchIA4tv/uUwhgFpCRdVoKa0VNaMosr6uaQAZ/4GixXCauf++ksd4cw+6DYOBvxf1v6oxZB4Cj4fCXW6wF3LPc9LTYDpmdf8X6wjCL7kUVj/uuOYXzA8ejjrd4qzB5V/GDx6CE7FwPo34F8THV8eiIhIuaRMqQoiNMBRXnEu2ftNxZ09pSx2C2AjFe9nb4mjZO3uxSOoFhDBjL6v4mv2LfgkNws3vMBze+Zxd/1B3NF7uuv41iPreGbNYyRgY0CDAdzc6ja+WjuNFae28KfJkSUXbzFz86qxrnM6WULYbDuPr2EQYLcTb7GwYOtrpKedh8x/l5800iA9jam/PQnAMVsGH57awIenNgDQfsN0tmWWe/kYjgbEB80ZYLHQzG6hfvJ5lgc5GkN/n7APMgNVte0mnm49muiwpsQdXseXfy3ilQA4kB7Pgbh4AKpl2Ii02dhj9aNZegaPVe/J7oAANp3cxh8ZcTRPt1PFMFhhsZFgNjEqoD696/RmwY532O5jJtLkwzkjg/2+PjwY2Izr299NYGQLUvet5sSB1TS8YSb8vcqxelBUW/AN4L5D69i082P+1e1BrEDcgbXsOvYrR87uJSA5nit6P0VQ4340adzP9XOs1Xootdz+jNp0vI3sxbsfthxCXPI/tLaEcmTNs9S+7DbMjXrziNuYlq1uAGAUOAILACYTzSOb82nz6xwBJPcSiGZXAuAH9Ln6Tfrk+zcnS2hUNKFR0R7HIgbN5qZ8zvGLak2LqNaFewNrsONREiy+joa+OSYURIkU//n6OzKH8ptCg3+VxDuVjFwavOdgMikgJSI5RTTK/3VnT0Nff8dzaC1HUCr+mCPzEXIPGvm69TJLT3YEpRJPZh1LS4Cz+6Fq5mIESf84nlPiHAGtV7tkvf+VntncIiJS8Sgo5WVVgxxZFWcSvR+UcibNuYJSRu69aKTkvLNhFksPLOH5Pq/SqGrzXMcs3/Uh28/FwDl44fMhPHzDIv5JO8fDK+6lV73LGRl9N9tObmPnPzu5sfmN7D7wIzWqNKZmRFO2bXyNJ3e/S4bJxAsHv2PpO9/Q3BJMk/ajeO/3tziT2U/m3T8X8O6fCxxvmPkv93DDxDmT4+9EhM3GGYuFzbbzAPyvyiX0bnIN/TZO5ndbPFgg0G7wVpsx7DmyjmfiHeVvAXY7U4wIfkmO5W9fMzutVldA6pbENG5sewdhPgFsO72bwGYDuaThAHz3LiXl7AEGx7zFcYuZ3j5VuPuyp2laszP+mTey1ZoP4O4u4+j44ySS0xL4Nu4PzmDj6X/9HzWbDuLIkV+pXr0tfoERdARuzfYzfTTpDInp56kaVh+A9t0mZDZrtZJ0eh8xe7+j/SVjMGX+gz6w00gadhrpOLntDR7XCqvXgz71emTtRzTi0o4jCv13IC91w+pTN3N+dYe+W/AJ2TNhggte4U5ERKTY/DK/THCW44VmZj/FH3WU8AGE5RKUMlscGVi2VEhPAqpCwknPMSd2ZgWlEv/JOr7ssazt8ycu+COIiIj3KSjlZVWDHf/oPZ3g/aCUM1PKZPgAaaQpKFUsPx9cxQubZjLlX0/j6+NHVf+qRAVF5Rj31+k/eGX3PGwmuPa7G2gdXI+rWgzn1la38XnMZ3z397c8c9l0Fu6c7zrng5SD+H1xHfawOmw8s5ONZ3ayeO9X7E48CsCS7e/ye9o/+BgG1/hFsSb5GBk+FkLtEG+GPb5m9pAEv78GQLPUNP6dauLpEB8yTCY6pBsMq3cllzS5mohanRj2yWVk2G3MbzOeZ/Z+wkrbOVoYvgy56i0sPn4M2PQ835GIyTB4oOlwojuPI7rzOHYsvp1vTm3i1tqXc9WVr3DV2QMYKfG88McHvH/oB8ZWvYS7r38WgqsDeGbstLoWf2BOVAt+/vMrRvSeTlBARI6fnyk0is7XzQWgp2E4gkqZZVR1GvTKMd6df2AE/rhd05KVfRZYtTEdqt6f7/kiIiIXPT9HVrMr8ym0puM5/ljWynthdXI/1zfAEZTKyCy7dwaewupB3CE4vhPq93CsABh/LOu8HV9kbeey4q2IiFQ8Ckp5mTModSYpDZvdwGL23jK4hkdQClJQu7HieOSniSQYGdy21JEtU8O/Kt8MXUx6Riq/HviBXk2vxWqx8uyqidjc/rh3JRxi16YZ/H7wR1ae3Ey6Ca76ahAGjkbSNwU15uOkv3k35SCkHHSd5wxIAfye5ripyzCZ+Cr9BPhYaGK38PawH3h34wz8MtLw3bucA0YqGSYTDzUaSp0BM+i0fzUZtmSaNOrv0Rdo0W0bsZlM+Fr8eCb6FtpvmEmfNiOwZGYQPXbtp/xrw4t0ir6dqBpZK/NM6f8mA49voHvN7o4DVRpgAibWnME96dMI9A0s8OfYunF/WjfuX7gfusnkWNlHRP6fvbMMc+Js2/AZWXdjDVkWWNydUmiBllKDt+7u7va2/eru3pe6uwKlFHd3WWBZd3eLfT+eTDKTZA0Wsm2f8zj2yGQszySzSebKdV+3RCKRHBtC7YXoIfYf3tROqSqRGUl4T8/b+gRAY6XdKYWzfK/PibD1U8jfBm+MFEHqapprndOuyyQSiUTyt0SKUl4mMlBc3NtsUFHfTHSwXxtbHD0cEpRVuEaadVKUcqXR3IjVZtWIKlU5G/mmeC3D4sfTXR9ArUvXwqLGMm7+4TSKmyrI1lmYvGMuw7ofz4a6HHytNh6PGM0f9ZnEVeTzQ5AfC0u2OErolFfgBF0ID577K8mLbuepgqUA+NlsPBc8hJqSvQwngAf8GtlnsBJr0/NEyqW8sfcTynU2XjvxVaKDY7n/xJfEzo4rF62XbVYYNBuApN4neDxevdEPRaIK8g/jiilPapYHh/fitJNfcdvO1+DL5ETPuTrtEaQkEolEIpF0cab/H/SZDv1PFfcVkaqmoH1OKRCZUhaz6LwJ0He6EKXS/vK8nZqmmsMfu0QikUi6DFKU8jJGg56IQB8q6k2U1XpblLJLIHZRqgmRM6VrrWvTPwCT1cSXe7+kuKGYO0bdga/BlwZzA9/t/45An0DOTRFt1H/c+xXPbn6RZpuZHhZIMQQSHhjDnzUZ1Bj0hOz5jIuCtd22oi1WSg16NjeXOoSm1U3FrD70IwAPWYI4/fT/cbrRDyoymTr/Ju41Z2NBxwWBvfmqPp1ZfnHcf9onAJx/8uvkLb2Hj3P+5OYBlzJjgjP2+qGclTyz9jFuH3MPk/qcyqTxt2NrrkMXEK494MBIGDznaDyVEolEIpFI/i0ERWu/TyiiVOlBp4vJU6YUgPIDlaneHmRuE+V4Sce3//Ebqzo6YolEIpF0QaQo1QWIDPIVolRdE+C9DkhOp5QQxmw6HTWmGkJ9/7ntn80WE9f+eBpbGkQgZ0p4CsfFT+SKeeeT3VQGgK/eB2vhLh479J1ju2wDZFMP9VlgEF6iGpuJ92v2AfBY0n+ISxzLsIRJvLz4NnZUpdHXJ4xhAXG8VLGVQJuNSwwxnHXxr2C0C5ERSUy5ZAELGspoMDfQPaQ7d5qbHaVyCndNe4kLa+92y6ka0WMK352/1DnD4OMuSEkkEolEIpEcDZTyPUWQ8g8D/xa+Q6qdUkrIeWC0+OFs1osi6DwkHlY81/LjSaeURCKR/COQolQXICrYj0MldV4PO1eCzm0Wf7qZzRQbjWRWZjCs2/A2tjw61DbX8tKmFzk1+TTGxY87rH1klR/kpRUPcMOEBxgcP9Zt+eLljzgEKYAft77NqtonyDaaCLBaadDreXjNI47lVzbC5UmnkRbVi/2b3qHYVM3ImBFsNlXwha0CgCgrzJpwH4H2FvePnfml5jFPL9xBcHA8PvaQb1eiAqIc066ClEJ8cHw7nwGJRCKRSCSSY0BgNOh9wGoS91tySYFWlFLypJTvReOvE7cVmVKUkkgkkn8BUpTqAkQ7OvA1eXUcSvleA370NglRKqM81Wui1FPL72V+wWp+TPuJXZfvanXd6opM5q15kpNH30p0/AjH/HeX3s3yugxqlt7Jw6d8QPqBecTofIgbfC7zd87l9dz5AJxbXcNPIcFsbywEIxhsNj4pquCdsEBWBIovTgNsPtx21RqMPgFEAeMHnA1pS2DwHBL3fMcXO0Rm0809ZzkEKU9ExHnn+ZRIJBKJRCI5auj1EJYoxCRoXZQy2kWprLUi1BwgKEa7TkgCIvvAJeM0NFGEqcugc4lEIvlHIHupdgGigkT5Vlmdd51Sykd+g82fePtQ0ou2e2s4LMpf7Zi22WyYrWbMVjMbCjbQbNE+V58vu59nyzYya+HFFOWsxVa4m8b9C1hWmwnAFnMV/5l3Lncf+JTL9n/ArB9n8nqaaCvsh45bzvmFafUNjv1d3/8iBt2bzet+fbijvJJR+iCemvEORuWXPRC/6I24EHwC6D/sUi4wduMMXRj/mfL40XtSJBKJRCKRSLoqwy90TgdGtbye8n1q84eQv1VMu4pSRl/w8xBrEZksbi3NYPbuD7oSiUQiOXKkU6oLEGV3SpV2lfI99AQ2hwAmMioOeGUs9aZ6TKp89RsX30haZRp9QpNYW7iBm4Zcw42jb3cs31KTDkCjXs8ji28luLmev/yNjnBxhR5mK6V6aNDrGdTURKAxkFnj7yIyfgT/FzGGk3NXkjL8cpInPgSA4bLfubq5lqsDI1sdr06v578XL+mcg5dIJBKJRCL5O3Lc7bD8WTEdkdTyep468eo8/FbuE+DuiIpIgsxVYrqpxpnN2RpNtfDngzD4P9BnWtvrSyQSieSYIUWpLkCUveNeeZ23y/eUWx3Wpm5AHhl1+V4Zy6ZMrcCzJn8NAEX1RQB8v/dzjSiVYW10+P7W6ZvB33lqJzebSPf1IdJi4cvjXwb/MA7s+YYxkYMxDL9ABHECYXPe45Ts9dBvpvOBjb5gbF2QkkgkEolEIpEgRKTrV8KWT2Hs1a2v50pvD533jP7u80LiwDcYmmtFB76g6JYfx2YDnQ7+uA+2fwlbP4PHZNc+iUQi6UpIUaoLEB2kZEp51ymlyFI2m54aUw8gjxxzLSaLCR+DzzEdydIDP7S6vMTaxG+fzSAppCcJUx+kVA86m40BFh37VGf1cfUNPKaLYWujiSFJ04lImQXA+J6T3HcaEAH9Z3XmYUgkEolEIpH8u4gfDqe/0vo6rqLUhd9A35M8rOfBURUUI8r6mmuhphD+uB8aK+HKP0D9ffX7K6A4Fa5bBnt+7uhRSCQSieQYIUWpLoDilPJ2ppRVmdDpyDElE2RdS51eT1Z1Fn0j+h6zcdSb6llYus1tflKziTfLangoIohd/n7811YE1UUk/XQm+BjpZbFxTuwEnizbAMCbhSWc0NAAF7zBqQNOPWbjl0gkEolEIpG0glps0hsh5RThaHKl+xgo2aedFxgFfqFQUwCfzXZ2+ys7BN0GiGlzE+z5BbBBzkYw1R+No5BIJBJJJyCDzrsASve94upGr45D6b7nazByyJrIwCYhkm0t3HRMHj+vNo/Kxkr+3PAq9djoaTIzzuTsuJJkDCbp7kNMSjxOs12mj9BWBxiCOHnEdURYLCSZzBx3wxa4dilIQUoikUgkEomk6+CjKssLiPQsSAGc9ASMvgLO/cQ5T3FKgVOQAqgtck5X5uAIptj6mXO+ziBK+iQSiUTSZZBOqS5AXJj4YK5rtlDTaCLE/9iWyikoH9F+RiOFRHJpk4XNAbA+azHnDbyw1W07SkVjBWarmZhA0Wkls/wg5/x+NtGGQAKb68EA/4kYyqHGUjCXAJDoHwU+/px53MP8PP9CTkqYTP9mE48WLQegT0Ac4d3H8fvIBzH4h+MTlihaE0skEolEIpFIug5qp1RARMvrBUbCGa+DydkhWSNKqaktdk5XZDqnd6siIWwWEY7uH9r6+Gw22PUDJI6CqD6tryuRSCSSI0KKUl2AQF8jof5GqhvNFFY1ek2UUsr3fH18AB29rAlAFRtKdmCxWjDoDUf8GPvL99MjuDsXfzONGszck3wObx76AZPBlyZs5FnqwAChVhtnT3+Bj5fcDbV2USq0JwA9I/qw5JKNYodNtWS+N4ifQ4I5OXIwAGEjLz3icUokEolEIpFIjhLqTKnWRCn1+mE9oaEcwnt4FpXUTqmKjJb31VDhefumGhGcHtYddn0PP10rOgL+X0Xb45NIJBLJYSNFqS5CXJg/1Y21FFY30i/Ww68/xwDFKeVvFOJTjfE4gq3zqKaJ1PJUBkcPPqz95tbkklqeiq/el5uX3syA4J7k6MwAPJzxgygitWnztG5PmEZEeBIxQXFQewCAxIgU9537BXPnSW9yx5ZP0U2657DGJ5FIJBKJRCI5hqidUoHt7HJ8zWIwNwiXlNopZfAFS7OLKJXZ8n4ayiGil/v8j2dB4S64Yzfs/0PMs1nd15NIJBJJpyJFqS5CXFgAB4pqKajyXq6Ukinl5yOcWht9JjK24QeWBQWyPnvZYYlSJquJs36dQ4OlyTEvtTbb47opTc3MCehBqa8fZ097EYCYkO5g/46RGDfc84MMmo1u0OwOj00ikUgkEolE4gU66pQCCIl1TvupnE5Jx8OhJZCzAb65GPK3Q3Wudlu/MBHpULxXOKVcsVqFIAWw7zfP60gkEonkqCBFqS5CXKjowFfkRVFK+S3IzyhOi0xrDP8xhrOMZrZmLeXqUbd0eJ8L9n2jEaRa4tbySqb7daPPJX9pwi5jguIc04nxYzv8+BKJRCKRSCSSLobxMEQpNQZf53TvKU5RqiVCYkWgOngWnBrKndM1hVKUkkgkkmOI7L7XRYgLEx/OBV7uwAdOp1RDs4XRiZMA2FadjrWDFuYl6Qt5ffPLba43UhfIdcln0ueUV9y6r/TqdypGINEQRPDhfGmRSCQSiUQikXQtDscppaauxDkdN7Tt9cN6QEC4mFYLTpU58OoQ+P1257ySVK1I1RKmRmisdt4/sKj1ssGOsvM7+PpC7WOoydsCX54L++Z13mNKJBKJF5CiVBchLlR04POmU8pm14MC7KJUXbOZ/v1nE2i1UoOFgxUH272veft/5I5V91KCBV+re+vdAKsVo3328G4jYfbbkDzVbb3ooFg+O/Ur5p75fccPSCKRSCQSiUTS9VCLUu3NlFLjG+ycDo7VLhtwunN66gOiW9+sF5zil1qUWvokVOVAqkrYKdwFDZXO+zb7F9acTfBSCuz+Udz/6lx4eQDUFEH+NnH/x2vEsvQV8MXZUJ7e8WNTWPkS7F8ABxe5L8tcA3OniWUb3jv8x7DZoDLbeYwSiUTiBbqEKPX222+TlJSEv78/48ePZ+PGjS2u+8knn6DT6TR//v7+mnVsNhuPPvoo8fHxBAQEMGPGDA4ebL+g4g3iw8QxeDNTymrPlPL3FeV79U0WjL0mM7xZhJJvPbSgXftJr0zn8fVPAnBuXTMrJz5PD4tYdpwuiGtjJvDY4GsZFjkQgLGDL2p1f0NjhtIjtEeHj0cikUgkEolE0gVRB50fjlPq+Luh38lwwVdaUUpvhDNeh8g+Qpw68UG4Nw2i+6pEqUrn+tX57vuuKYAmlTvJbP9uPu8OEab+w1XCEZWxEkx1omyweJ9Yp1Q05+GzMyFtMfzxQMePDcBicgpanjoJKsIYQFWu+/L2suMbeG0orHvr8PehRopbEonkMPC6KPXtt99y11138X//939s3bqV4cOHM3PmTIqLi1vcJjQ0lIKCAsdfVlaWZvkLL7zAG2+8wXvvvceGDRsICgpi5syZNDZ6vzTOarNy85KbueGvG6hprnHMj1WcUl4s31M+RgJ8RZ1+XbMZfPwZHSBynf5Kn+9Yt6m+lNStH2KzmN328+XWN2nEwviGRv474w2CBpzGJEWAip/AbafO5dRxd/D0ia/wygmvcHz344/ugUkkEolEIpFIug5HWr4XEgsXfw8DTtM6rYJiICgabt0CF3yp3SbQQ6aUJ1HKFVODuK1XlfRtnOuctjQLtxFAYxU01zuX1Ze1vX9PVGSB1WSfznRfrj4GmxX+/C98dT5YLR17nNxN4jZ/22ENU0NdGbwyCObf3fHtlNehrlQKW/8WmutFyau5CVa9DPt+9/aIJF7E60Hnr7zyCtdeey1XXnklAO+99x7z58/no48+4oEHPP+6oNPpiIuL87jMZrPx2muv8fDDDzN7tujI9tlnnxEbG8svv/zCBRdccHQOpJ3o0bEqdyU2oKmhkhBf0dJWcUqV1TXTZLbgZzQc87E5RSlRvtdosmKyWDkz+QzeS/uETY1FDP10KAPD+tJUmUG6zsLt2cu4Zs4Xjn00W5pZmLscgKtCB2JImQnA7bM+YOjBX5g10Pn8dw/pTveQ7sfk2CQSiUQikUgkXYQjdUqp0au+MwfFiFuXjFLN49SXQ/Z62PIplB9qe/+mejAFQJ3qB3O1s6i+3ClKAVSqfix3LS1sL4rjCqA8A7Z9IQLdw3uKeWpRqrEKNrwvRKyyQxCT0v7Hqc4TtzVFhzdONTnroSYf9vwMp7WdKQsIAeqDaUKEG3UZbP0Uzv0EBv/nyMdzpFitULANYoeA0c/bo/nn8ce94ryO6gdl9oqmx6q8OyaJ1/CqU6q5uZktW7YwY8YMxzy9Xs+MGTNYt25di9vV1tbSq1cvevTowezZs9mzZ49jWUZGBoWFhZp9hoWFMX78+Bb32dTURHV1tebvaGKw/wJgUTmlwgN98PcRL0d+pXfcUkqMeYifHwE+4gM+u7ye+Im3Myewl2O9fVVppOvELzHvVm4nJ38LALaiffy67EGqbWa6mc2Mn+D8pSTEL5TZQy7DV90tRSKRSCQSiUTy78NHFb2hFqiOlMjklpepM6V+uxV2fOW+zsAz3Oc114ucKat7dYDYn4solbXGOa12hHUEtSiVtQZ+vRm+Uv2wrhGlKp2uqqYOXsMopX+1hW2va2oUYl5LTqbKHHFbXwZNte17/OZauxPMJgQpEELFscRqEXlhZpdu4RvfF7ldv3a8+7ikHSivc1knR+zYbKL8VfK3wquiVGlpKRaLhdhY7a8IsbGxFBZ6fnPs378/H330Eb/++itffPEFVquVSZMmkZsr3lSV7Tqyz2effZawsDDHX48eRzG/SKfDaH8zN5sbVbN19I4WoY3pJe18I+9klKBzo0FP325iLAeLasHgw3WnfkBSQCxTzHpuqqhkdl0DfS3QrNPx/qqHeWPJnZw4/xyeyBNhjKeZjBiSjrwszyYtvBKJRCKRSCT/LHyCnNNhnfC9e/r/QWh3OOmJltdRRKmc9VrRR81wDzmnpnrR6Q5Ep7+QeAjvBUa7sFZfphWl0lc4pzsiElXni256mz/2PL5i54/wGlFKTWMHnSaKKNUep9SX58BHM2Hfb56Xt+QWaw1Px+EbpL1vMUPBjqNX1rftC/hwBqx+VTt/9Wvidtd3R+dxJe6Ym498H99cBK8ObrlrpaRL4vVMqY4yceJELrvsMkaMGMHUqVP56aefiImJ4f333z/sfT744INUVVU5/nJycjpxxO4oNZMWi/YfLzlGvAmnl9Qd1cdvCeWtXm8w0i9WEaWEmys+OJ7fz1vM21dt58brdvDUlZu4b6AouVzakMvc3MWUGfQEWq2cU13DDf0vAP2RnV5786sZ9tgiXlvcwhcHiUQikUgkEsnfD70e7s+C+zK0rqnD5fi74K49ENGr5XU8lQlGp2i79YV1h9FXatcpTxelfgADz4S7U+GOnTDtETGvrsRZBgciAF2htQtjqwVWvAgrXhCCy755opvevDtg+5ctbwfasHY1TTWe53tct1a4rACaa6C5hesPqxVSF0DmKnF//0LP61WpRKmK9opSle7zXAWydW/C+1O0OV6dieLUKXVx7ASEH53HkwiCPUTxNB+hMcNmg0NLRUOCktQj29exoqlGNETIabnR278Br4pS0dHRGAwGioq0bz5FRUUtZka54uPjw8iRI0lLSwNwbNeRffr5+REaGqr5O5oole9qpxRAn2ghSh3yllPKfmvQ6+nXTWRdHSx2GYtOJ4IiAyIYPuhcjDYbNXaH1TAzrDrzN/5v2qsETrn/iMfz5YYsaprMLE1tOfReIpFIJBKJRPI3JCBcG1J+tAlNBL2P8/7sd+CWTTBGJUKFxIs8pIu+d5YC/nAllOyDwGgYriqhU8ZetEdb2qcIPSCcS7t/gqK94n55Bix5UuRQ/Xg1LHsKlj0NxXvFhXRbmBqEmNXUgiOqQ86sPO39Gg8VJRYzvH88fHOhagwtiFeVqh/1O+qUiuwDF35jH0eBdh1FBNv7i3OeuUnkZ7VF9gbx+rRnDOrXDcA/rO39Sw6foGj3eR0RVT3RVOPslllXemT7Olasehk2vAsfnuTtkXgVr4pSvr6+jB49miVLljjmWa1WlixZwsSJE9u1D4vFwq5du4iPjwegd+/exMXFafZZXV3Nhg0b2r3Po43Brv6YXepd+3RTyve865QyGnxIsTulDhS1/OYQGNaDIRbnKTQ1pA++UX1EOKHhyDL0LVYbf+4RH46FVd7vmiiRSCQSiUQi+RsTGAlXLoAeEyBhpDM/KrKPap0oEZyecrIzNF3hwq+dQeMAAXZRqqVSQBBi1g9Xwk/Xivu/3gKrXoKX+olAcIX9fwjHFUDfGZA4Wvy5UlOgLdELd3GGdaRkSSndU6j18CNweToU7dbO89QNEKBKJUq12yllF4SCu0E30ambmkJnqZ65ydkZMGejM6vqt9vgzVGQu7nlfZcehI9Ohncntd6VUHFrubq2/MOd041V4q89QlhXx2ISDj1vO3MsHkr1PDmlmuuFONoelP8hgPoWRKm6Mlj08LF9LasLYO2bnstVXR16/1K8Xr531113MXfuXD799FP27dvHjTfeSF1dnaMb32WXXcaDDz7oWP+JJ55g0aJFpKens3XrVi655BKysrK45pprAJHNdMcdd/DUU0/x22+/sWvXLi677DISEhKYM2eONw7RDSPCWmSxupTvKZlSpd5xSilB5wa9weGUSi+tw2yxtrjNmCBn97zjkmdp92e1YbUeXv33xoxySmvF81Na29TqGCQSiUQikUgkkjbpMQ6u/hOuWw7+9sqIyN5w1gdw8Y/a6AnXkPKIJO39wCiXnXvo+KdQelAILVmrxX3FWRXUTdweWOh0dgw4Da5dKv5mPqPdT3WB88LWL9TdadYRp5SbKOXBKVWeLm67DYYb7Q2jPIlSzXUiW0vBk1MqewNkrNLOU9xJ/uHOci5Lk3N+wU5xH0SYu1JCWLBD3LoKZmrU2VetCRCKyOfqlLKphKyqXPj6InhrjHC7dRSLGX65qX0liFYL7P1NW8ZYWywyrjrD/bPzO+HQ87Yzx5MrSh2Qb26Gj0+FZxLgtaGth+fXl8MXZ8O6t53zWnqu1rwmBKI3R7UuVnYmP1wlhLDfbnNf5ht8bMbQxfG6KHX++efz0ksv8eijjzJixAi2b9/OwoULHUHl2dnZFBQ4bZwVFRVce+21DBw4kFNPPZXq6mrWrl3LoEGDHOvcd9993HrrrVx33XWMHTuW2tpaFi5ciL9/J9SsdwKKh8hs0XZ5UDKlSmubqao/9l0DlKBzg95I94gA/H30NJutZJbVt7jN2IRJAERZLAwcfL5jfm5FPWOfXsxVn246LGFqwS7na261QUmteK7MFivr08ukSCWRSCQSiUQi6RyGnQv9Zmjn+bgEbqudM+AuCMUOcU7HD9cuszS5u3oMvnDx92I6d7NTYFE7tMbfALduhV6Txf0alSgVEO5eYtZYLZwwa95ou2zNrXzPQ/mgIkpF93OKco1VQgRQU+mSx+vqlDI3C9fSp6fDwb9EjlZDhepYIkS2mPIcK6WEOeu1+/n6AvjmYqeApnbGuJI63zlduNN9+b7fYflzLTul1CJIZQ7kbwWbte3nVWHvr6JrorkJMlaInLAF9whhsTUO/AnfXQp/PuSct/ZNWPx/WtGlPRTudj8utaho9eL1lCdRStWZnsJd9k6WNqjJb12ATFss/jZ/6JynFknV5GxwTisdHztK2mKYOx2K97Vv/ey14tZTkwBfVffRIy1fbA9bP4NXh4hzowvhdVEK4JZbbiErK4umpiY2bNjA+PHjHcuWL1/OJ5984rj/6quvOtYtLCxk/vz5jBw5UrM/nU7HE088QWFhIY2NjSxevJiUlJRjdThtYlCcUi62xSA/I3GhQjg75AW3lPK2ZDQY0et1jOwhAiHVApErE0ddz/0Nel4MH4teFQj4zvJDlNU1s3x/CT9uzW1xe09YrDYW7tH+WqOU8H2wOoML/ree91b8A+yzEolEIpFIJJKuidop5RMERl/tctfgdLWoNcmDI2LX99r7o6+AhBEQOxSwOd1FinsKRClhVB8ITRD3q/O0Qo6rKNVULYSLvx4R4eCtUeUiSnl0Stm/b0cmi4vnYHt3c1e3lFK6pwh5lVnabnlqAezLc0SO1vx7tMcCItMLnLlSioCg7uidOt+5XUtumKpcZ8dEcDqrFKxW+PYSWP4sFO0S8xqrRKmY0gFOXUpWsEN0YQTRJdETdWXasPhlz4rOfhmrtKWNq19tvUuisq66m6FS4tXe8G6rRZSHvnecCM5X46/KTq7u2DVap2G1ei7V0wiBmdplZWkt768qx31eS+eGOjtt80ct73PrZ/DD1WDyECPz5bmQtxm+Ot99WUexqYRBT7lunc3O78TztX/B0X+sDtAlRKl/G06nlLsbSnFLHXINGD8GODOlRBT7+WNFi96vN2a36EzSBcdwyQ07GHuWU2kuqGrgh83ON7mnF+xjS1YLrWs9sDmznJKaJkL9jQxJFG+cRdXCKbXMHnr+5552hEFKJBKJRCKRSCSHg1qU8tS5zz8cdKpLqT7ThXjScyIMmg1Gl/K/PT+J20m3wh27Yeaz4n5Mf+16ngKgQ+1ijbp8zz9clPCpaaoWpYDgLBHMWgfz7xbuptWvwdKnxLxCu1DTbbC4bc0ppYS+R/QWt66ilCKg9BwvnpPmWm1guasrC2D3D3BwsZhWftgOidOOJX+7uD3hAVFyCTivWPCcgwWw5RPtfVenlKccMKsJXh0E700WgpratZK1xjld40GUWvc2vJgMz3Z3lugpLq7aQm3J38b34fnews1m81BN4qmcUBEsy9LadjeteAGeT4LvrxD31dlloD0ub+UZqQWp4Rc5xVX12Fzddq2KUh7OL9dMqa2fw0/XaUtLyzM8vwYAv90qztGN77svU4Sk9gb6q3F9/dQ5cK4h/4fDgT8hc03Ly5X/6daeTy8gRSkvoDilzB4C3vrEKLlSxz7s3CFK6YVsdsqQOCICfSioamTFgVbssS58vTGHZouVMb0iGN49jMp6ExfOXc/+Qucbjc3+BlBZ38zn6zKpb3YG2M23O7NOGhRH93BhacworaOkpokduZUA7M6voqLOQ0BeB9mSJQQwiUQikUgkEonEga+qfM+TKKXXo8mRihsKV8yDqxaCwUfrSAGnSNFjAoT3cDYFiuytXS+4G26E2J1SNfnOcixPTqnGau1FrtUKH58Cmz6AL84SJWArXxTzCncJAUnpKNhappRDlEoStxUuuUqKOBSRBDEDxHT+diFefXgybPpQu343e+xK8R7nsYDWKVVf7nTAxA0V4fTqoHnwXL7XWA0b/iemj79b3Bbs1IoPuZvctwMh+JXuF4+rFk6y1zmnPTml0leIW5tVhNZbrdBgL3GsLXZ/vmwW4WZzFYzAKUopr7PN5hRoSg+IfKUvz/U8fhAuNNdsscpsZ/moOmy7s0Wp4lR4axxssAs59eWQu0UcQ9EepwtNEZ/0RpjzjhB0QfucK4KPn/0cb01E8SR6ujqlfrsFdn4rpgMiAJ14vLZyujwJPOr/O7PLdaTNBnlbRadM5b5avK7Khm8vhU9OF1ljaiGurdLOtqjKg6/Og09OdS+xBTEm5bnqYgHrUpTyAj4tBJ2D0ymVXnJsnVI2mw2r/XNVb3dK+fsY+M9IEWT+6/Z8Gk0Wh5ikZvXBUt5aepB5O/Ox2WzM2ynerC8a35Ovrp3AxOQoms1Wrv1sMzNfXclXG7I55711TH95OQ/9vItHft3DfT+IXzCKqxv53u6yOmN4PHFhopzx+YWpjH16MY0mq328sPaQtlbYZLHy8ZoM9ua3L+RxY0Y5Z7+7jks/3ODxuCQSiUQikUgk/1I0Tqlwz+uow7Bd13EVjBR6TtDeVwQfAKO/5+BjT06pgAj3nKumam2WjlpoUrrYacYyEbqPFdO5m2HPL8L1Y7MJAUFxQCljVAS0YpcyMuUxA6OEeKQ83rYvRAme4hLre5IIcD/5Ke32DlHKXh5YU+h0N0UkOZ/LMFdRqlSIPuZm2PIpLHzQLspUQXQKTLlXCB8N5dpyuJZEKYWivdpSMrWRwJMopXZPVecJl5PipqkrcYp7F3wFD+bB8AvFfXWJoYLaKWWziefWpDIrVOfCwUUiO8wVVwEEAB18cY4INq/M1mZMlXWyMLH1MyHq/XGfKBP74Sr4YBq8Pkx0QVz4gHhtlVwuvxDQ6cDPfs6rn3NFiOs7TdyWHoSd38N3l4lcMhDiz5InPAfZq/8PXN1JCSOdJbGegvvVQlOJh9woP9X/tmtp6P4FMPdEEWwO4v9VXaK35nWRLZW5Sjy2WpQ6UqeU+nz65Ub46XqtOKU+1rK0ll1iXsDY9iqSzsag85wpBZBsd0odKjm2TimrzemU8tEbHPPPGB7PR2sy+G1HPgt3FzIwPoT3Lh1NfJj4oN6dV8UlHzoD4zJOqiO9pA5fo56TBsUS5Gfkv6cN5PQ3V5NdLmqxH/p5l2N95Tjn7SzgubPNvLbkIA0mCyN7hjM1JYZ9BS0Hvq04UMxpw+Id919edID3Vhyid3QQy+45oc1j/mGL+PUltbCGlQdLmZoS08YWEolEIpFIJJJ/BT6qAOKWRKnWcC2tA4jq616epxalgrqJi3RXQlrKlHJ5jKpcrXvIk8vDL0yINgApp0CP8aIsryIDvr9czI8bCqGJ4mLaGOAsq0uyB64f+FNcuBv9xH2lVCowWuRObf9SiFKuxxI/HBJHuwejK+KawymVL9xNAHHDnOuFdddsRsk+eCkFBs8RweVWZ+UF0x4RwmLiaCGMHVwE464VyzyJQWoKVV3/XPEkSqkdLlV5WiGgtgjKM8V0ZB8hwETbs449uVkUl5OlWThbXMvY1PsN6y6cYQvugSHniNdNEUAGzRZh69iEUARQsl9bFnikbpmDiyEq2XkOq8W+xY87M6sUQTBztSgvVdw6fqLbO772W3XQubJNn+nCUVaSCj9dI+ZV5Qlhae6JLY9N7YBy7azoEyjO+eo8IdT0GKtdrn5dKrOFUOgbLFxI6LSCV85G0dVTQRGpCu3Xu645Ueocq4ZyravtSEUptfCslPEmjIQJN4hptXjXVC3eKzw5M72AdEp5AaV8z+RB4e5jd0plldUd0w5zFqvNIUoZjE6tckSPcCICfQBotljZkVvF2e+spahahL4t2aet5X75L1GjPa1/N0L8xXZDEsOY0g7B54WFqXy7SXxIPThrIDqdjrgwP7f1RvUMB+CnrXnsya/CZrOxv7DGEX6eUVpHTWPr3QttNhtr0pxvKHNXprc5vsOhsKqR2iZz2ytKJBKJRCKRSLoOGlHKQ/memuj+7vP8PDieXF1SoBWlXEUmhag+4rY6z1nW5Kl8z7WcTbkwVTPmSogZKI5v8BxRhjjmSpft/oT0ZfbH7usUl3pOEgJZU5XTrQJOASAoGhJGien8rc5MKIWwRHEbmqjtbqg8v4pYk7/d6ZSKb0WUAsAmRAu1IDXxFhh0ppgecLq43fe7uG2qgeK9HvajImej+9gUqvO1DhNzkza/qLlGW65XvM8utuic5Y+KMOmpQ5w6BL2xyj3w2zEOu4Cx9k1RlvbVuc5g+ogkOO8z97FX5WrL944kV6hoD3x5NvzvROEEMzVoRRF1iHoP+3lfdlBbaqeIUYo4pTilrFZn6aYihKqpyBCuuNYwNwgX3beXOnO+FEZfoSpFzXTf1vV1yV4vhMy0xZD2l9a5lr9Vu26V/bgV8dJTWaxCXWn7nFKLHoEvz/Mcuq7GdSygzU8rd7ne7UIlfFKU8gJGR/meu3CSEBaAv48ek8VGbkXDMRuTxWrDav/AUTKlQHQyPM8eeG7U6+gdHUR+VSPXfLqZ8rpmVqeJD7/HzhjE4ATxQRrsZ+SK45I0+3/2rKHcdVIKt07r2+IYPluXhcVq46RBsYzrLdrsdgvxdywfmhhGYngAr50/klMGx2G22rj7ux3c8/1OZr62UrOvbdmVANQ1mfluU45DRFPYV1BDXqXz+V2dVtpql0EAq7V9Fsc9+VXc+e12Pl2byZQXlnH5Rxs9rvfYb3s49fVVPPvHPhpNFo/rSCQSiUQikUi8gLp8z7VMTuGsD4SodI6HLl6eyqt6TnSfF6T64Vbp8OZKYCSEie/jZKwSt55EKVcO/Ok+LyRe5F7dusWZ0TTiEgiIdK6z9zdY+ZKYHnmxc75eD0POEtM7v3HOV5fvxQ4WJXP1ZVDnEkQe2t25n2jVNYHiROs+BnQGIUik2ruDxQ13rudRlFIx8Ay46Ds46QnVPLsolblaOGByNmjLqTyRa//ubvCDfjO1y8wNWmFHERIMfs7zRF3SpQhgoQngY7+uCYwSt/WlkLNJBG6vfRPenax1sxRsh33zPI9REXeqVOKPsm1kH+3jKFTlasv3qvPchYntX4kcsA9ntt4lsMh+XI2V8PWFIlfLahLnl7rMMqovXGrPznJ93hUxShFwN38Ic6eJ47Y0i3NBOe/V1Jd5zuNyZdHDolRu+TPifmgi3LAG+p3Ucj4aOPPAFAp2CqedJxRhrypXOMcUMa2mQHRBdA3jVzdAqC9zCTr3IGBZrbD2DTj4J+z4GrI3aN9bGqtE6a3N5hQFR18h/gddj89VlOrs8s0jQJbveQGjvdbXU9C5Xq8jKSqI1MIaDpXUkhQd5LbO0cBkcYoiRqNBs+ymqeJD49zR3fEx6Jnz9hp25VUx6/WVlNWKY5g+MJZzxvQgp7yevt2C8TFo9c7E8ABum96PhmYLh0pqSYkN4ZO1mVTWm7jvlP5sSC9nxYES9Dq4/xTnr009I52/Un1/w0T8fcTYnvrPEDZmlpNaWENqYQ16HfTrFkJVg4nC6kY2Z1VwfL9o7vh2O3/tLSI62JeTBsURH+bPWaMS+WO3+ACZMTCW/nHBvL3sEP/9eRdDE8MI9fchNMCITmU5XnuolMs+3MiIHuE8MXsIfbsFU99sJjzQpT0w8O7yQ8zbWcDP28SHxZasCqoaTIQF+DjWqWow8cnaTAD2FlRT32ThyTlD2vlqSSQSiUQikUiOKm0FnQMMO1f8ecLk4cflHh6cUuoSN3WmjitxQ+0B3HZnRVCM86K+JdTlUApB0UIEUpckBkXBLZtF8PPrw0QYMwjRasxV2u2HXwjr3hJiScFO4WRSi1I+/sItlevhR1nFKQVCzFPEG+X59QsRx1mw3e5G0UHCCOc24R4ECjUjL4UUFxEpMll0GCzeI8LFA+0upW6DWnZMKWKMXzD0na4V4EAIDoF2EU9xLIXGixKvxkr3bn/KOBQUsShvC3w4o+Xj+foC57QxQAhiCuvfFRlO6nNACWRXnHWB0Vo3lJJ3BUIgrM4VItSM/xPzGirhl5twhLps+VScc2Ouhm4DtGNTzhEQpXU/2kvrek4Qjh5leXQK+AYKscrVCeQo31O5CvO2iDwkECKkwQhT7hNd8C79GT6bI0rPPJg7HPiGiHM/Q2taICQe4uzXW0o+WnucUhWZnl9TcHbw+/FayF7rnG81ixI+JWB+6Lkw7ALx//LXo0Jgqi/Vlu9VZgsRSq+6jla7H+fdIW5PeAhOuF9ML3wItn8hzv3GKjD4wqwXxWN9fIr29VdEqYAIe6h/1xGlpFPKCzgypdQ2UxV9uim5Uscu7NysCoDz0ftoloUF+vDgrIH07RZCr6ggvrp2An1igiiqbsJstdErKpAekYEE+xkZGB/qJkipCfA18M7Fo7ljRgp3zkhhTK8IzhvTg/cvHc1t0/vx2gUj6dvN+ebaIzKQj68Yy2+3HOcQpACig/14crZTxLluSh/+vHMKt04XAtqv2/O49rMt/LVXtJQtrW3m643ZvPLXAaa/vII3l4p/0NkjErh9egqDE0KpqDdx0qsrGP7EIl79S9sq9sv12ZitNjZnVXDFxxu54uONjH9miaajoMKWrAq3eXvytL807CvQhrF/vj6LNWltdH+QSCQSiUQikRwbNEHnbZTvecKsculPfQAm3+kUC1rCU8mfgjpbyeALvSY5nVIGlx9Jex3X8n5cM60c86Mgopco0VM47VVnbpRjHENEfhE2IfIoYdzqfZ/YQmlVqEqUCo51TqsdX71Ujz/gNG3mjSfXjILR33OpF8C0h0UA+LYvYM1rYp7i+GoN32BIPsF5XynTVOdKKSHnIQnO4yvwIGDEqEo8A1t4DVrjlGfFeZR0vLifsx4OLYG9vzjXUco1FaeU62utLt+beLO43fGNcPSA/bhUlSF/PQIb/wffXyHup84X7iN1CH7KKeK5VwTQvjMgdpBzH0pJZoRLl0lwnu+u4mqJPUhfcTNN+y/clynywcJ7OddT/0+oUQQnVxFM/Xwo+y5Pdw/8ds36yl7nLkqF9QB09mymUvfAc4D/TYVN9tLBkHjoN0Ocz4ooWZmN4/nW6cV4N7t0qvTUWVBxfoEQpAC2fS5u40eA0Vc41EDkt5kahdhVbA9tT7Zncalddl5GilJewGh/2s0tiFID48Q/5s7cViyTnYzGKWVo3UA3MD6U32+dzAX2sr7TVWHjHeHySUn8cOMkooP98PcxcNdJKZw5PMFtvRMHdGNY93C3+acNi+fWaX05Y3gCd8zoB8DYJPGrRVZZPYv3CUHqrpNSePi0gdw2vR9DEkNpMgsBLsTPyMmDY/E16vn4irEkRQU6uvu9u+IQWWWiXrjJbGH5fqf1srimibWHymgyW/nfynRSC6sd+V81jSYKqsSXkFfOG87x/cSb3w6X11LpEHjSoFguGi8srl9tzEYikUgkEolE0gXoSKaUJ9ROqRMfhBmPeQ4xBzjvc1HyNOfdlvenzlZKPlHkT0WniKDykZdqu64NmtPyfoLayHk95RmYcBPctl1cRHti+qOiPCh9uSgZUq5plIvtPtOcWU7qUi61+KQeh6rJkiY0etJt2sdVi1pqTnsFzv1E625TM+BUOOMN7bxB//G8rirGBL8QISJcuxSuW+EUMla97AwgVzulFCeYp5KwxNHOacVl1V56ThSliSc+6O4EU6MIToog4Vq+V3rA+VoNv0C8HjX5zlDu2iLP+y3ZJ0SNby4SZYYb3nOG1Q88Ay7+Ho6/By77DUZcLFxoCooYp3aKKTjK91pw/PUY75xW3EPhqvMpOsUp8EUkwflfwBXzWz7H1c9HZLJ4rWsKhDNLLUwpolTMQHGrZHWpCYlzlpNmrdHmTHlCaRYAztdfcWnpDHDK82J68WPasklPwfoAJXYDhVrg9A0W4iUIAc4vDLCJMr2C7aKc1jfYeQ7VFMLc6fD1RdqyTi8gRSkvYFDK96zu5XsAY+zCyqbMcmzHqFWjWpQytCFKAQT6Gnnu7GFsfngG95zsIdzxGHH3yf1588KRDhdVSmwID506gAvH9eDBWQP4+toJ3Da9H9ccn8xdJ6Xw0RXO7gpnjEjAz16q2C3Unx9unMSr5w9nSGIoJouNi+Zu4KpPNjHx2aXUNVuIDfXjidmDNY//49ZcTnltlaOjoNItMCHMn7NGdee4vuKNYmdupWa7vXan1KD4UM4dLd7QVu4vodl87MLtJRKJRCKRSCQtcKTd9057Wdye0EYgM4hQ7jt3eQ5CV4gb6pxOOVncGn3h6kVw+ivavJ7uY5zTJz2p3U9bolTCSHFhG+nB2aIQ0cvpaNpmd2r4hWpdVed8DFcuhMt/E/d7T9GKcopTSbnwV+gzXcwbfBb0HK9d5hcsBA9fFxFj7NXQf1brxzXyEtH9T6El15rabaWUlSWOFmWEQ84SAkL2OvjpWiFkKKJBaELLohlAouo18Q8X+2kP8SNEBpji8gl1/wHfDaXUzlWUUkQnvY8QWhVHlSOU2/4jfK/JdkFDhbqzXup8p1MqrId4bac/AslTxWscq7peUpxSkUnu41Q6VPq24BBUu9QUXEWpS38WIug5HwmBLGmyVthUoxYDAyNh1gviddjxtRCWFJRMqcRRnvcDIoNN+R9Rh/63hFqQVV6Xcrt46R8KY68RwlpzrciNUlCLUiEJTodh6jyRLaW4FPufJkRB5X9fp3Oe4+9NdnYq7DPN6Tgs3gt5m2H/gpYF3WOEFKW8gNH+JtRS+d7w7uEY9TqKqpuOWdi52rWla++bJKKMTtfSrz5e4ropfXj2rGFcP7UPE/to34y7hfjz+dXjOHVoHHdM76dZFh3sx39GdufV80YQHuhDXmUDS1OLKa8T4uFJg2I5b0wP+seG0CcmiIHxzg4p323OpaCqgd32Mr1BCeKNZ1h3cevqettjd0oNTghlePdwooP9qGkysynTQ2tYiUQikUgkEsmx5UjL9/pOhwey4YQHOmc8YT2EIBMY1bLLB4SY0G2gcIL0Ok64nozOxkGaQPMjof+p4lYRpVzdP0Zf6DVRXLjffQAu/kG7PDIZbt8J17hc0PuHws3r4dyPPT/u1Yvgtm3OcjBX8aQldDq48FvodzLMfqdl15ra0eRaTjn8ArhpvXg+czZA2hJt+V5rQeyKewmE66e9binXfYa0IUr1Os65TUulmgHh4vgVgUPpEKeIVqEJTuFTYetnzum8Lc6QbLVIpBDVV5ynvsGtO6UUMcpT2apPIHQf6z5f/XgxKcJBeOnP2tdtwGnu24F72eTYq51dGnNUQpDilIpO0XaJVGfCBUY6jymtDVEqqJsQg1zHoTil/ELEOaGU3easd66rlO+NvxHu3ud8P9nzs11EtAlh7fwvoLvqOQBtiaxC/1Odri0lzyokHgw+7useQ2TQuRcwtpEpFeBrYEhiGNtzKtmcVU4PVdj30cJkcf66otO3X5T6O3J8vxiO79fyr0T9YkNYce+JbMoop6yuib351ewrqOHqycn4+xhYeMfx2Gywv6iGj9dk8MeuQmqazHy6NouSmiYAhiSG2m/D0Okgr7KBaz7dRFWDiftPGUBasXBUDUoIRa/XMW1ADN9tzmXeznyHu8oTVQ0mUguqGZ8c1eI6EolEIpFIJJIj5EjL96Dt7ngdQaeDq/4U7oigVr4Hxg4WgtqtW4WTR68X7qiqHCFItaMiol2knAILHwCL+O7bak5SiIeLYxCOq47iFyL+zv0Elj4pSgnbS2i8KDVrjUiVg8qTgycmRbha1r0Fq19x5jGFxgvxoSX0Ll6QwChtiHVLuOZoteWUGnWZ6jFaEqXs57PyutTYxShFlAqJhcl3iRLM0oOw7ClndhE4Q8Z1es/uMIMPXLNYnKtKaZ6Sx+UbLNxAIALQlXmu9JwohE1XXJ1SnohtoXmUq3MMhPC152fR7bEqF8xNzs5+gVHCvVS8R9zvf4pTMAqIdIo7LZU9Apw1V4Scq0VQxzjsFVGKsNpjPGz/0rNTSnndB86GP+4XGVcH7d01Q+Lczy8QzssDf6hm6IQo6/q8ttXV8hggnVJewIAQfVrKlAIYmyTeLDZmuIdmHw0sqtaS+g44pf6phAX4MGNQLOeP7cnjs4fw3Q0T6W3vhKjT6dDrdQyMD+WFc4bzyvkjAPh4TQaL9opfGoYmijeXUH8fbpsmHFmL9xWzKbOCKz7ehMliIzzQh8Rw8SvcacPEG83XG3P4fF2mZizNZit3fbedFxamcsPnWzj/f+v5Y5dLcF8rNJutzN9ZwAer0h1imEQikUgkEomkFdQZTf7hXhuGBv/QlgWpEx4SItiZ9uwknc55oapcBLdVutcRIntrs4NacuUcLRJGwCU/akvyOso1S2HcdcL9FBQjMqzUjp6WgudHXyFu87Y684bCegq3jqdzpfcU93lqwejqxWIMnnBzSnnI8lU3qRp4pnNafa6oRVZljMGKqOLilAqOFU6gwXNESV5LBHXzLByBeB7V4e5xQ+DMN+Gi75zzlNw1daaUck6NuMjzfhVRSqfXCohqdHbxxZWWRCkQZWybPxKikENojdKKPX2mO6cDIjy7v1xJGOXuynMdh3L8Svlu3hYh6IG7KBUU5cxrW/GiuPV0ToBwgp3+KtyTJtyB538utvcN1p4PYa2UnR4jpCjlBZTyPXMrrSzH9RYn69pDx6Yjm8niFMj0/3CnVGczfUA3pg3oRpPZSk2jmZE9w5mS4vzQv/OkFN6/dDRnjRL/8LVN4rm+dVo/R+nj1JQYbp0mbL1PzNtLTnm9Y/vfd+Tz09Y83ll+iHXpom742805mjEs2lPIVZ9sori6EVc+WpPBzV9t5an5+7j8o000mS1u67hSUdfMjFdW8PT8FlrlSiQSiUQikfyTUQcTtxTE3JU44X7RoSy6n/syRYzqbOFosKqD3eF0lPM23UfDqS+Kcse7D8DJT2qFBoOf5+0ik8Uyc4Pd7aQTOU4+/qLET+H8L2D8DXDWB+77ULvowrp7LrVSlqkx+oqcKd9gp7gUP0wEsd+61ek+Aq34oS4fUx67JaeUeiyJo7X7mXKfc1oRs9rLqMsgSdUZUgn0Vv9/Tb4LHsyFoed43ke3QdBvpihn8/H3vA6IjKmTnoSp9zvneTr/W+rgB0KYa1BFsKidfT4BInNK3fly3PUiD+2Eh5zzPAlXLYlSUf2E2GVugL8eFV39lPI9tSNNccM5SkdV71Wu+x1zFQTHwMiLReYWaEs3QTql/q0Y9K133wOY2CcKH4OOrLJ6MkvbSPPvBCxmVaaUXlZ1dgS9Xscr5w1nQFwIvaODePfi0fgYtP9aMwfH8cp5I/jgsjEY9Dpmj0jgquOSNOvcdVIKx/eLxmSx8cKf+6ltMvPtpmzu/t69xeiqg6WU1goV32q18cS8vSxNLebjtZlu6/6+wxmQl1fZwBfr2+7yt+JACWnFtXy7KeeYhe1LJBKJRCKRdBn8Q8VF/h27W84f6mp4KuEB58V4Z4tSQ892Ttva/tGzS6M8d8GqEjwlRNptXYPWBRSZ7AyKHnmpc36v42DW857LF9XXgcHdWi4RdS3fAxF8fuduZ6h1SLxwjrmGtyv5U8YAmPmMc35Vrv1xXZ1Sxc7xKOgNolRTIX64EIQAxl7recxt0c0ehD5otn18KnEpvEfrIrDBCBd/J7pEtoZfCBx3mxDwFDw5pdTClk8QDLtAu/5Jj4npsdc6g9kBzI3CvTTtEee8SbeIPLTj7xbC0RlveP6fDAgHVO8p/vb96vVOh9f6d+CtsaLsFrRlm72naLPUWnJKtYZGlPJwjh1jpPrgBZxB5y2/eQf7GRnTK5J16WUs31/MFdGtdMDoBDROKVm+12HCA31ZcNvxWG02jIaWtd4Zg2LZ+vBJhAYY3QLidTodD84ayOq0Vfy+I5/9hdUcKBI114G+BuLD/CmubiI6xI+M0jrGPLWYs0YmMiYp0hGIP29nPvfN7O/Yd055PXvyq9HrRKfCF//cz5Pz9rJ8fzHvXjKaYD/PbwG77IHt1Y1mimuaiA1t5ZcIiUQikUgkkn8iLXVo+7uhiAytZR4dDppSt9CW1/s7of5+3lrmU7dBItcHtN3m4oYIAchmbT3M3KxqZtValUq4B8HAJ0D8RfWFtMUtO11CYuGM1+3ZSL3gxIdFPtTIS5zLoXWnFAhRavuXYjq6nwjL7nNiy13u2uLqRUJs6WbvvKjTCXdRda7IVepMQlWCTUuvx+x3YOULIqesMht2fiPmB0QKN2C3weK9QH1uKELOxFugpkDktynzDEZRqtgSeoMYiyJ6qkW4M9+ClJmw6hUo2u2crxae9AbR/VLJi2rJKdUaIV3LKSVFKS/gKN9r4xeFqf1jWJdexooDJVxx3NEVpdSh61KUOjz0eh162v4lLSyw5e4GgxJCuWJSEh+vyXQIUtHBftx8Yh/OH9uDJpOVZfuLues74Z76aVseP23Lc2yfU97ARXM3cOdJKYzrHcnC3eKXj/G9o7h+SjK786pYuKeQVQdL+XJ9FtdP9fxlS+kiCHCgqMZNlLLZbPy8LY9deVU8OGsgvkZpupRIJBKJRCLpkoy4RFxsK1lIncm1y2DDezD1vrbX/bsQ3gsqs6DfSS2vowgqAHFDtcsm3tz2YxhayGJypbWyyLHXQkMljLm65XXUr/nUe2HYeU7xRHFK1eTD4sehwZ5l7CpK9ZkmnDl+waLroV4vhJPDxS9Y+/yBKD89GoT3EplbvkEtZ8ONvFj8gSi/i04R2wRECCGq2wDnupf8CJmrneWFej2c8mzHx+UfphKlVIKu0ReGnC2ywda+Acufh9hB7tldvY9XiVJH6JTyFFZ/jJGilBcwtCNTCmBKvxie+yOV9enlmCxWt5KwzsSkKd+TopQ3eXDWQLbnVLItu5Lnzx7K+WOdXSYCfeGsUd2ZmhJDWnEt769MZ2mqsNr2jAwku7yedell7P5kE59cNY53V4jwxVlD4zAa9Lx7yWi+25TDfT/u5Nk/UvlrbxF3zEhhcj/nB57VamNPfrXj/sGiWk23wkaThf/+vJsftwrr79ikSE4dehhvhhKJRCKRSCSSo09MinCBHA0SR8FZ/zs6+/YWVy+C9BUi6Lsl1CHvaqdUezn5KSjcLUq9PBE/HBJGtlySCRDdF856v2OPq85FCu6GKCOziU6CCq6lhH7BcOtmsW5LweZdlcBIuPRnIUq1pwzXxx9uWC1EKU/Pfd8Z4u9IieoH5elC7Btylvtyg484N8ZcDUYP2WZJk53TwYfhgJTlexKDXfSxtOGUGhAXQqi/kepGM/sKqhnWPfyojcliL9/T2WzabiOSY46vUc93108kv7KBXlFBHteJCvYjKtiPcb0jWbCrkOpGE2N6RfD473tZnVZKTZOZs99dC8DA+FDOG+N8s5k9MoEXF+2npKaJzVkV3PvDDpbdcwL+Pgbm7czn8d/3OsLYAQ4W1/DX3iJeW3yAZ/4zlId/2e0o7wPYnFkhRSmJRCKRSCQSyT+DkDgYfn7r66idPrFDOv4Y3QbC3alaoSQ6BUoPCNHjkh87vs+OYrC7gRrKtfM9iTeHI3x0FXof37H1PYlAnc3styB/OySf0LrQFxDueX6syp0XkdTxx1dEKWNA62WmxwgpSnkBoz1I3GK1trqeXq9jdK8Ilu0vYXNmxdEVpez5VnqQolQXwMegb1GQUqPT6ThtmFMQ+uKa8WSV1XH6m6upaTSTEObPOxePwt/H6X7zMxp44szBvL7kIKmFNRRUNTLgkYVMG9CNVQdLMFm0weZ7C2r4eqMI2Zv99hoAwgN9OGNYAp+vz2JLtrD6bs+p5J1lafj5GHj53OGypE8ikUgkEolE8s8krLsojbNZIbxnm6t7xFX8ueQn2Prp4QeIHw6ugtSA04/dY/+bCe4GKScf/vZ6PVy/SuSAeeq42RZK1lZ4jy7RyEGKUl7AmSnVcvc9hTFJkUKUyirnqslHL1fKbBGlhDqQotTfnF5RQay490SqG0wkRgR4LPucNTSeWUPj+XZTNvf/uAvAUQaYFBVIZlk9pw6NY8GuQnbkVLptf96YHlw6oRefr89iT14Ve/OrOe/9dTSbhdA6IC6Em07oQ0lNE1HBfhj0nt/sHvttD7kV9bx6/ghC/FvO2lIzf2cBn67NRK+He2cOYHSvFrqVSCQSiUQikUgkRwOdToSIdybhPWDaw527z/YS0RuumOe5Q52kaxI/7PC3TZoCY67qnFLETkCKUl5AcUqZba07pQDG2C+4N2dWYLPZ3Dq2dRZWxSllo0uopZIjIzLIl8igtmu+zx0tyvpsNsirbKCm0cx9p/Sn2WwlwNfAqgOLqWlyF09PSImhe0QA3UL8KK5p4pkF+xyCFMCrfx3gk7WZlNQ0ceVxSZw5PIF3lx+irK6Zdy8ZRbcQf/bmV/PJ2kwAbvt6G7dN78fInq0LTL9uz+OOb7djs5u57vthB3/eMaXVjocSiUQikUgkEonEA+d/AWvfhP+81yW6sEmOEUZfOP1Vb4/CgRSlvIChA06p4T3C8THoKK5p4lBJLX27hbS5zeFgtmdK6bFJUepfhF6v0wSpKwTa9ayfbprE28vSKK83UV7XxO68aoJ8DYxJikSn0zEmKYIFuwpZnVYKwPNnD2XezgJWHSylpKYJgG835fDtphzqm4Xw+cOWXG46oS9fbMhyPN6y/SUs21/CjSf04b6Z/bnm081kl9fz402TCLU7qL7ckMXDv+zGZoNTBsexcE8hh0rq+HZzDhePF6GNNpuN/UU19I0JlkKVRCKRSCQSiUTSGgPPEH8SiReRV21ewJEp1Q6nlL+PwdH57LcdBUdtTGarPej8qD2C5O9Iv9gQXrtgJJ9dNY6zR4lfT07o382RF3XJ+F6a9U8aFMdHV4xlwW3H8+ONE+kW4kd9s8UhSAEs3ltEVYOJX7blAXDTCX2Y3Fd0/3tvxSGe+yOVJanFHCyu5fcd+QBkldU5BKmLxvfknYtH8X9niK4n7yw7hMUqrFNfrM/ilNdW8cbStKP4rEgkEolEIpFIJBKJpDOQopQXMOqF86M9ohTA7BEJgChdstlsbax9eFgsqqBzicQDl07oxcvnDufx2c62t5P6RjNjoOjeML53JJFBvvgY9AxKCGV0r0guGOd0YT18muhSsi2nkmfm76O+2UJKbDD3zuzPF9eM5/wxPbDZ4P2V6Y5tPlmTydpDpfyyLR+bDSYmR/H0nCHo9TouHNeTsAAf8iobWHGgGJvNxufrhfvqp625bv8r5XXNXPHxRq74eCO/78inutHEwt0F1De7OxbTS2o5+921LNpT2HlPoEQikUgkEolEIpFINMjyPS9gcGRKWdpYU3DSoFgCfAxkldVzz/c7eXz2YIL9OvelsyhOqaOjeUn+ARgNes4e7V5r/toFI/hkTQazhsa7LTt3dHfmrkynV1QgVx7Xm1+357Mrr4pvN4tufvec3N+Rk/boGYPIr2pg1cFS/Ix6zFYbB4truWjuBsf+5oxMcKzv72Pg3NHd+WB1Bl+sz6ZbiD8HimoByK1oILWwhoHxoVitNgqrG3lz6UGW7y8BYPn+EpKjg0gvrSMxPID3Lx3NkMQw9hVUs7+whtVppWzJquCRX3cztX8MfkZRcns4uW5VDSbOeXctgxNCee2CkR3aViKRSCQSiUQikUj+yUhjjBcwdCDoHCDQ18hVk5MA+HFrLi8v2t/pY7LYg85l+Z6kowT7GbllWj/6xAS7LesRGciye07guxsmYtDrOHeMU9Qa0yuCkwbFOu4H+Rn55MpxvHb+CL64Zjyzhye47W/m4DjN/Ysn9EKnE50DH/99j2bZoj1FpJfUcta7a5n03FK+3iiEsOhgPwDSS+sAEfD+xO97MVusXPXJJu74djs/bMkFoKi6iV+3iRLCT9dm0v/hhaw8UKJ5nEZT6+LyH7sKOFhcyy/b8ymva251XYlEIpFIJBKJRCL5NyFFKS/QkUwphXtO7s8L54i2j4v2FHV6GZ+j+16n7lUigbgwf0dY+WUTk1h691Teu2QU/7tsjJvryKDXMWdkImOTInn27KGsuPcEXjhbnPenDY0nPFDbUbB3dBAX2IPaN2VWAPCfkYkAfLEhi3PfW8f2nErH+rNHJLD4rimOzoR3zkhBp4ONmeV8ti6LgqpGt/G/vuQg2WX1vPTnfpotVt5feYhft+exJq2Uqz7ZxLinF7Mlq7zF41+w21kCuCG9TLPMYrVhsrT/fUAikUj+afy1t4hrP9vMXFXptkQikUgkkn8PsnzPCyiZUu11SgHodDrOHJ7Ao7/uJq+ygX0FNQxKCO20MVksMuhccmxIjgkm2YOryhU/o4FeUUH0igpiYp8oYkL8PK5338z+LNpTSFldM4+cPogLx/VgT36Vo5RvUHwor18wgqLqJsb2jsDPaODb6yaQUVrHSYNi2ZxVzqqDpTwxb69mv1cel8SSfcVkl9cz5cVljvlr0spYk6YVl+78dge/3nwcEUFO0exAUQ1Pz9+ncVatSy9jav8Y/I0GPlidzmuLDzI0MYxvrpugEeiW7CsiIsiXUT0j2nyeJBKJ5O9MbkU9f+0tws8ofxaTSCQSieTfiPwG4AWMBnvQOR1zSKg78f3ZyQHMFqsYixSlJF2RHpGB+PsYPC6LCPLl91sn89NNk7h6cm8CfY18cNlYEsMDSI4J4pMrx9IvNoTJ/aId2VD9YkM4eXAcOp2Oc1xysj69ahz3zuzPvTP78+aFI/ExOP8rgny1Y9DrIDrYl+zyeiY9t9RR9gfwzIJ9rLALUga92Mdn67IY9eRf3P7tdp5ZkEp9s4UNGeXsya92bLcmrZSrP93MpR9soKFZWxq4NbuCA0U1HX36JBKJpMuivLc3mqRrVCKRSCSSfyPSKeUFDHanlOkwSvBOHhTLX3uLeHf5IfrHhXCqh3Dpw0EJOtfLoHPJ35CE8AASwgMc93tGiSwrg17nEIRa4rSh8RwsqiW/qoGxSZFMTYlhaooQf4f3COf7GyaxJ7+KhLAAGkwWbvpyKycNiuWuk1KwWG3YbHDvDztILazhnu93sOJACeEBPo5Q9dG9Irj2+GRu+GILIC68ft+RrxnDbzvyGZIYhtVq49k/9gFQ12xh5cESTh4US1F1E5uzyrnlq22E+BtZff80wgJ82v38LE0t4v0V6cwYGEugn4EJyVEeM8AkEonkWBPgEKXa1/xFIpFIJBLJPwspSnkBRZTqqFMKYM7IRBbvK+LPPUXc9vU2Qv19mNwv+ojHJIPOJf80fNtZCmI06LlnZv8Wl4/oEc6IHuGO+4vvmkJSVBBGg3P/f9x+PFd+sonl+0s0gtOIHuH8eOMkAG46oQ8ZpXXsL6whvbSOkT3Due74ZG78civzduTzwCkD+GhNBrvznK6pH7fk8su2PP5Q5VLVNJo5//119IwM5OYT+/LxmgxOHNCN2SMS2ZtfzYJdBVw+KclR7thstvLQT7sprG5kQ4bIvooL9WfpPVMJ9G35I6DRZOHX7XkMTghjSGJYm89jVYOJ5/5I5exRiYxJimxzfYlEIgGnU6pBilISiUQikfwrkaKUF/AxiNwZy2E4pXwMet65eDR3frud33bkc+MXW1hx34mO4ObDxSaDziWSdtG3W4jbPJ1Ox3NnDePSDzfga9Q7yvHOGpXoWOe+UwYAkFZcywer0rnxhD7EhvoT4m8kv6qRO77dzvxdBQCcMTyB33fks2hvkccxpBbWkFpYw+J9RVhtIkw9JsSPm7/cSkW9iXk783nszMFM7BPFr9vzKawWAe4je4azLbuSwupG3l+RzvjekXy0JpMHZg2gZ2Sgw1lmtdq445vtLLSXCV8zuTcPnz6o1efl07WZfL0xm40ZZSy+a6pbiL1EIpF4wt9HfPOQTimJRCKRSP6dSFHKCyhOKTOHVytn0Ot48dxhHCgSF6Y/b8vj6sm9j2hMSui6vIyUSA6PuDB//rprKiDK5VYfLOO8MT3c1uvbLZjn7B0FAR46dSAP/rSL3+wOqzkjEnj5vBHsyKkku7ye3tFBvHTuMHpGBhHkZ2Dqi8spqWnC16in2Sz+b5vNVi6au8Gxz8yyeq74eBPxYf7UNJrtjzOA66b0YcGuAm76civvrTjEVxuzKalpYldeJVUNJo7rE80Hl4/h3RWHWLinEKNeh9lq4+O1mdx4Qh+igj2HzQMs2isErEMldfyxu5CB8aH0jg7SrFNc00hDs4VeUUGedqHBZrNJYUsi+RcQIJ1SEolEIpH8q5HGGC9gMByZKAWiM9nF43sC8P3mHGyH4bpSY5Xd9ySSTmPagFgePWNQi+Hsai4Y24PzxnTH16jntml9eeGc4Rj0Or67fiK/3HwcS+6ayuhekcSE+BHoa+Sb6ybw5TXjef/S0SSGB3DnjBRH16qkqEB+vHESF47rSXSwHwVVjdQ2mRnTK4KLx/cCYNaQOKakxNBktlJS0wRAUXUTjSYrS1KL+XB1Bm8sOQjA0/8ZwtDEMCxWm6OEsMls4fcd+Y5tQXTPUpcd3vTlVma8soLP1mVitdpoNlsprW3i1NdXc/KrK8kqq3Osm1fZQGV9s+Y5Ka5pZMqLyzj73bWYLTL8WCI5UlauXMkZZ5xBQkICOp2OX375xdtDchBgbyDR2CxFKYlEIpFI/o1Ip5QXMOoPv3xPzZnDE3ly/j5SC2tYcaCEE/p3O+x9WaVTSiLxCjqdjhfOGc7T/xmKjyqnKi7Mn7gwf7f1+8QEO0LK1zwwDYA5IxOobTIzMC4UvV7H6F4R/N8Zg/hxay7+RgNzRiY6At91Oh0vnjOMU15bSUW9idum9WVnXhW7cqsoq2vmqfkiaH1CciTnjelBVYOJXXlVPPzLbvbkV5Fb0cCqg6V0jwjg3NE92JJdwUp7l8HIIF/K64TAZLHaePTXPbz61wEq6k2aY3h3+SFO6N+Nn7fl8ueeIhLC/Flw+/GEB/pitdq4/4ed5JQ3kFPewE/b8jw6zkC4qXbnVdMvNpin5u+los7EKUPiOG1oPHq9jtomM/9bcYiIIF+uPO7I3KQSyd+Zuro6hg8fzlVXXcVZZ53l7eFokE4piUQikUj+3UhRygsY7ZlSR+KUAggL9GHOiAS+25zL9Z9v4eMrxjKp7+GFnltlppRE4lXUglRH8VQO5+9jcLijXIkN9ee76ydyqKSOmYNj0emEgHPKayvJrWggyNfA42cOQafTcdqwBJ5ZkArA1xtzHPvIrWjg1cUHNPu9/5T++Bj0BPkZySyt462laRpBSqcDmw2+2ZTDN5uc+8qvamTEE38xrnck5XXNpBXXOpa99tcBooJ8+Xx9FqcPS2BwQigxIX5EB/vx7B+p/G9lOlFBvpTZxbD5uwr4bF0mj54+mFu/3kpmWT0AE5KjGBgfSn5lA3Gh/uj1OvIrG0grrmVy32j0eh2ZpXWE+BtbLVP0xDvL0/htez5zLxtDj8jADm17LLFabejb6EYp+Wcya9YsZs2a5e1heMTf0X1PuiIlEolEIvk3IkUpL2BQgs47YV9PzB5CeV0zi/cVc9s32/jj9imOrlsdwWK1l+/Z5AWLRPJvoF9sCP1inaHtwX5GFt81lbK6ZiIDfR0lNYnhATx/9lD2FdRgsdrYkVvJJRN68eGqDIL9jcwZmUif6CC6hfrTJyZIkwN16cRe7M6rJjrYl0V7i+gbE8x7Kw6xOauCmBA/zhyeQEpsMA/+tAurDTbauwOG+Bt59PRBvLb4IHmVDVz96WYAlu8XjqzYUD+enjOU/61MB3AIUn27BZNf2cCmzArOfHs1ajPq1xuzSY4O4rHf93LJhJ5cPjGJ895fR0W9iYnJUcwZmcCDP+3CaNBz+cRe3H/KAE2HxayyOkwWG327BWuex4q6Zl5ffJAms5VX/jrAq+eP6KRXqPOw2Wzc8/1O1qSV8vbFIxnVM4INGeX0igokPizA28OT/MtRd9+TWXISiUQikfz7kKKUFzB2QqaUgr+PgbcuGsXst9awv6iGC/63jmf+M5TxyVEd2o/NXr4nnVISyb8Xfx8DieHuIsX5Y3u6zWuppE5NoK+Rcb0jAbhhqhBzRvWKYGduJROSoxwXo8F+PuzKq2JgfAgWq40T+ncjMsiXYd3DufiDDZTWNjE0MYyM0jpqm8wUVTdx3edCqJoxsBsFVY1MG9CNu0/uT0ZpHee+t5bS2mZC/IzcP2sAD/+ymx+25GKy51N9sT6bL9ZnO8a5Lr2MdellgAiNn7sqg5UHSjFZrUxNiaGy3sSv2/MAuPGEPswaEs/ghFB+31nAx2syaLIHzv+6PY+oIF/8fQxM7hdNj8hAtmRVcMaweM2F9t78ajZklHH26O6E+vu0+hzWN5upb7YQ3Yp7a/XBUh79bTcn9u/GIx66JC7cXciPW3MBuOKjTZw3tgcfrs4gPNCHX28+rl3B812RtWml7C2o5qrjeksHWCfT1NREU5MzN666urqVtY8MRQAHaDJb25XFJ5FIJBKJ5J+DFKW8gMEgLi7MnfQd2t/HwJsXjeTC/63nUEkdF3+wgZfPG87sEYltb2zHYi/fk1/rJRLJ0SQyyNct/+60YfGcNizebd3+cSH8futxbMqs4JTBcRj0On7Zlsfd3+/AaoNeUYG8fsFIgvycH2W9o4P45MpxvL7kIJdPTGJSnyg+Wp1BeqkIVw/xNzo6Eg5JDOXpOUN54Kdd7CuoZmB8KNdN6c19P+xkf1ENAOkldZoxvb3sEG8vO8SAuBBSC2sc8yMCfaioN/HB6gwA5q5KJzrYj7zKBhqbLYzoGc7Vn27CbLFRUtOE2WrjvRWHmHvZGIZ1D/f4XDU0W5jz9hqyy+v57vqJjvWq6k3o9RDi78PC3aKbotUG6SUZjOgRzhnDExz7aDJbHDlh4YE+VNab+NA+xsp6E9d+tpl5tx6Pr7HzfpKobTJz+9fb6BsbzIOzBnbaftVYrDYu+kB0nAwN8GmXSCppP88++yyPP/74MXksf9W519BskaKURCKRSCT/MqQo5QWMdlGqMyM9U2JDWHr3Cfz3l13M21nAnd9uZ1B8qKY8pzWsNilKSSSSrkd8WABnDne6t2aPSGDuqnTSS+p45bwRGkFKYUhiGHMvG+O4/+lV41i8r4i6JjNnj+7Oy4sO0CsykOumJuNnNPDjjRP5a28Rx/eLITLIl+4RgWzMKKd7RADLUouJCfHjlCHx5FU28P3mHNYeKnMIUonhAUSH+PHmBSP5YUsO9c0W1qWXsSe/mrzKBgBeXXyARpNFk68V6m+kqLqJO77ZzrzbJuNj0PPsglSW7S/m1fNHMLx7GM8s2MeBIpGvdevX2/jPyESmpsRw1Seb8DXqeefiUdz7w06sNkiODiK9tI5Hft3N5L7RhAX4UFrXxOK9xeTZc7QW3H48D/y4k0V7i5iYHMXB4hoOFNXy1YYszh/bk+825zB9YDe6R7Sei2Wx2iiuadSU/tU2mamoa6ZHZCCP/7aHJanFLEkt5prJyYdVUt4WO3IrHdPfbMyWolQn8+CDD3LXXXc57ldXV9Ojx9F5jo0GPT4GHSaLjUbzPy/sPKusDh06ekZ13bw5iUQikUi8ic5mO8IWcP9AqqurCQsLo6qqitDQ0E7ff3b2ak5bdiNBVhvrr9zdqfu2Wm1c9ekmlu8v4cJxPXj2rGHt2u6JL5/he/PXJJvg12t2deqYJBKJpDOpbjRR12T2Wh7SigMlPPdHKmePSuSa45PdlueU13PKayupc2lxP7x7GLdM60eIv5GB8aGc9MoKimtEiZReB1bVp/HkvtGsTisFnA6nlhjVM5yvrp3AnLfXOMQydfg7wMOnDeSa45OxWm3szq9iYHwo323O4b8/7yYyyJdRPSNYvK+Ift2C+f3WyfjZ3Sv7i2r4v1/3MG1AN66e3Jv3Vhziw9UZjs6Nd53cn7eXpfHOsjTqTRaun9KH91Yccjzui+cM49wxPaiqN/HEvL2cOjSO6QNj3Y5hS1YFwX5G0ktq+XFrLk/OGdLq6/vKov28sTTNcX/+bZMZnBDW4vrHiqP9/aEz0Ol0/Pzzz8yZM6fd2xzt4xr62J/UNJpZevdUkmOC297gb0Kz2cqYp/7CoNex6b8zNDl1EolEIpH802nv94cu4ZR6++23efHFFyksLGT48OG8+eabjBs3zuO6c+fO5bPPPmP3biHmjB49mmeeeUaz/hVXXMGnn36q2W7mzJksXLjw6B1EBzDYM6WOxu+Ber2Om07oy/L9Jfy0NY+7Turfrl+ple57EolE0tUJ9fdpM4vpaDI1JYapKTEtLu8RGchPNx1HTaOJhbsL+WB1BuN6R/Lh5WMIUY37idlDuOGLLYAQpPx99IT4+1BS08TqtFKMeh0PzBrAcX2j+XFLLn/uLSSnvAG9TpRt1zdbGBgfylsXjcLfx8CjZwziormipE0tSIUF+HDhOJELptfrHGWA543pwUerMzhUUsfifUUAHCyuZcAjC9HpxHa+Bj3FNU1syCjnrWVpjtJHgDeWpvH7zgIySp0ljmpBCmBpajHnjunBOyvS+HFrLsv2F7Pm/mkE+Br4dlM2Ly86wNjekczfWYBBr0MHmK02fAx7efeS0WSX1bNobyFVDSbGJEUypV80Op2O5QdKNI/z7IJUPr96nAzJboHa2lrS0pwiXkZGBtu3bycyMpKePd0z4441AT4GahrNNJj+Wd9FqhpMVNv/Z6obzUQG+Xp5RBKJRCKRdD28Lkp9++233HXXXbz33nuMHz+e1157jZkzZ7J//366devmtv7y5cu58MILmTRpEv7+/jz//POcfPLJ7Nmzh8REZ4bSKaecwscff+y47+fX+eUDh4vR4A90XqaUK2OTIhiaGMauvCou+WADn109jthQ/1a3sSGDziUSiaSz6B8nSqeHdg9jSkoM45Mj8TNqs3JOGRLHsntOwMegQ6fTERbgQ0ZJHc8vTCUpOpALxvZkSKJw/zx8+iAumdCLR37dzcmDYhndK5JDJbXMGhLncF9M6hPNtcf3Zk1aGTee0IdxvSP5cWsuY5MiPZY5+hj0fHrVOO79fifrM8o4bWg883YWAGCz4XBnxYb6UVFvoqbRjL+PnidmDyGjtI53lx9yCFKXTezFz1vzqGkyE+Jv5K2LRnH5RxtZeaCErLI6vrIHy5fXNXPWu2tJiQ3m1+35AMy3P6ZFZRX7Y3chz/6xj4/XZNJsD5IHOGlQLFcd15uduVUA/HDDRC76YAOr00r5bUd+i1mKZbVN2IDoYD/2F9Y4Xp9/C5s3b+bEE0903FdK8y6//HI++eQTL43KiRJ23miytrHmseWnrbnsK6jmoVMHHpbg2aByS9Y0mqQoJZFIJBKJB7xevjd+/HjGjh3LW2+9BYDVaqVHjx7ceuutPPDAA21ub7FYiIiI4K233uKyyy4DhFOqsrKSX3755bDGdLRt6qUlqZy44FwAdl6286j8sru/sIZLP9xAcU0Tk/pE8eU141t9nEc+fZRf+Jl+Jh0/XbOz08cjkUgkkq6JzWajutFMWIAPGzPKMVut9I0JZu2hMlYeKOHmaX2JDPQlv6qBxPAAwgN9sdls/LAll7mr0hkQF8qr54/gs3WZPP77Xp6aM4SLxvXkxJeXk1VWj1Gvs7ufRG6QmhkDu7E1u5KTBsYyID6E3IoGqhtMfL8l17HOyJ7hJEcH8/uOfJotTtHi9GHxvHXRKF5bfIDXFh8kyNfA/50xmGaLlT92F7Alq4KpKTEM7xHOm0vS0Olg5uA4ft6Wx9zLxnDSIPcywiPl71C+dzgc7eOa+epK9hfV8OU14zmub3Sn7/9wSXpgPiBy6VpzR7bE/sIaZr62EoB5t052iMwSiUQikfwb+FuU7zU3N7NlyxYefPBBxzy9Xs+MGTNYt25du/ZRX1+PyWQiMjJSM3/58uV069aNiIgIpk2bxlNPPUVUVFSnjv9wMRqdri2rxYzB2PllKP3jQvjmugnMen0Vaw+V8fKiA1w8oWeLGR1WmxV00iklkUgk/zYUlxbAuN7Oz9I5IxOZM9LpPIpQuTx0Oh3njunBuaqA8SuP681Zo7o79vXRFWO5/KON5FY0EOhr4PULRvLZukxqGs1MTYlhTFIEk+0ChPpHk0aThfgwf37cmsfU/jE8ceZgjAY9l0/qxY1fbCWvsoFgPyOPnD4IgJtP7MuG9HLWpZdx34/aH1X+3FPEn3uKHPd/3pYHwN786qMiSkkOD3+7U6qhuWuW75Xas986Sn2zs9xVXfoqkUgkEonEiVdFqdLSUiwWC7Gx2i+GsbGxpKamtmsf999/PwkJCcyYMcMx75RTTuGss86id+/eHDp0iIceeohZs2axbt06DAb3VsNNTU00NTm/cFRXVx/mEbUPtShlsTQeFVEKIDkmmDtmpPD8wlTeWpbGW8vSmJgcxZsXjSQ6WFvOqIhSOtl/TyKRSCSHiSJIAfSJCWb+rcezJ7+KkT0jCPA1tEsI8vcxcNfJ/bnr5P6a+cO6hzP/tsl8sCqD4/pGO8rSfQx63r54FA/8uJPqRhMh/j70jAxkxsBYlqYWsTuvmrG9I8kqq2NLVgWPnznYY9i6xHsE+IifxLpqppTlMIsK1CJbbZMUpSQSiUQi8YTXM6WOhOeee45vvvmG5cuX4+/vzEy64IILHNNDhw5l2LBh9OnTh+XLlzN9+nS3/Tz77LM8/vjjx2TMAAaDUxAymxvx9Tt62RbXTUkmyM/Ar9vz2Zpdwbr0Mua8vYZgPyP3nzKAEweI3C6bTXxxkk4piUQikXQWYYE+TOrEcqzwQF/umdnfbX5kkC//u2yM2/yJfbqGQ1rSOgE+SqZUFxWlrIcnStW7ZEpJJBKJRCJxx6saRHR0NAaDgaKiIs38oqIi4uLiWt32pZde4rnnnmPRokUMGzas1XWTk5OJjo7WdJ5R8+CDD1JVVeX4y8nJ6diBdBCj0Smgmc2NR/WxDHodl01M4scbJ/HXnVOIDvYlt6KB1MIaHvxpl+MLoNUqcjqkT0oikUgkEsmxxL8LilJqIeqwRSmTdEpJJBKJRNIWXhWlfH19GT16NEuWLHHMs1qtLFmyhIkTJ7a43QsvvMCTTz7JwoULGTPG/ZdRV3JzcykrKyM+Pt7jcj8/P0JDQzV/RxONU8rS3MqanUvfbiF8f8Mk7jopBYDC6kY+WJUOgNXhlJKylEQikUgkkmOH4pTqSuV7JlWofkdEqTVppVz1ySbyKxto1DilDl+USi+ppapeOq0kEolE8s/E69Vad911F3PnzuXTTz9l37593HjjjdTV1XHllVcCcNlll2mC0J9//nkeeeQRPvroI5KSkigsLKSwsJDa2loAamtruffee1m/fj2ZmZksWbKE2bNn07dvX2bOnOmVY3RFbzCit+cTWI6yU8qV3tFB3Da9H6+dPwKAN5akseJACbkVoq330egEKJFIJBKJRNISzqBzaxtrHjvUopS5A6LUxR9sYGlqMfd8v0MTdF59mOV76SW1THt5BROeXdL2yhKJRCKR/A3xuih1/vnn89JLL/Hoo48yYsQItm/fzsKFCx3h59nZ2RQUFDjWf/fdd2lubuacc84hPj7e8ffSSy8BYDAY2LlzJ2eeeSYpKSlcffXVjB49mlWrVuHn5+dxDN5ACfOyHEOnlJrZIxI4eVAszRYrl3+0EZNZ/Jrna/D6KSGRSCQSieRfhL/RXr5n7kpOKXX5XsfFsk2Z5dryvcN0Sq05VAZ0LRdZR1iaWkR2Wb23hyGRSCSSLkyXCDq/5ZZbuOWWWzwuW758ueZ+ZmZmq/sKCAjgzz//7KSRHT0MNkAHJsvhtRk+UnQ6HS+eM5y8D9azJ78anU58+ZLlexKJRCKRSI4lAb727nvNXUd4aTY7hagmU8dFKZPFpjmelsr3Vh4o4fUlB3nurKH0i3VvfGOxdB33WEdZd6iMqz7ZDEDmc6d5eTQSiUQi6apIW4yXcDilzN4RpUB0RZp362QW3HY8s0eIYHkpSUkkEolEIjmWdMXue+ryvcN1KVXUO93wLQWd/7wtjy1ZFfy2I9/j8o6UDnY1tudUensIEolEIvkbIEUpL+Ht8j0FnU7HoIRQIgLFiKRTSiKRSCQSybGkK3bfa+6gKFVZ30xprfaHxp25VY7pmhYypersYlVWCyVundEF0Fv4+zgvM2y2v9fYJRKJRHLs6BLle/9GDPbPZrOXyvdcsdnEly+9DDqXSCQSiURyDPHv4t33Gtso32syWxj/zBKazNr1tKKUZ6dUvb3EL6vcsyildko1mS0E+v59vrorrytAXbOFYL+/z9glEolEcuyQTikvoXxMm63edUopWO2ilE46pSQSiUQikRxDAhyiVNfJTzKZnWJQWw6uwqpGN0HKlZZFKTE/u6zO43KzKnD9cLKtvInaHFVZ3zW+70okEomk6yFFKS9htIs/ZnPX+JBWRCl5QkgkEolEIjmWBPjay/e6UtC5unyvjXG1lBelpqXyPcUpVVFvotrDOmr3WFfqTtge1GJeZb3n45dIJBKJRGoQXqKrZEop2KRTSiKRSCQSiRdwBJ13IdFFU77XxriqG9oWpWqbzKSX1HLee+tYtr/YMV8tOmV7yJWqUwlefzenVIMUpSQSiUTSDqQo5SUUp5Sli5TvOUQpmSklkUgkEonkGOJnD8Su70JOKVMHnFJVDVrBJTE8wG0dqw1+2JLLxsxyvtqQ7Zhf16QSpTzkStU1O0WpriTatQeNU6qha3zflUgkEknXQ4pSXsJgF39MXcQpZUUp35OilEQikUgkkmNHWIAP0LVyh7RB5204pVzK7gbEhXhcL624FoC8igbHvAaV6OSpA9/RdEoV1zRy+pur+GJ9FgDldc38tbeo0zrlqZ+3CumUkkgkEkkLSFHKSxiUTClL1/iQdnTfk6KURCKRSCSSY0hCmHAWldY209RF3EDNmqDz1sWgahenVEpLolSJEKXyq4QoZbPZqFeX75W7h52r3WNtiWMdZd2hMnbnVfP9llwATn9jFdd+tpl5Ows6Zf/q8r2qLiQ4SiQSiaRrIUUpLxGgU0I9q708EoFVlu9JJBKJRCLxAuGBPvgZxVfSoqomL49GoCnfa8sp5SJK9YoMdByPmvQSITpV1puoazLTaLJqOtR5ckqpQ9Tb6vDXUartHQHrmsw0NFvIr2oEYNXBkk7Zf0Ozc7xdJVOqodmC2fL3yuaSSCSSfzpSlPISwXpfAGobK707EDuy+55EIpFIJBJvoNPpSLDnMCkuIm/TbG6/KOWaKaXTQXSwn+O+p4yp/MoG6pu1AemeRKl6VeZUZ4tSSkfA2kYz6zPKHPMjgnw7Zf9Hs3yvuKaRyz7ayJ97Ctu9TX2zmXFPL+bUN1Z16lgkEolEcmRIDcJLBBv8AahpqvLySASO8j3plJJIJBKJRHKMiQsV34sK7W4db6PJlGoj6FxxHCl0jwgkIsjHcX9wQqjbNnmVDW7B7gVVDRoxDLROqUaThW3ZFVz1ySbSimvaPog2qFE5pVbsd7qjyms7p9ROU77XyUHny1NLWHmghM/XZbV7m9151dQ0mTlQVKt5fSUSiUTiXaQo5SVCjOJXs1pTrZdHIlCcUshMKYlEIpFIJMeY+HAhSnUVp5RGlGoj50pxSp09qjuPnzmYSX2iCPI1OpYPTghz20YtSkUE+hDgY8BqE/PVqN1UTWYr/3lnLUtTi7n/x13tPpbS2iaP4eVK2WFts5mVqpK98rpOEqVUoltnl+8p4fI1TeY21nTiY3B+x+0q5YT/dswWa6cF60skkr8vUpTyEsE+QUDXE6Vk0LlEIpFIJJJjTXyYEKUKKruGU6rZ4rxQNllsrTprFHFnxsBuXD4pCZ1OR5CfU5TqHxfsto26fC/Q10jPyEAAssq0Yed1TZ6DzjNL3UPRPfHh6gzGPLWYH+xh5gt3F/C/lYcAp1PKZoMM1f7KOkmUUot5FZ0cdK44yGob2y8uqQPrO3s8ko5TVW9iwrNLue2b7d4eikQi8TJSlPISwb6iM0uNyT0/wCvYf6XQ6+QpIZFIJBKJ5NgSb+/AV9AFy/eg9c53ilMqLMBZsqcWpZJj3EWpvIoGh5MoyM9AzyghSmWXO78XNputNKvGUVrrDIGPCm4796m60cST8/YCMHdVOharjRu+2MozC1LZV1DtyJQCNIHrR8Mp5Zq7daQoglptB5xSatdZZx2j5PDZW1BNaW0Ta9JKvT0UiUTiZaQC4SVCfEW+QK2la3SZsWLvviedUhKJRCKRSI4xDqdUVynfM7uKUi07pRTBJVQlSgX7GRzTveyCk5r8ykZH+V6Ar5FeDqeUU5RyDULfll3pmG5P6PlnazMd04G+Ro0Lq6rB5BB2XOmoYGOxei6/Ugt5lfWmTi3TqlVEqRaOwRN1KpFMilLeR3kNaho799yQSCR/P6Qo5SWC/UW+QK21i4hSMuhcIpFIJBKJl1CcUl0x6Bxad0op+UZqp1SgKlPKz2hw2+ZgcQ11Svmej8EhXKlFqTqXIPQtWRWO6YKqxjYv5P/cU+SYzq2oJ7XQGY5e1WByjNuV2iYzTW3kaCmsPljK4P9byNcbswHh5lJysdRB52arzS0Q3pWc8nq3oPeWUBxSdc0WrC2IYq7UN0mnVFeivE5cA5kstlZFX4lE8s9HilJeIsQvEoAaW/t/4Tma2GSmlEQikUgkEi+RYA86L6trblUAOlaoM6VAK7BYrDaHi6nJbHFcUIf6O0WpU4fGA04HmMLw7mH4++ipqDexO090YA70NdAzSmSNqt1MdS6laepStWaztVVhxWazkV7izC0trW1mc6ZT1Kqsb3ZzSvWMDMSgF98Dn5q3j+05lS3uX2FpajGNJitLU4v578+7GPv0Yk58cTm5FfWa8j2A4uqWBceVB0o4/oVlvLxof5uPCdqA87rm9n2XVot8FVKU8jrq7LKaDmSDSSSSfx5SlPISwYHRANTavP/FC5xOKZ10SkkkEolEIjnGhAX4EBEoRJ2DRd5vAtOaU+q6zzYz+fll5Fc2UN0gBBGdDkL8ne6o0b0imHfrZP64/XgA3rhwJL2jg3jmrKGM6BEOwMoDIksn0M/IgDiRNXqopNYheLmKUq60lr9VVN1EXbMFg15HsD3fatHeQsfy8jr38r3wQB8iAkVW1efrs5jz9hrHsj35VZzz7lq+25yj2UYR0bZlV/DlhmxsNmi2WNmbX+0Q60Lsj1/Yiii14oDo/rfqoHhO1h4q5dk/9mleh9yKer7fnMO8nfkaEcNTrlRNo8nN7aVxSh1m0LnNZmPZ/mJyK7pIJuzfGLWo2pJrTyKRtJ/2Ok27IlKU8hIOUYqucfJYlaBz6ZSSSCQSiURyjNHpdAyMF3mb+wqqvTwad1FKcf3YbDaWpBZTXtfM64sPOvKkgv2M6PXa71BDEsMIt4s8Zw5PYNk9JzA4IYyxScItv79IlNMF+hiIDfUnIcwfqw125AgHlbrznidu+Wqro2zOFcUl1SMigD7dRNB6boUzr6u8rslNzAkL8CHaJUBdKRF8Z/khNmdVcN8PO3l7WZpjeYZdlCqt1Yo8BVWNjpD2pGjhAsuraGB/YY3HssPUQvGaHyqpxWK18cyCfby/Ip2VdrHKYrVx1jtrufeHndzy1TZNvpZrrlRVvYmJzy7l/PfXa+Z3hlNqdVopV368iWkvrTis7f8p2Gw2bvxiC7d8tfWw86C0olTXqByRSP6uZJbWMeKJRTz22x5vD+WwkKKUlwgJigWgRq/TtjzxEjYl6Fx235NIJBKJROIFBtlFqb1dUZSyO6XUF9Lr0suotDtu1HlSbTHGLkopBPiKzKmRPSMA2JYjyuxa6izXP1a4qjLL6vnvz7tIKxYCVF2TmSfn7WVrdgWHSoVY1Ccm2BGirian3D1QPizAh8ggrShVXtdMTaOJv/Y686m+WJ8FgNliJafcs2MoU1WGqORlPfDTLma+tpLfdxZo1rXZbOwrEAJdk9lKbkU9+ZXCVZVhP470klqKazznsNa4PE/LDxRT22Rme06lJoRdHRxfdpii1LpDZQCaroiu2Gw2t9JFb/HJmgwe+nlXu3O32kthdSN/7C5k3s4CSlp4XdpCI0p1cndGieTfxtpDZdQ3WxxC/t8NqUB4ieCgOABMOh1NDeVeHo3TKSW770kkEolEIvEGA7uQKOXa3U4pRVPEEoDs8nrOeW8dAAnhAe3e96ie4ajTEoL8FFEqHHB22WupfG9QQqhj2mqDGa+s4P9+3c1P2/L4cHUGLyxMdTilkmOC6BHpPrYsD2JSWICPmxiXWVbPn3uKaDZbiQ31A4QL6kBRDUtTizFZPIsd6sB21+6D27IrNPdLaps0AsXuvGrH/Wz7OHfkVnl8HHB3Sqn3VVbrFEzUzrOKwyzfC/BxhtZX1QshpdFk4eM1GRRVN1Jc08jst9cw5qm/PHaS/HV7HuOeXsyWLPfv/odKajnuuaUtut86is1m47Hf9/LVhmw2ZpaTWVrn5mqqbTLz3eYch7jaXtSipiIcdpRyTaaUdEpJJEdCRql4z8+vavhbdrOUopSXCAqKQWc/YWpqC9tY++hjk933JBKJRCKReBF1+Z63v1S7ii0NJjN786vZW+AujvSIDODR0we1e98h/j70tpe0gbNTn1OUqqCuycyHqzPctjXodQ4RC3CIW5+uy+KtpQcBSCuu5VCJEAqSY4LpExPsWP/26f0APDqcwgN9OOCS55VdXsfC3cLZdPH4Xg6B6eRXV3Ld51vc9jHYLpgpTil/Hz1xYVpRLLtM+9ipBTWa+6vTSh3Tiri1M7fS7bEUXMU7tUiidlepnVIVdYfnzFGXAObYc6Ue/XU3j/++lxu+2MKlH2xkZ24Vdc0WNmVWuG2/cHchxTVNzN/p/t1/4e5C8iob+HJDlmZ+fmUDj/++x03Ma4sSlSD32bpMTnhpOU/P36dZ58WFqdz3w06u9/Batob6/DlcUapMZkpJugid7ST0Bhml4n+y0WR1lJX/nZCilJfQ6w0E2c//2rqi1lc+BlixZ0rJ8j2JRCKRSCReoG+3YHwMOmoazdzy9bYOuzc6E5OLU+rL9dmc+sYq7v9xeqDRcgAAQTBJREFUFwAzBnbjy2vG89EVY1h4+xSGJIZ1aP9DVesr7pvBCaIzX2ltMxfOXc/egmqig325d2Z/x7rhAT7MHpEIwDmju/PyucMdy4qqhQhRWtvsEDCSo4OYNSSeKyYl8dW14xmfLEoHPZUGhgX4aB4LxIWOIq5MTYlhYFyo23ZqxveOApxiUoCPgdgQP806O3IrmfHKCk5+dQXfbMx25EkprE5zlp/kuDilFOFOjWv53iFV10F1aZlaUHLtXFhc3ahxVYHIsXr89z2aDK1S1TrK2L7bnAsIh5uSEwZouh8qFNnD3vcXubsB0+1C4v7CGkdg8cGiGiY9t5SP12Ty8qIDbtuU1zW3eEGtdjMt2CVEsA9WZ2ie75+35QGwIaNjVRvqfLLDEaXMFqsm10s6pSTe4q7vtjPh2SVe/bzpDBSnFGgdvX8XpALhRYLtpXK19d6v/VScUrJ8TyKRSCQSiTfwNeoZ1j0cgPk7C/hyQ+eUMR0OShnbuN5CxNmcpXWp9I4O4ri+0UwbEEuQn9Ft+7YYkuAUpQLtmVL+PgYuGNsTgJ12Eebti0bRJ8bpqooI8mVsUiRrHpjGc2cN5axR3Xn6P0Pc9q9c5KfEhhDga+CxMwczqU+0W2aUmvAAXy4a15N5t07m7pNSAFiyr4iqBhMBPgYGJYRqSgc9oYheSpZTgI+BuDB/zTqltc2kFddyoKiWB37axZo0kdM0JFHsWy2m5FTU02iysC9fCCnTB3Rze0zX8j0lYwu0opS6+16DyeLIfapuNHHyays5/c3Vmu5VP27J5eM1mbz4534+XZvJtJeXsz69zLE8u7zerdxRjeJWU6M4t/YX1rgtUy4qTRYbB+zi1qfrMh3Lt7o4pXbkVDLqyb+46UvPYeMtdQh87a+DjukYlWDYHneixWpjc2Y5B4tV4lsHRanP12XS979/YFaJaTUdcEptzCjnkg82MP3l5eRXupdItkZNo4m7vt3On3u8X6Ui8T6NJgs/bc2juKaJZfuLvT2cw8ZssTpKnQG30uG/gxNMilJeJNj+9NfUl7ax5tHH6ijfk6eERCKRSCQS7/DWRSPpa+8Wt6uVHKGjjRJkPc2DCAIdy5DyhNpZFagSta6fmoyvQXwXO2tUIuOTo/BT5RhFBIpA9cTwAIz29Qa04F5KiQ0mwkWEighsWZQKDfBBr9cxJDHM0bFvj10MGtEjHB+D3hFGr2acPbjdoNcxuleEZpm/j4G4UH+3bdSsOih+nJ1jd4CpMVls/LG7gGaLlfBAH0cYvBq166um0eRwjIEoYWsyW5i/s0DjcgKR7zT95eW8v+IQlfUmCqoaWWEPCW4yW3h9iVO8eenP/aSX1GkcQjkV9ezKcz9H/YzidVGcUvN25jtKUotVbjbX8WSqyhqV/RaoHA/1zRbNsSqBxgv3FHoUcNVjVXNAJShFBTtFKXU5XaPJwmfrMimva2b+zgIW7CqgyWzh5i+3cs5765inCqvPbKcotTGjnLVppby3It1tWXVD+5xSVquNaz7dxOq0Ug6V1LFglxhHXZOZRlPb4fLPLEjlp215mnLFJrOF7zbnODLC/g7szqti+d9YROkqKO9vALVNFpalFndIIG2N33bkH7PPsPzKRk3JeX6V833jQFENY55ezOO/d+2ufFKB8CIhOvHFoqaxrI01jz7KryN66ZSSSCQSiUTiJeLDAnj8zMEA7Cv0XuC54oDpHhHAgLgQt+VHKkqpHUdqd058WAAPnjqAKSkxPDhrIOAUOQDCPYhK/T2MD5wuLzXhgdougeooUXUHQddw8jFJQgwanOgc98p7T+TTq8Zx3ZRkQAhlUUG++Ps4x+vvY9AIH55QfsSfOTiOUH9319lbS0X53IyBsRpnj8K6Q2UOYcvVnVRc3cgd32zn5q+2akQfEN0AD5XU8fayQ455v9jL2VYfLCVP5cJxLREE4eja6KHs7aRBosN2Rmkd69PLuOWrbcx6fRWV9SZN174DhTXUNJq46cstDHxkoaakUBGlSlyEK3VJoHp8zyzYR2GVtmSnpc6IRar11ELOAVXp4dyV6Tz66x7u+2EHt3y9lZu+3Mpxzy1joQeH0cHiWhbvLdK4MV5etJ9Zr69yCD1vL0vjvPfXcdEHGzTjVmivEJBTUU+1yhm3K6+KqgYTU19cxkVz17e5vZKPpuaDVRnc98NOXl3sXh7ZFq8tPsBrh7HdkWC12jj9zdVc8fGmFl/jjlBc3ch3m3M0nSqPJfXNZqxWG81mqyb37Vigzml7e2kaV36yiVf+OvLX82BRDbd9vY1bv956xPtqD+ml2lLhQpVT6vk/Uimva2bh7q7tDpSilBcJ1osP/9rGSu8OBLBiL9+TQecSiUQikUi8iBJ4nlVW7zH76Fig/OrsY9AztX+M2/LEIxSl1AJQZJBWKLryuN58dtU4hwDjZ3Q6pSI9iFLBfkaPHfbG2fOd1PgZDQT5OvfXTSXyqAWrvt2CSVIJU4oDKj4sgJfOHc5bF42kZ1QgU1NimNwvmjkjErj75BR0Oh2xKmdUgK8Bg97zd8vzxnTXHEP3iABH+aYaRWiaPSKBKA/lh+vSy7j0w43kVzawyyUQPb+qkT9cLsbuO0Wbm6Xmr31F/LmnkIPF7nlQrqQV1/Ldphy3+Sf274ZRr3Nrz77DZWyphTVc9ckmFuwqpMHF5bPbLkopzipF6FPnZamznOqbLTyzQBtintNC+V5ds8UhAlWq3EEHVSH36+xliov3FaNU9ZXWNhHSQqnqNZ9tZu4q4YAyWay8uTSNfQXV/LI9j23ZFbz4536P2ymohaaKumYsVhubMstZmlrEr9vzGPzoQu78druj1FNhV24Vu/OqKK1tZmt2paZc05XimkYqVMerhKuvPigqVrZkdTBIvqaJ1xYf5LXFBzX5WEdCSyWUB4tq+G5TDvXNZs25qTQUOBL++8tu7vthJ99tdj+XjzZbsioY/vgiXv5rP3PeXsOUF5a12HX0aLA9p9IxXWjPe1PPO1yU/822Snw7Skvnh2uum+Kw3JJVzpJU4agrqGo85qJfR5CilBcJNogP7Zom79nTFaz2k1yKUhKJRCKRSLxJZJAvsaFCLNnvJbeUciHha9Bzy4l9ue+U/rxw9jDH8viw1kvS2sNPN03ikdMHcUKK5xJBBbXzKNxFwFJQSvjUmVHjPTilQCuIKaWSrvP9jAZ+vHESV0xK4rSh8UzqE+1Yds7o7pw+LEE1PgOvXTDSEcCuEaXspYdXT+5NQpi/RgRTl0YOiAtBp9MxrLuzrFEt/EUF+TIxOarV8sOM0jr+3COaBw3vEQ7AX3vdmwmdNjTeYzYVCNfa9Z9v4fN1ogNecCt5YXmVDaSX1hEd7MeZw53PR/+4EHraBb3Nqg58rk6FNWmlbh36Euzn1b6CauqbzY4Sv4nJQmBMVznBFEHiqTlD0OlEuZDaheSpfE95PZTA9QpVuPOBoho+Wp3BTV9uYe0hrfjTOzqIx88czNoHpzFKFTavDp7/eE0mJotV0ymxtsnsOO4ZA2NJiQ1Gp3OOQ0ERyZbtL2b0U39x7w87uPTDDVz1yWYe+WU3dc0Wft6Wx0M/i0YDyrmTXlrHVpWYtCe/5WuqxXu15W55FQ2YLFa25Yjt9xfWdEhAUOdqeXJ/dZRHf93NiCf+cus0+driA5z06kru+3En761I14hn6lLVw6HRZHG4DNV5aceKu77bjsli4+1lh9hbUE1pbTOpLnlrKw+U8MMW0UygtsnME7/vZcNhjLWqweSWtbQtu9JtvbSi2sPu/mq2n/8Fdjei1Yabg1GNyWJl7aHSdp13ryzaz8BHF2ocjQqKUKm8Z+ZXNWCz2XhhoVYMziw9cmfd0UKKUl4kzFd8Eahs6ALle0r3PXlKSCQSiUQi8TJKdtHeAvcv4McCpaTOx6AnxN+Hm07oy8whcYAIh24tMLy9jOoZwdWTe6NvwUmkoHZKtSTKzBjYDZ0O7jm5P/Fh/kxJidGIQ2rUeSM3TO3jmFaLUiDyhh47czBvXzwKX2P7vx/2jHQ6rIwGcWyPnD6INQ9M49IJvQAhhg1U5VMNiBcliGqn1NP/GcINU/sQG+rHbdP7YTToW32ududVORw+yuN4ItDXyNsXj+LPO6ZoQuS/vnYCMwYKsUMRGZT7rhzX1+lCe/i0gRoxLTkmiORo8R1/Y6azvE/JP1IOYZXdoZOgEjjDAn3pFuKHyWJjxf4SRxi44npTnFL1zWaHIHH6sHiHKLkvvxqzxYrFanMLAY8M8qV7hLhoLaxqwmyxarreHSyu5Yl5ex2d+tRcPyWZyyclEeLv7P4IMPeyMXx73QSig/0orG5kwa4C1qc7jzmztI5FdmFwzsgEfrhxEgtvn8LaB6Zx3pju3GUP1K9uECVcLyzcj9UGP23No9Ek/gerPXTmm5gc5TiWn7fnOearM4IAvtyQxbyd+QBsztKWWuZXNrA7r8rxOM0WqyYkvy3U67aU39VeDhTV8Pn6LKoaTNz57XbWHSpzlFbOV+V3bcoo1wTeFxyhGLYho9xx/B11innCYrXx+458t7w0T1itNkeXTjWHVM+rzWbj5q+2cs/3O8gsreP9FYf4aE0GD/y0q8PC0dWfbGLaSyscwtSBohrPpaRNZodryhObMst56c/9LNxd6Fby+NjvezjzrTW8s9zZsbO1c+POb7dz0dwNfLo2s83xL9hdSKPJyh8e/j/3FYjzXhFrC6saWZ1WyoaMcnyNekc5tqdOmc3mznNyHQlSgfAiPUOTAMiqd/8V51hjczil5CkhkUgkEonEuyiCxaoDJa1efCzZV8T9P+x0dFLrLJRfrn0MThEkLMCH9Q9OZ+Htxx9TZ7naKeWpfA/g/LE92fP4TC4a35O1D0zjkyvGtri/2SOEq+fOGSn0iQl2PEagr6HFbTrCjSc4ha7qBme5lE6n44YT+vDCOcP45roJ9IgIdDymIqoM7+EUd5Kignhg1gA2PDSDyycltfm4H6/JxGK1MSAuhLFJ7oHoCkF+Bvx9DPSPC2G4XQTT6USY+xkqxxPASYPiPO7ji6vH8811E/jfpaOZPSKB3tFC3EoMDyDQ1+gxh0wRVxQXl5Iv1T8uhHtOFuLMrdP6OvK7FtgdRpFBvo79KUKI4ngID/QhPNCX/rHidXxp0X76/vcP3lhyUBN8DKJUU+mEWFjdSFWDNsdpX37LrsQRKkfUpRN68fBpA/nxxolEB/sxPjmKyyYKEfDlRQdYlup0JK04UEJGaR2+Bj1TU2II9fehf1wIEUG+vHDOcKamiNLYmkYTi/YWOS6uXbnlxL6a53RAfIhDCFS7x9ROqUMltfz3593c8tU2VhwoYU+e2LdSTppX2cCmTK1Q9cOWXA56cKJ4Ql3u6Enc2JtfzS/b8trV+eyNJQcdZZKHSuq4cO56HvxplxBuVLlRu/OqNOJRftXhiVIZpXXUNplZsd9ZXppb0eBw0Ck0NFuYuzLdbT54LiX7eE0Gt369jWfm73Nb5spOD00CANJUJarFNU0O4XRzVgWf2R2MGaV17G3hXFl5oIRP12Y6nvfVB0s5UFTD5qwKGkwWx/P3v5Wi3NTT/+qBIndxcu2hUtKKa7j+8y28tSyNG77Ywreq8l2r1cYX60XDAbWDLa+yge05lVz64QZNJtzatFJHwwDFCQZCLP19R77m+TVZrI6GAttztOKh1WpzdPOcphLVn7a/BpdO6MWYXpH25017XDabjXPfW8sd32xr1dF1LJAKhBdJihYtfDMs7VfljxZK+Z5elu9JJBKJRCLxMtMHxqLTwaK9RR67dSm8+Od+vt2cw4oDnduJypEp5eIQigvzbzO4u7NRO6XCAj2X74FwAIEQf1pzFD12xmC+vW4Ct03vS0J4APfO7M+Ts4d0mtDWJyaYDy8fQ1yoP5dNTNIs8zHoOW9MD6KD/dDrdZzQPwZfo55JfYQTKC7U314uGEWPyEAPe28Zxd1w0iBtILrSHVDBX/V8KsJGj4hAAnwNjHLp7jclJVojTCrodDomJEdx8uA4dDodx/V15moBDFYF2bsyrneko8MiiOfr5hP7sv7B6cwaEue4gPzD7qzqFuLnCMY/WFzLp2szmf32akAIdwAp9gtrpfRJ6RyodnDFhPg53HNF1dp8JXAPc1dKF4N8DfTr5rxw1+t1XHN8MqN7OZ/Xq+zlmdnl9WxWiSbF9oyniX2iCPF3P3dD7MH21Y1m3rCPuZ+9pNSg1/Ho6YM4bVg81xzfmxNVJZf940KYkOyembY7zylUqMv6bvpiC/vtYtPMwSKIPq+iwVFaqIijH67OYOZrK3lrqbPzYktoyvfsbhiL1cZriw/w3593MeftNdzx7XY+WpOh2e6L9Vlc+fFGhyhYWd/scNH93xmDHKXLC3YVcKikVuXa1FHTZNa4XfIr2xYSMkrrSCuu4fmFqUx+finfbMxm+svLueObbSy3v28qbxeuJaavLj7A0wv28cCPOwFR7vfYb3sY8Mgf9PvvH3y2LtOxrs1mc4g0m1xcaa4cKKrhv/ZSTFfSimupbTLz35938b0q5+rp+Xs1Qur8nQU0m60aR2Btk5lrP9vM//22h4/XZrLuUBmXfLiBk19d6Xzswhpyyuv51e6we/SMQW5jcBUmF+4u4KK5G5jxykpNQ4I1aaWOaU+dOEGcG28uOciqg6UaR9QbqnOsrK4Zm82GzWbjP++s4davt2kci9nl9Q7X5I7cKodg9ev2PO74djv1zRZ8jXqO7xvN8O5hmCw2UgtrCPI1cNMJfUi2O0LTS+o0zQ2W7CtmR24Vi/YWdcgNezSQopQX6d19IgBZehuWJu8KU0rQuSzfk0gkEolE4m1G94rg/04XFwvvrzzk8Vd5m81Z/tGei7P20Giy8PT8vWTb3Qlq8cBbqJ1SrWUctZeIIF/GJ0c5RKibT+zLuWN6HPF+1UwfGMv6h6YzZ2Riq+u9ct4I1tw/jWS7Y0un0/H2xaP46toJLQakt8W43pEOgQ7guinJmtdRLdjNGhpPSmwwF4/vCeAoCVMI8fdhbFKk5jXwhJKrddYoEd4+OCFMs1xdopcYHkAfVZZXckwwOp2OuDB/dDqdwymlXIQqYtK4pEhsNvi/3/Y4RFOlVLJ/rOcOjOeO6eEYe7cQf+LsotTHazIcweg9IwPdzquzRiXy9bUTCPI1cNqw+DZfi2A/I0/OGeK47yoEnmwXglwJtZeM1jaZ2VtQTZCvgS+uGc9ZoxK5/5T+XDW5N29fNIrwQF+Hwy8yyJeYYD9NrplCdnk9J760nJzyek1gdZ3dSRkd7OsQHj9ak8HW7Er8ffTcfGJfx7pWG7y06AA72gi8VpfvZZTWsj2nkj92F/Da4oN8uSHb4YR7adF+lu8vxmazUVjVyMO/7GbZ/hI+X5fJ8wtTeXfFIaw28RpeeVxv1j84neToIJrMVoeg1Ts6iKGJYW5jcC3RBFEy+cGqdAqrGsmtqGfW6yuZ8cpK3l1+iNyKBh76eRdWGyxJLSa9pA6jXufIRPu/3/Zwy1dbsVhtNDRbHCLTcrvj7eIPNvDJ2kwaTVbMVhtvLEmjsr6Z2iYzO3OrHNlGOeUNFFY18vrig9zy1VY3F87t32xnT341AT4GTS4ZCIfbswv28eWGbF5a5OyEp4ioY+xNF+bvKuDhX3Zx3PNL+WlrLp+uzeSlP/fTZBfxXvwzla82Zrs9Pztyq7jxyy2YLDbG945kUp9oIlzEfrULrq7JzOO/79UsP31YPCBKQpXPpkV7PXe3yy6vd3TpVNxdNpvN4dwDEZq/aG8R32/OdbisftvhLEtVn2vldc1c8L/1LNlXxO3fbOe3HaI8tX9sCEaDngdPHehY96rJvYkK9nM4OX/alsfk55eSUVqHzWbjtSXi+b18UlKnlKQfCUf+ySY5bOKjB+Fns9Gk05Gft4EeydO9NhZZvieRSCQSiaQrcdH4XjyzIJXKehPZ5fX0igrSLC+paXJ0LWstA6QjLNpbxNxVTmeDTxcQpdROqYBOKrHrKvj7iFK6jvDQqQN4ZkEq109J5v2VWhedUoYH8O11EyiuaWLGoFjCA30crh01saH+LLpzqmp7d/HlkyvHUddk5tfteTz2+16uPb53m2N07Yb48nkjuHDuesBZjqeUqqlzrUDkqQX7GR2dJxXX15yRiZqMKsBRppjiQZTS62DWkDjeW36IvMoGuoX6EWsXx0prm1lqL7OLCPQh2M/ouGA+bVg8r5w3AoBtj56MsZ3i4PSBsfx+y2SC/AwkxwQz5qm/KK0VrpIZAz2LUopTSuHySUnEhvo7Hl/NgLhQfr35OMIDfdDpdEQG+RIR6OMQK8b1jmRjRjkZpXW8ufSgI19qbFKEI1B+cEKYQ3hUhL1rj0/mkvG9WLG/hAnJkezJr2ZJajGr00rJqahnakoMqw6W8uHqDBpNFu6ckcJ/f9nlODaAZftLWKYqhQN4/MzBLNxdyLr0Mq74eBN3zkjRBMurBRfA4QTT6XScOjSet5al8fVGIQolRQUSEejLVnsw932n9OeFhfvJq2xgY0Y5w7qHOf6PHvp5F2sPlfHU/H0khPk7MqMUlGpCRecf1SuCqyb3Zmt2JTkV9czbWUByTDAJYf4OZ5LNBie+tByAUH8jL547nLu/20FpbRMjnviL2FA/JvfVdimd8OwSx/S27EqGdQ+jvtniOPcNeh2L757K2rRSTeB4Tnm9W8dMNY+cPojz/7eOrLJ6x48Sd323w229RpOVPz3sZ4W9I2ZkkC8vnzccEF1FK+pNhAf6UFlvYkt2BWaLFZ1Ox13fbaegqpHuEQH4GvXogCdnD+GP3YUUVTcx7eUVnDUykSX7PLt1F+0tdLgQ9xXUYLXayK9qoKbJjI9BR4/IQNJL6rj+8y2a7XbnVWOz2Zi3s4Cft+Vplm3IKHfr5qk4DCckR3HN5N7sK6zm2inJAA5RCsT//tPz93Ht8b3ZnVdNoK+Ba49P9jj2Y4kUpbyIwWCkJz4cxExGwWavilIOp5Qs35NIJBKJRNIF8DXqGZgQyo6cStbZu4GphalMVUjukeZhFFc3si2n0i3TxlPp1rFGPYYkF2Hu38h1U/pw9qjuRAX7MSA+hMggPy7/aCMACWEBjjKx8aryrpZEKU8oF/zXTxUXar5GPb5GXy6bmMSEPlH0jQluYw/u4tbEPlFcNL4ny1OLmZAcpQk/VrumAIwGPTMGduOX7cIBoYhSpw2Nd3Sf+/SqcSSG+zsywdSdChWmDehGdLAf0SF+QpQK8XM4pdSEB/oS4GNwiFJqt1hHS3qGqsoFe0UFUVrbzIge4S2G7vsZDZw8KJb16WVMSYnhBlUemSeUPC6FNy8cxWUfbeC8MT14as4Qft2ez93f7+C7zc6MnsfOHMxpb4hyx4hAHxLDnWWhPSMDuX5qH4L9jHx3g6hg+WBVOktSi3nxT9G5rG+3YI1T5ZrPNjumfQw6t+wugKV3TyU5JpjZIxJ47o9UvtmUw0drMjSlU66ou1GeNkyIUgq9ooIY2TOcn7bl4WPQcfnEJF5YuJ/6Zgvnvb+OIYmhfHj5WMIDfdiQ4RQulaYGL5wzjEl9orhw7npyyrXuqqkpMQzrHs7K+07kxy253P39Dt5YctBR0jimV4SjJFOvg7cvHsXx/WLYO7naUSZaVN3Ej1vFcx4b6udw+4QF+BDibyS3osGRu6WIQuN7R5IYHuB4TWNC/GgyWahuNGtK5NSEB/owrHsY0wfEMn9Xgcd19Dq4YFxPvlK51Tzx8GkD6R4hzoXEiAD2FlRzwdiefLkhi7TiWt5edojC6gb+3FOEr0HPy+cOZ0xSJHqd+P8enBDKztwqMkrrePkvITDqdE6xT0HdTKC2yUx2eb2jYUGfmGAGxIVoctEU8iobuPXrbY7cKRDOXeWYXMXG7qpy54dP15YkJscE0TMy0OEAXryviDq7UDZjYKzXXVIgRSmv09snnIPmUjLK9jHFi+OwOTKlvP+LoEQikUgkEgnA8O5h7Mip5IGfdqHXwRsXjmTF/hLOGtWd3AqVKHWETqlrP9vMjlz3TJCu4JTS6XQsuXsqjSZLl7h46AoouV7/GdldMz86xHPeV3gLAfGeuGFKH8b3jmJIojYXSq/XOQLZ20N8mL+jNTzA0/byNp1OR397BlSov5EoD6/pacMSnKKU/VjDAn34/OpxlNc1OwLC1WNzjH9qH04fFk9Pe8etYYnif2hY93CPImtEoI9GNFIu1I+UoYlhbMmqcJQ6tcT/Lhtz2I8xuV80K+87kehgP4wGPWeP7s63m3IcjrJuIX4Mig/lkgk9+XJDNpdOTCIpWpQrNlusfHTFGLfSxTEupYeKINUrKlDTLe6c0d05sX83bv5qq2b9AXEhjnLU8EBfnpozhMX7ih0d6QYnhJJdVq/J8AryNTBKVcY2MD6UgfGhDpE8KSqQM4YlUN9sYXLfaIJcxrw7r5q7vtvOHTNSsFhtRAX5MqFPFPN3FtA7OohzRnVHr9dx4bievLBwP4MTQh1OshP6O8+ls0d3Z39RDf/7//buPCrK894D+HcWZliHxQGGHRREkU1BETXGKFGJTdxyo4YkaFK9GrFaNW1M4pamh6Q5tbapV5vbaNreuNScaGyiporRJIa4RRQXqBoiRh1QjGzKOs/9Y+QNA4Ogwmx8P+fMcXjfd4bnN8/g/PjxLF98h1t1jegf6oX/+3kK/u+bi6isacDw3r5IujN97pnBYfjXySsmBZUAT2dkpIRKo8CmDwnHc6lhxkX7hcDu03ocPG/8A8OjMcbRc739PfA/GQMQ4OmMt3YXmOze2JJOY5ziOi4+QCpKpfX1g6eLCk8lB+PrC2UI8nKBt5sKGw+1nrrX3GNxP70vXxzRC96uTvj5QxGI8nPHoq0n8Ie9xhiMnzuJJkVuwDhd7mSLz4zYQE/88OOtVuu1NXf6SgW+LzO+Zn10HkgI8ZJ+1v/ybBJcVQq8s+88DhfdMClIAcCv0/vghx9vYcPB76VjPm4qJIZ4YfpdNoNQKxXYu/BhyGXA0o9PYdPhS9JOpebWZrMGFqWsLNw9CLh5HUWVd//B6WoG3Jm+B+v/RZCIiIgIAOKDvQAYd1wyCCBr43EAxgV5my983DRS6sK1Kng4K+Hn0XpkxtcXrqOsqq7VDmsAzBakgHsfKdJVenVgdA4Bj/b1M3u8f4iXtK5Le+RymfSL94NYPSURz60/jJfT+wAwHT2V2rMHhvf2xeCePmanDA7vrZXuN1/P6aEo31bXNvnoxSHYc6YEC9KiTKZ8rniiH7JGRsJf44yKmnp4qJUmBREvV5XJovIh3q1HXd2PXz7aG4N79pCKD12lZRHt9Qn9sGBzHgpLKjGxfxBkMhlWPN4PC9J6Q3unwLdr/kNQK+XwMzOCy9wi9TqNMz6ZNwxv7irAB4eK8faT8dI6bHM3Gq/po/NASoRPq/XZlAo5Hk8IkAoJ//1wL/zrxBXsOVOCif2DkNqrByK0blC2KIA/mRSM33xiXMsoTOsmFZXMkcuAg+fLEOBpnO6X0tMHf3gqEak9e2BQhI9UtJw9vBcSgr0QF+yJ/1qbCw9nJWICTONdkt4HTgoZTl2uwNv/FQ9nJwV+bmZ6l6+HGvsWjcDV8tsY+uY+GAQwsX+QyXpqzwwOQw93NZ4dbNydcUS0Hx763edQymUm74umAtFr42Lw1F9ycauN3VSbXttHov3gplKguq4R80ZGSaOtmgpHzf9gAQBvTopDkLcL/vsfx3CrrhGDInxMpg33D/VG/ztrjU0aEISLZdVYd+A71DUa8MaEOIyNbV1YfWZwGHaf1puMhBoWpcWOvCtSUUqtlKO2wQCtuwoJwV7IKSjF6r3/gfedQnS0ToMpA0NQfOMWfhYfKP2/c+mGcVqmh7MSTw8KlaYpj+zjhwitG/TlNdIUx3kjIzFjaPtTips+yyYPCJamhRpfM5+2HmJRLEpZWXRAMnDzBI7WlEA01EGmtM5fwLimFBEREdma5ruHNVdZ2yAt8AoYR0qdvlKOCWsOIqyHG/b8cjjKb9djZ74ejycEoKKmAdPXH0FdowGxQZ4ma2zU32WKhy0sdE7t+/QXw/Dluettro0yPy0KFTUN7Y7a6UwpPXvg9MoxrYoNgHEtrb8/P6jNx6qVCqx8oh/+deIKJrUYDdaWAaHerXYPBIxFraaRUBpnJ+yc/xBq6hvxaLMdycJ6/FTY6ayRUp4uThgbq+uU57oXfXQa7F4wHA2NBum1VyrkUkEKwF13dnRSyOHnoUZpZS0ejfHH1IEhiPLzgIezE34zPhYvPhJpMl3yoSgtvjx3Hb+ZEIuB4eZ/wX8yKRh/+/p7BHu7Ij1Wh0hfdzg7KbDw0d5ttmV8YqBUlOqlbV2Unj8qChsOFuEfL6TgjznnsK+gFB8eM06hGxjuA5VSjmfuFIOayOXGnSIB4LNfmp+jI5PJ8NKYPm2+Pi0FeLpgysBQ7D1bgqdTQhHg6YLpQ8IRG+RpsgsmYHzdd2QNxe26RrPvs9ggT+xbNAK7Tl1FQ6PAb+8sxv/ZguHIv1yOyQOMGye4qBRYP30g9BU1raZ0AsbprBpnJSpqGuDt6oSpd4p5f81MxsZDxVjWYnpby/gXjo5GxuAwlFXVSTtftpQQ4oWTy0fjyPc/4qm/5AIAHorUorTZVMY1Tw9ASWUNJiQGYXveZeQUlEqLwQNAnwAPuKqUWP54P5PnnjYoBGl9/eDjpoJSIcfw3r64VlkrfW4lhnhJRam+AR0fvQkY/58I9HTGlfIaaN3V6Km1jSnhLEpZ2bD45+F85q+4qJTj7KmNiEmcbpV2NI2U4vQ9IiIishW9fN0RoXUzTh2J0uKj45fxzOBQfHz8isloj7oGA17/1xnUNwqcLzXuhPWrD0/iXGkVLlyrQnVtg7QWR96lH02KUuZ2sGriZCMjpeju+gV6ttrxrjlXlRLZk+Is2CIjcwWpjsocEo7Mu0zJuV8tiyBl1XUI8/np56HlDoT26kFe+/cyB+KfRy9h0ejeJlM/5XJZq/W7/jS1P8qqaxHpZ34HRMD4/vx47jBoPVRwUsgRE6jBO9P637UNWnc1/ve5ZPxYXSdNxWzul4/2xvxRUZDLZZg6MERauB6w/JSs7ElxyMZPP18rnujX5rXG0a9t03k6Y8bQCJRV1WLN/vOI9HVHtM5DmvLapOV0uuZkMhn6BmhwqOiGyf/1Q3ppMaSXts3HNeevcW5zLbTm3ycpzBv9AjWoqW/EgDBvxARq4KKS48mkEGnTBQCYkBiEi2W3kHuhDPmXyyGXmR+V1/S8zUfxNRUSmzQvxPW9hynFgPE9/HhCIP7yxXcY0quH2ZGa1sCilJW5OmvwsFqHz+pKsKtgi9WKUlxTioiIiGyNQi7DJ/OGocEg4KZS4IWHIhAToEF4Dze88elZk2ubL/A78X++lu7/I/ciGputPpv/QwUmNvt9sPmC6S3ZwkLnRF0h65FIvPvFd/j5sAiE+BhHt3i7qu55N0RHFBfsabJo+914u6mk6VjtPee9am/qY9O0vJF9/DBtUCiuVdZiVF+/ex49Y4t6uKtxYPEj9z2FOiawqSjVtVOfFXIZ/pU1DLI7C6A7OynwxoTWBXA3tRKvPNYXQgjkfleGRoMwO828IxJDvJAc5o1ALxd4ujrd8+PnjYqCh7MSkwZ0bBSmJbAoZQPSI5/AZ2f+Fx/fKkbmxa+gDRtm8TZIa0rZSLWUiIiICIDJor5No2Eyh4Rj79kS3KprxO26RmlKRNM6I801jZByVytRVduAU5dN148qLmu981ETJzn/WEeOafGYaGSNjJSKUHcb3UK2TamQW2UkYFe7n4JLk2cHh0FfXoMZQ8M7r0FtaL7RQHtkMlmHR2u1xdlJgQ/nDLnvx7urlcgaGfVAbehs/KS1AcP7z0YkVPhRIccv9s7B4WN/sXgbDMKYsHGkFBEREdk6J4Ucm2YOxo6sYSbTkX73ZIJ0f9qgUEy6swYJALw+3vhL9+kr5Wg0/DRyqmmk1DODQ/G7J+Ox7pkB0rl7+WWDyN5wVBQ5qp6+7lj7TBJig+59hBpZHisQNsBJqcKqse/BVQD5SuCFU3/GPz+bb9E2CGn3Pb4liIiIyPY1je4OvVOUeixOh8fidEgO80aQlwsWj+6NpweFQiGXYfKAYIxPDIKLk3Ek1ao9haipN46oatrmPdrfA08lhyCtrz+G9/bFtEEh5r8xERERdRqbqECsWbMG4eHhcHZ2RkpKCg4fPnzX67du3Yo+ffrA2dkZcXFx2Llzp8l5IQSWLVuGgIAAuLi4IC0tDefOnevKEB5YhH8iNqX/HT9TGecOZ1/NQfam0dj0yQs4+vXbqL/+H9yquIz8E//ArfIfOv37c6FzIiIiskczh/fEvJGR+M34WMhkMmydnYoDL41AD3c1ksN9cPTVNPzuyXgo5DJpXZc1n1/A258Vovx2PQr0FQCA0B7GBXGVCjn+/vwgZE+Kt1pMRERE3YVMiGYrP1rBli1b8Nxzz2HdunVISUnB6tWrsXXrVhQWFsLPz6/V9V9//TWGDx+O7Oxs/OxnP8PGjRvx1ltv4dtvv0VsbCwA4K233kJ2djb+9re/ISIiAkuXLkV+fj7OnDkDZ+f2FxSrqKiAp6cnysvLodFYdqE4YTBg8ZZH8e+6UpPjciEgB9Agk0FtMGCwUEEDBZQyBR4JS0Ns7/G4WV6M4sqLOFr8OQyN9ZgQmwlv/wT08O4FJydnoKmr7/xlsbTkFG5eO4WdBVvwXvV5AMCruhGYOuYdS4ZMRETkEKyZP3QlR4qrQF+Bdw98h4+OXwYAODvJUVNvgLOTHF/86pH7XniWiIiITHU0f7B6USolJQUDBw7En//8ZwCAwWBASEgI5s2bh5dffrnV9VOmTEF1dTU++eQT6djgwYORmJiIdevWQQiBwMBALFq0CIsXLwYAlJeXw9/fH++//z6mTp3abpusnXw1NNZj37drcfziPlyuvYkT9TdwQ2bsJjeDQPU9rm8gEwK+BgB3RkOFyp1xzVCLiy12lFELgQ1DshHX+/HOCIOIiKhbsXb+0FUcLS4hBNL/+CUK9JUAgAitG347MfaBF58lIiKin3Q0f7Dq7nt1dXU4duwYlixZIh2Ty+VIS0tDbm6u2cfk5uZi4cKFJsfGjBmD7du3AwCKioqg1+uRlpYmnff09ERKSgpyc3PNFqVqa2tRW1srfV1RUfEgYT0wpcIJowf+AqMH/gKAMXm6XnkZNbeuIdg/EeevHMaXZ7egEQZcr7qKr24WoljWCI0BCIYCfVQ++BEGHKy/DgOMo6tKFQBwZ4QU6gCFDAoh4CZk6KV0Q0bP8RicOBOebkzIiIiIyHHJZDLMGdEL8zfnIdjbBVv+ezBHSBEREVmJVYtS169fR2NjI/z9/U2O+/v7o6CgwOxj9Hq92ev1er10vulYW9e0lJ2djZUrV95XDJYgk8ngqwkGNMEAgKigFEQFpZhcU99YDydF620zRUM9yn48j6vXz0CudEZ9fTV+KD0FL00w4qMeh8YjwCIxEBEREdmKJxIC4enihNggT2jd1dZuDhERUbdl1aKUrViyZInJ6KuKigqEhNjXjivmClIAIFM6QevbF1rfvtKxxJinLNUsIiIiIpsjk8kwIrr12qVERERkWVbdak2r1UKhUKCkpMTkeElJCXQ6ndnH6HS6u17f9O+9PKdarYZGozG5ERERERERERFR17FqUUqlUiEpKQk5OTnSMYPBgJycHKSmppp9TGpqqsn1ALBnzx7p+oiICOh0OpNrKioqcOjQoTafk4iIiIiIiIiILMvq0/cWLlyIzMxMJCcnY9CgQVi9ejWqq6sxY8YMAMBzzz2HoKAgZGdnAwDmz5+Phx9+GL///e8xbtw4bN68GUePHsW7774LwDgce8GCBXjjjTcQFRWFiIgILF26FIGBgZgwYYK1wiQiIiIiIiIiomasXpSaMmUKrl27hmXLlkGv1yMxMRG7d++WFiovLi6GXP7TgK4hQ4Zg48aNeO211/DKK68gKioK27dvR2xsrHTNr371K1RXV2PWrFm4efMmhg0bht27d8PZmTurEBERERERERHZApkQQli7EbamoqICnp6eKC8v5/pSRERE1CGOmj84alxERETUdTqaP1h1TSkiIiIiIiIiIuqeWJQiIiIiIiIiIiKLY1GKiIiIiIiIiIgsjkUpIiIiIiIiIiKyOBaliIiIiIiIiIjI4liUIiIiIiIiIiIii2NRioiIiMjBrVmzBuHh4XB2dkZKSgoOHz5s7SYRERERsShFRERE5Mi2bNmChQsXYvny5fj222+RkJCAMWPGoLS01NpNIyIiom6ORSkiIiIiB7Zq1SrMnDkTM2bMQExMDNatWwdXV1esX7/e2k0jIiKibo5FKSIiIiIHVVdXh2PHjiEtLU06JpfLkZaWhtzcXLOPqa2tRUVFhcmNiIiIqCsord0AWySEAAAmYURERNRhTXlDUx5hC65fv47Gxkb4+/ubHPf390dBQYHZx2RnZ2PlypWtjjMvIiIioo7qaF7EopQZlZWVAICQkBArt4SIiIjsTWVlJTw9Pa3djPu2ZMkSLFy4UPr68uXLiImJYV5ERERE96y9vIhFKTMCAwNx6dIleHh4QCaTdfrzV1RUICQkBJcuXYJGo+n057c1jNfxdbeYGa9jY7yOr6tiFkKgsrISgYGBnfacD0qr1UKhUKCkpMTkeElJCXQ6ndnHqNVqqNVq6Wt3d3fmRZ2I8To2xuv4ulvMjNexdWW8Hc2LWJQyQy6XIzg4uMu/j0aj6RZv9CaM1/F1t5gZr2NjvI6vK2K2tRFSKpUKSUlJyMnJwYQJEwAABoMBOTk5yMrK6tBzMC/qGozXsTFex9fdYma8jq2r4u1IXsSiFBEREZEDW7hwITIzM5GcnIxBgwZh9erVqK6uxowZM6zdNCIiIurmWJQiIiIicmBTpkzBtWvXsGzZMuj1eiQmJmL37t2tFj8nIiIisjQWpaxArVZj+fLlJus1ODLG6/i6W8yM17ExXsfXHWPOysrq8HQ9S+tu/cF4HRvjdXzdLWbG69hsIV6ZsKV9i4mIiIiIiIiIqFuQW7sBRERERERERETU/bAoRUREREREREREFseiFBERERERERERWRyLUlawZs0ahIeHw9nZGSkpKTh8+LC1m9QpVqxYAZlMZnLr06ePdL6mpgZz585Fjx494O7ujsmTJ6OkpMSKLb43X3zxBR5//HEEBgZCJpNh+/btJueFEFi2bBkCAgLg4uKCtLQ0nDt3zuSaGzduICMjAxqNBl5eXnjhhRdQVVVlwSg6rr14p0+f3qq/x44da3KNPcWbnZ2NgQMHwsPDA35+fpgwYQIKCwtNrunIe7i4uBjjxo2Dq6sr/Pz88NJLL6GhocGSoXRIR+IdMWJEqz6ePXu2yTX2Eu/atWsRHx8PjUYDjUaD1NRU7Nq1SzrvSH0LtB+vI/WtOW+++SZkMhkWLFggHXO0PnYUzImYE9lDjgB0r7yIOZFj50QA8yLmRTbWx4IsavPmzUKlUon169eL06dPi5kzZwovLy9RUlJi7aY9sOXLl4t+/fqJq1evSrdr165J52fPni1CQkJETk6OOHr0qBg8eLAYMmSIFVt8b3bu3CleffVV8dFHHwkAYtu2bSbn33zzTeHp6Sm2b98uTpw4IZ544gkREREhbt++LV0zduxYkZCQIL755hvx5ZdfisjISDFt2jQLR9Ix7cWbmZkpxo4da9LfN27cMLnGnuIdM2aM2LBhgzh16pTIy8sTjz32mAgNDRVVVVXSNe29hxsaGkRsbKxIS0sTx48fFzt37hRarVYsWbLEGiHdVUfiffjhh8XMmTNN+ri8vFw6b0/x7tixQ3z66afiP//5jygsLBSvvPKKcHJyEqdOnRJCOFbfCtF+vI7Uty0dPnxYhIeHi/j4eDF//nzpuKP1sSNgTsScyF5yBCG6V17EnMixcyIhmBcxL7KtPmZRysIGDRok5s6dK33d2NgoAgMDRXZ2thVb1TmWL18uEhISzJ67efOmcHJyElu3bpWOnT17VgAQubm5Fmph52mZjBgMBqHT6cTbb78tHbt586ZQq9Vi06ZNQgghzpw5IwCII0eOSNfs2rVLyGQycfnyZYu1/X60lXyNHz++zcfYc7xCCFFaWioAiAMHDgghOvYe3rlzp5DL5UKv10vXrF27Vmg0GlFbW2vZAO5Ry3iFMH5AN//wasme4xVCCG9vb/HXv/7V4fu2SVO8Qjhu31ZWVoqoqCixZ88ekxi7Sx/bG+ZEzInsNUfobnkRcyLH/dxsjnnR/Davtdd47SUv4vQ9C6qrq8OxY8eQlpYmHZPL5UhLS0Nubq4VW9Z5zp07h8DAQPTs2RMZGRkoLi4GABw7dgz19fUmsffp0wehoaEOEXtRURH0er1JfJ6enkhJSZHiy83NhZeXF5KTk6Vr0tLSIJfLcejQIYu3uTPs378ffn5+iI6Oxpw5c1BWViads/d4y8vLAQA+Pj4AOvYezs3NRVxcHPz9/aVrxowZg4qKCpw+fdqCrb93LeNt8sEHH0Cr1SI2NhZLlizBrVu3pHP2Gm9jYyM2b96M6upqpKamOnzftoy3iSP27dy5czFu3DiTvgQc/+fXHjEnYk5kzzlCWxw1L2JOZOSIn5sA86Imjti/9pIXKTv12eiurl+/jsbGRpOOBQB/f38UFBRYqVWdJyUlBe+//z6io6Nx9epVrFy5Eg899BBOnToFvV4PlUoFLy8vk8f4+/tDr9dbp8GdqCkGc33bdE6v18PPz8/kvFKphI+Pj12+BmPHjsWkSZMQERGBCxcu4JVXXkF6ejpyc3OhUCjsOl6DwYAFCxZg6NChiI2NBYAOvYf1er3Z90DTOVtlLl4AePrppxEWFobAwECcPHkSv/71r1FYWIiPPvoIgP3Fm5+fj9TUVNTU1MDd3R3btm1DTEwM8vLyHLJv24oXcLy+BYDNmzfj22+/xZEjR1qdc+SfX3vFnIg5kb3mCG1x1LyIOZGRI35uMi9iXmQrfcyiFHWa9PR06X58fDxSUlIQFhaGf/7zn3BxcbFiy6grTJ06VbofFxeH+Ph49OrVC/v378eoUaOs2LIHN3fuXJw6dQpfffWVtZtiEW3FO2vWLOl+XFwcAgICMGrUKFy4cAG9evWydDMfWHR0NPLy8lBeXo4PP/wQmZmZOHDggLWb1WXaijcmJsbh+vbSpUuYP38+9uzZA2dnZ2s3h4g5UTfkqHkRcyIjR/vcBJgXMS+yHZy+Z0FarRYKhaLVqvYlJSXQ6XRWalXX8fLyQu/evXH+/HnodDrU1dXh5s2bJtc4SuxNMdytb3U6HUpLS03ONzQ04MaNGw7xGvTs2RNarRbnz58HYL/xZmVl4ZNPPsHnn3+O4OBg6XhH3sM6nc7se6DpnC1qK15zUlJSAMCkj+0pXpVKhcjISCQlJSE7OxsJCQn44x//6LB921a85th73x47dgylpaUYMGAAlEollEolDhw4gD/96U9QKpXw9/d3yD62Z8yJmBPZY45wLxwhL2JO1DZ7/9wEmBcxL7KdPmZRyoJUKhWSkpKQk5MjHTMYDMjJyTGZz+ooqqqqcOHCBQQEBCApKQlOTk4msRcWFqK4uNghYo+IiIBOpzOJr6KiAocOHZLiS01Nxc2bN3Hs2DHpmn379sFgMEj/8dmzH374AWVlZQgICABgf/EKIZCVlYVt27Zh3759iIiIMDnfkfdwamoq8vPzTZLOPXv2QKPRSMODbUV78ZqTl5cHACZ9bC/xmmMwGFBbW+twfduWpnjNsfe+HTVqFPLz85GXlyfdkpOTkZGRId3vDn1sT5gTMSeypxzhfthzXsScqPvlRADzoubsvX/tLi/q1GXTqV2bN28WarVavP/+++LMmTNi1qxZwsvLy2RVe3u1aNEisX//flFUVCQOHjwo0tLShFarFaWlpUII47aToaGhYt++feLo0aMiNTVVpKamWrnVHVdZWSmOHz8ujh8/LgCIVatWiePHj4uLFy8KIYzbH3t5eYmPP/5YnDx5UowfP97s9sf9+/cXhw4dEl999ZWIioqyya2Ahbh7vJWVlWLx4sUiNzdXFBUVib1794oBAwaIqKgoUVNTIz2HPcU7Z84c4enpKfbv32+yHeytW7eka9p7DzdtnTp69GiRl5cndu/eLXx9fW1yu9j24j1//rx4/fXXxdGjR0VRUZH4+OOPRc+ePcXw4cOl57CneF9++WVx4MABUVRUJE6ePClefvllIZPJxL///W8hhGP1rRB3j9fR+rYtLXfScbQ+dgTMiZgT2UuOIET3youYEzl2TiQE8yLmRbbVxyxKWcE777wjQkNDhUqlEoMGDRLffPONtZvUKaZMmSICAgKESqUSQUFBYsqUKeL8+fPS+du3b4sXX3xReHt7C1dXVzFx4kRx9epVK7b43nz++ecCQKtbZmamEMK4BfLSpUuFv7+/UKvVYtSoUaKwsNDkOcrKysS0adOEu7u70Gg0YsaMGaKystIK0bTvbvHeunVLjB49Wvj6+gonJycRFhYmZs6c2eoXCXuK11ysAMSGDRukazryHv7+++9Fenq6cHFxEVqtVixatEjU19dbOJr2tRdvcXGxGD58uPDx8RFqtVpERkaKl156SZSXl5s8j73E+/zzz4uwsDChUqmEr6+vGDVqlJR4CeFYfSvE3eN1tL5tS8vky9H62FEwJ2JOZA85ghDdKy9iTuTYOZEQzIuYF9lWH8uEEKJzx14RERERERERERHdHdeUIiIiIiIiIiIii2NRioiIiIiIiIiILI5FKSIiIiIiIiIisjgWpYiIiIiIiIiIyOJYlCIiIiIiIiIiIotjUYqIiIiIiIiIiCyORSkiIiIiIiIiIrI4FqWIiIiIiIiIiMjiWJQiIrIAmUyG7du3W7sZRERERFbHvIiImrAoRUQOb/r06ZDJZK1uY8eOtXbTiIiIiCyKeRER2RKltRtARGQJY8eOxYYNG0yOqdVqK7WGiIiIyHqYFxGRreBIKSLqFtRqNXQ6ncnN29sbgHEI+dq1a5Geng4XFxf07NkTH374ocnj8/PzMXLkSLi4uKBHjx6YNWsWqqqqTK5Zv349+vXrB7VajYCAAGRlZZmcv379OiZOnAhXV1dERUVhx44dXRs0ERERkRnMi4jIVrAoRUQEYOnSpZg8eTJOnDiBjIwMTJ06FWfPngUAVFdXY8yYMfD29saRI0ewdetW7N271yS5Wrt2LebOnYtZs2YhPz8fO3bsQGRkpMn3WLlyJZ566imcPHkSjz32GDIyMnDjxg2LxklERETUHuZFRGQxgojIwWVmZgqFQiHc3NxMbr/97W+FEEIAELNnzzZ5TEpKipgzZ44QQoh3331XeHt7i6qqKun8p59+KuRyudDr9UIIIQIDA8Wrr77aZhsAiNdee036uqqqSgAQu3bt6rQ4iYiIiNrDvIiIbAnXlCKibuGRRx7B2rVrTY75+PhI91NTU03OpaamIi8vDwBw9uxZJCQkwM3NTTo/dOhQGAwGFBYWQiaT4cqVKxg1atRd2xAfHy/dd3Nzg0ajQWlp6f2GRERERHRfmBcRka1gUYqIugU3N7dWw8Y7i4uLS4euc3JyMvlaJpPBYDB0RZOIiIiI2sS8iIhsBdeUIiIC8M0337T6um/fvgCAvn374sSJE6iurpbOHzx4EHK5HNHR0fDw8EB4eDhycnIs2mYiIiKirsC8iIgshSOliKhbqK2thV6vNzmmVCqh1WoBAFu3bkVycjKGDRuGDz74AIcPH8Z7770HAMjIyMDy5cuRmZmJFStW4Nq1a5g3bx6effZZ+Pv7AwBWrFiB2bNnw8/PD+np6aisrMTBgwcxb948ywZKRERE1A7mRURkK1iUIqJuYffu3QgICDA5Fh0djYKCAgDGHWA2b96MF198EQEBAdi0aRNiYmIAAK6urvjss88wf/58DBw4EK6urpg8eTJWrVolPVdmZiZqamrwhz/8AYsXL4ZWq8WTTz5puQCJiIiIOoh5ERHZCpkQQli7EURE1iSTybBt2zZMmDDB2k0hIiIisirmRURkSVxTioiIiIiIiIiILI5FKSIiIiIiIiIisjhO3yMiIiIiIiIiIovjSCkiIiIiIiIiIrI4FqWIiIiIiIiIiMjiWJQiIiIiIiIiIiKLY1GKiIiIiIiIiIgsjkUpIiIiIiIiIiKyOBaliIiIiIiIiIjI4liUIiIiIiIiIiIii2NRioiIiIiIiIiILI5FKSIiIiIiIiIisrj/B/06Hl/SRx+oAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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wsLwyiuvOAzvq4zKXGv8+PHYs2cP2rdvjyeeeALff/+9R/eQLF26FEOGDEF0dDQA4JZbbkFeXh42btxof2adTocBAwaonl/ed+KJ3r17u+xbtWoV+vfvj9jYWISFheHFF19Eenq6w71vvPFGt9ecOHEiPvvsM5SUlMBkMuHTTz/Fgw8+WK1+VoSZUrWMNaWIiIiIKsle6FzKlCqQjx3fJJYDpgCXTgH9Jnl2bbOixkbyDPEBgCd2VamrROR/ggN1ODBriM/u7YmgoCAMHjwYgwcPxrRp0/Dwww9jxowZDnWKyqPVamF1GvbsXKsIAEJDHWc0DQ52X++voED8P33x4sVISkpyOFbR8LmqXKtnz544ceIEvv32W/z444+45557kJycjC+++KLS9zGbzVixYgUyMjIQEBDgsH/p0qW48cYby31moPzvBKj6d71161aMGTMGM2fOxJAhQ+zZWG+99Val73377bfDYDDgq6++gl6vR2lpKUaOHFnuOdXFoFQtkzKlWFOKiIiIqALuCp0DQJFt1qg2yUB8X8+vbXF9wSci8oRGo6nUELq6qFOnTlizZg0AoGPHjvb6SlK21IEDB5Cbm4tOnToBEMPb9u/f73CNPXv2VJjt061bN6xYsQKlpaUubWNiYtC0aVMcP34cY8aMqdbzVPZaERERGDVqFEaNGoWRI0di6NChyMnJQcOGDREYGAizufwaYevXr8fly5exe/duh8DZ/v37MWHCBOTm5qJr166wWCz4+eef7cP3lMr7TgDxXStnGTSbzdi/fz9uuOGGcvu2ZcsWtGjRAi+88IJ936lTp1zunZaWhgkTJqheIyAgAOPGjcOyZcug1+sxevToCgNZ1VU//wuqx6z2oJSPO0JERERU10mFzu01pYpU2kRW7dpqNaWIiK4wFy9exN13340HH3wQ3bp1Q3h4OP744w+88cYbGDZsGAAgOTkZXbt2xZgxYzB//nyUlZXhsccew4ABA+xDxAYNGoQ333wTH330Efr164ePP/4Y+/fvR48ePcq9f0pKCt59912MHj0aU6dORWRkJLZt24a+ffuiffv2mDlzJp544glERkZi6NChMBqN+OOPP3Dp0iWkpqZ69KwVXWvevHmIi4tDjx49oNVqsXr1asTGxiIqKgqAqMGUlpaG/v37w2AwoEGDBi73WLJkCW699VZ7HSZJp06d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iv/+97+YNWsWunTp4nDs4Ycfxrx58/DXX3/h3nvvxezZszF8+HDMmTMHcXFx2L17N5o2bYp+/fphxowZuPHGG9G6dWuMHj0aZWVlWL9+vT3zatCgQViwYAH69esHs9mMKVOmqKa6O2vbti2++OILbNmyBQ0aNMC8efOQmZlp/90fFBSEKVOm4Nlnn4Ver0f//v2RnZ2Nv/76Cw899JDDs6SkpCA0NNSjfyWlOibAADy6FbBaAD0zpYiIqqqq7y2PP/44rr/+esybNw+33347Nm7ciG+//dbhPWP69Om47bbb0Lx5c4wcORJarRZ79+7F/v378corrwCAPVjTv39/GAwGe82mykhOTka/fv0wfPhwvPHGG2jXrh3OnTtnn3Slc+fO+Ne//oWRI0eiZcuWOHPmDHbs2IG77rrLfu+CggKkpaWhe/fuCAkJcckQys7OxjfffIO1a9e6vB+NHTsWI0aMQE5ODlJSUvDuu+9i9OjRmDp1KiIjI7Ft2zb07dsX7du3x0svvYR//vOfaNKkCW6++WZcvnwZmzdvxuOPP47g4GBcffXVeO2119CyZUtkZWXhxRdfrNR3UNHPLyEhAePGjcODDz6Id955B927d8epU6eQlZVlr7Gp0+kwfvx4TJ06FW3btnWo311rrOQiLy/PCsCal5fn664QEV0RiouLrQcOHLAWFxf7uitVsmzZMmtkZKR9+6effrICsF66dMmh3YkTJ6w33HCDNTg42BofH29dsGCBdcCAAdbJkyfb27Ro0cL69ttv27cBWL/66iuH60RGRlqXLVumei/nvlitVutXX31lVf5KLy0ttaakpFgjIiKsDRo0sE6ZMsV69913W0ePHq36fF988YVVq9VaMzIyVI937NjR+tRTT1mtVqv15MmT1rvuussaERFhDQkJsfbu3dv6+++/29v+3//9nzUxMdGq1+ut0dHR1jvvvNN+7OzZs9abbrrJGhoaam3btq11/fr1Ds964sQJKwDr7t27He5/8eJF67Bhw6xhYWHWJk2aWF988UXr2LFjrcOGDbO3MZvN1ldeecXaokULa2BgoLV58+bW2bNnO1zn8uXL1pCQEOtjjz2m+pxK5f2Z5XuCwO+BiPzNlfY+U5X3FskHH3xgbdasmTU4ONg6fPhw6yuvvGKNjY11aLNhwwbrNddcYw0ODrZGRERY+/bta/3ggw/sx9euXWtt06aNNSAgwNqiRYsK++/ct/z8fOvjjz9ubdq0qTUwMNAaHx9vHTNmjDU9Pd1qNBqto0ePtsbHx1v1er21adOm1pSUFIef3T//+U9ro0aNrACsM2bMcLnf3LlzrVFRUVaTyeRyzGg0WqOioqz//ve/rVar1bp3717rTTfdZA0JCbGGh4dbr7vuOuuxY8fs7RctWmRt3769NTAw0BoXF2d9/PHH7ccOHDhg7devnzU4ONiamJho/f77760ArD/99JPVaq3ee2dxcbH1qaeessbFxVn1er21TZs21qVLlzpc59ixY1YA1jfeeKOiH4ELb7wvaaxWL86NfYXIz89HZGQk8vLyEBHBAppERNVVUlKCEydOoGXLll6pI0CesVgs6NixI+655x77TLX+6OTJk2jdujV27NiBnj17ltu2vD+zfE8Q+D0Qkb/h+4x7EydOxKFDh/Drr7/6uivkoV9//RU33ngjTp8+bR+xVlneeF/y+fA9IiIi8q5Tp07h+++/x4ABA2A0GrFgwQKcOHEC9913n6+75hOlpaW4ePEiXnzxRVx99dUVBqSIiIiofHPnzsXgwYMRGhqKb7/9FitWrMB//vMfX3eLPGA0GpGdnY2XXnoJd999t8cBKW/RVtyEiIiI6hOtVovly5ejT58+6N+/P/bt24cff/wRHTt29HXXfGLz5s2Ii4vDjh07sGjRIl93h4iIqN7bvn07Bg8ejK5du2LRokV455133E42QnXTZ599hhYtWiA3NxdvvPGGz/rBTCkiIqIrTHx8PDZv3uzrbtQZAwcOBKsVEBERec/nn3/u6y5QNY0fPx7jx4/3dTeYKUVERERERERERLWPQSkiIiIiIiIiIqp1DEoREVGt4RAqqi/4Z5WIiNzh7wgiwRv/LTAoRURENS4wMBAAUFRU5OOeEFWO9GdV+rNLRETE9xkiR954X2KhcyIiqnE6nQ5RUVHIysoCAISEhECj0fi4V0SurFYrioqKkJWVhaioKOh0Ol93iYiI6gi+zxAJ3nxfYlCKiIhqRWxsLADYX+SI6rKoqCj7n1kiIiIJ32eIZN54X2JQioiIaoVGo0FcXByaNGmC0tJSX3eHyK3AwEBmSBERkSq+zxAJ3npfYlCKiIhqlU6n41/4iYiIqF7j+wyRd7DQORERERERERER1ToGpYiIiIiIiIiIqNYxKEVERERERERERLWONaVUWK1WAEB+fr6Pe0JERER1jfR+IL0v+Cu+LxEREZE7lX1fYlBKxeXLlwEA8fHxPu4JERER1VWXL19GZGSkr7vhM3xfIiIioopU9L6ksfr7P/OpsFgsOHfuHMLDw6HRaLx+/fz8fMTHx+P06dOIiIjw+vXrEn96VsC/ntefnhXwr+fls165/Ol5a/JZrVYrLl++jKZNm0Kr9d9KCHxf8h5/elbAv57Xn54V8K/n9adnBfzrefms3lHZ9yVmSqnQarW46qqravw+ERERV/wfcok/PSvgX8/rT88K+Nfz8lmvXP70vDX1rP6cISXh+5L3+dOzAv71vP70rP/f3r3HNHX+YQB/itAKaC1YoWUbCMLwCpk31rn52wZR0GzqXKaOLLgtEhSNJmrmZQ5dsmiyxGVbFpJlU/8xkmlEzbxsisKmwRujAl6YGDZ2saISEFS89fv7w3Cyo9xUPL2c55M0Kec91PfJW+rja+kB9JVXT1kBfeVl1ifXnb6k3//eIyIiIiIiIiIij+GmFBERERERERERaY6bUh5gMpmQl5cHk8nk6ak8dXrKCugrr56yAvrKy6z+S0959ZTVX+lpDfWUFdBXXj1lBfSVV09ZAX3lZVZt8YPOiYiIiIiIiIhIc3ynFBERERERERERaY6bUkREREREREREpDluShERERERERERkea4KaWxb775BgMHDkTv3r2RkpKC48ePe3pKPWL16tUwGAyq2+DBg5Xx1tZW5Obmon///ujTpw+mT5+OS5cueXDG3ffLL7/gjTfeQFRUFAwGA3bs2KEaFxF88sknsNvtCA4ORlpaGs6fP686p6GhAZmZmTCbzbBYLPjwww/R0tKiYYru6Srr7NmzH1rn9PR01Tm+knXt2rUYM2YM+vbti4iICEydOhXV1dWqc7rzvK2rq8PkyZMREhKCiIgILF26FHfv3tUySrd0J++rr7760Prm5OSozvGFvPn5+UhKSoLZbIbZbIbD4cDevXuVcX9aV6DrvP6yru1Zt24dDAYDFi1apBzzt/XVK/Yl9iVv7hAAO5O/diY99SVAX52JfcmL+5KQZgoKCsRoNMqGDRvk9OnTMmfOHLFYLHLp0iVPT+2J5eXlybBhw+TixYvK7fLly8p4Tk6OPPfcc1JUVCQnT56UF198UV566SUPzrj79uzZIytXrpTt27cLACksLFSNr1u3Tvr16yc7duyQU6dOyZtvvimxsbFy8+ZN5Zz09HRJTk6Wo0ePyq+//irx8fEya9YsjZN0rausWVlZkp6erlrnhoYG1Tm+knXixImyceNGqaqqEqfTKZMmTZLo6GhpaWlRzunqeXv37l0ZPny4pKWlSXl5uezZs0esVqssX77cE5E61Z28//vf/2TOnDmq9W1qalLGfSXvrl27ZPfu3fL7779LdXW1rFixQoKCgqSqqkpE/GtdRbrO6y/r+qDjx4/LwIEDJSkpSRYuXKgc97f11SP2JfYlb+8QIuxM/tqZ9NSXRPTVmdiXvLcvcVNKQ2PHjpXc3Fzl63v37klUVJSsXbvWg7PqGXl5eZKcnNzuWGNjowQFBcnWrVuVY2fPnhUAUlpaqtEMe8aDpcPtdovNZpPPP/9cOdbY2Cgmk0m2bNkiIiJnzpwRAHLixAnlnL1794rBYJB//vlHs7k/qo4K1pQpUzr8Hl/NKiJSX18vAKSkpEREuve83bNnjwQEBIjL5VLOyc/PF7PZLLdu3dI2wCN6MK/I/b+M//uX1YN8OW9YWJh89913fr+ubdryivjnujY3N0tCQoLs379flU8v6+vv2JfYl9r4SodgZ/Lf11699SURfXUm9iXvWFv++p5Gbt++jbKyMqSlpSnHAgICkJaWhtLSUg/OrOecP38eUVFRiIuLQ2ZmJurq6gAAZWVluHPnjir74MGDER0d7fPZa2tr4XK5VNn69euHlJQUJVtpaSksFgtGjx6tnJOWloaAgAAcO3ZM8zk/qeLiYkRERCAxMRFz587F1atXlTFfztrU1AQACA8PB9C9521paSlGjBiByMhI5ZyJEyfi2rVrOH36tIazf3QP5m2zefNmWK1WDB8+HMuXL8eNGzeUMV/Me+/ePRQUFOD69etwOBx+v64P5m3jb+uam5uLyZMnq9YR8P+fWz1gX2Jf8sUO0RF2Jt9/7dVLXwL01ZnYl7xrbQN79NGoQ1euXMG9e/dUiwoAkZGROHfunIdm1XNSUlKwadMmJCYm4uLFi1izZg1eeeUVVFVVweVywWg0wmKxqL4nMjISLpfLMxPuIW3zb29d28ZcLhciIiJU44GBgQgPD/e5/Onp6XjrrbcQGxuLCxcuYMWKFcjIyEBpaSl69erls1ndbjcWLVqEcePGYfjw4QDQreety+Vqd+3bxrxVe3kB4N1330VMTAyioqJQUVGBjz76CNXV1di+fTsA38pbWVkJh8OB1tZW9OnTB4WFhRg6dCicTqdfrmtHeQH/WlcAKCgowG+//YYTJ048NObPP7d6wb7EvvRfvtAhOsLO5PuvvXroS4C+OhP70n3e9jPLTSnqERkZGcr9pKQkpKSkICYmBj/88AOCg4M9ODPqSTNnzlTujxgxAklJSRg0aBCKi4uRmprqwZk9mdzcXFRVVeHw4cOenoomOsqbnZ2t3B8xYgTsdjtSU1Nx4cIFDBo0SOtpPpHExEQ4nU40NTVh27ZtyMrKQklJiaen9dR0lHfo0KF+ta5//fUXFi5ciP3796N3796eng7RI2Nf0g92Jt+nh74E6KszsS95J/76nkasVit69er10CfaX7p0CTabzUOzenosFguef/551NTUwGaz4fbt22hsbFSd4w/Z2+bf2brabDbU19erxu/evYuGhgafzx8XFwer1YqamhoAvpl1/vz5+PHHH3Ho0CE8++yzyvHuPG9tNlu7a9825o06ytuelJQUAFCtr6/kNRqNiI+Px6hRo7B27VokJyfjyy+/9Nt17Shve3x5XcvKylBfX4+RI0ciMDAQgYGBKCkpwVdffYXAwEBERkb65frqCfsS+9J/eXuHeBTsTL712quXvgToqzOxL3lnX+KmlEaMRiNGjRqFoqIi5Zjb7UZRUZHq91j9RUtLCy5cuAC73Y5Ro0YhKChIlb26uhp1dXU+nz02NhY2m02V7dq1azh27JiSzeFwoLGxEWVlZco5Bw8ehNvtVl7sfNXff/+Nq1evwm63A/CtrCKC+fPno7CwEAcPHkRsbKxqvDvPW4fDgcrKSlWp3L9/P8xms/JWYG/RVd72OJ1OAFCtr6/kfZDb7catW7f8bl070pa3Pb68rqmpqaisrITT6VRuo0ePRmZmpnJfD+vrz9iX2Jd8oUM8DnYm33jt1XtfAvTVmdiXvGRte/Rj06lTBQUFYjKZZNOmTXLmzBnJzs4Wi8Wi+kR7X7V48WIpLi6W2tpaOXLkiKSlpYnVapX6+noRuX/JyejoaDl48KCcPHlSHA6HOBwOD8+6e5qbm6W8vFzKy8sFgKxfv17Ky8vlzz//FJH7lzi2WCyyc+dOqaiokClTprR7ieMXXnhBjh07JocPH5aEhASvvORvZ1mbm5tlyZIlUlpaKrW1tXLgwAEZOXKkJCQkSGtrq/IYvpJ17ty50q9fPykuLlZd+vXGjRvKOV09b9sulTphwgRxOp2yb98+GTBggFdeGrarvDU1NfLpp5/KyZMnpba2Vnbu3ClxcXEyfvx45TF8Je+yZcukpKREamtrpaKiQpYtWyYGg0F+/vlnEfGvdRXpPK8/rWtHHrxajr+trx6xL7EveXuHEGFn8tfOpKe+JKKvzsS+5L19iZtSGvv6668lOjpajEajjB07Vo4ePerpKfWIGTNmiN1uF6PRKM8884zMmDFDampqlPGbN2/KvHnzJCwsTEJCQmTatGly8eJFD864+w4dOiQAHrplZWWJyP3LHK9atUoiIyPFZDJJamqqVFdXqx7j6tWrMmvWLOnTp4+YzWZ5//33pbm52QNpOtdZ1hs3bsiECRNkwIABEhQUJDExMTJnzpyH/pHgK1nbywlANm7cqJzTneftH3/8IRkZGRIcHCxWq1UWL14sd+7c0ThN17rKW1dXJ+PHj5fw8HAxmUwSHx8vS5culaamJtXj+ELeDz74QGJiYsRoNMqAAQMkNTVVKVci/rWuIp3n9ad17ciDJcvf1lev2JfYl7y5Q4iwM/lrZ9JTXxLRV2diX/LevmQQEenZ914RERERERERERF1jp8pRUREREREREREmuOmFBERERERERERaY6bUkREREREREREpDluShERERERERERkea4KUVERERERERERJrjphQREREREREREWmOm1JERERERERERKQ5bkoREREREREREZHmuClFRPSUGAwG7Nixw9PTICIiIvJa7EtE+sZNKSLyS7Nnz4bBYHjolp6e7umpEREREXkF9iUi8rRAT0+AiOhpSU9Px8aNG1XHTCaTh2ZDRERE5H3Yl4jIk/hOKSLyWyaTCTabTXULCwsDcP+t4vn5+cjIyEBwcDDi4uKwbds21fdXVlbi9ddfR3BwMPr374/s7Gy0tLSoztmwYQOGDRsGk8kEu92O+fPnq8avXLmCadOmISQkBAkJCdi1a9fTDU1ERET0CNiXiMiTuClFRLq1atUqTJ8+HadOnUJmZiZmzpyJs2fPAgCuX7+OiRMnIiwsDCdOnMDWrVtx4MABVYnKz89Hbm4usrOzUVlZiV27diE+Pl71Z6xZswbvvPMOKioqMGnSJGRmZqKhoUHTnERERESPi32JiJ4qISLyQ1lZWdKrVy8JDQ1V3T777DMREQEgOTk5qu9JSUmRuXPniojIt99+K2FhYdLS0qKM7969WwICAsTlcomISFRUlKxcubLDOQCQjz/+WPm6paVFAMjevXt7LCcRERHR42JfIiJP42dKEZHfeu2115Cfn686Fh4ertx3OByqMYfDAafTCQA4e/YskpOTERoaqoyPGzcObrcb1dXVMBgM+Pfff5GamtrpHJKSkpT7oaGhMJvNqK+vf9xIRERERD2KfYmIPImbUkTkt0JDQx96e3hPCQ4O7tZ5QUFBqq8NBgPcbvfTmBIRERHRI2NfIiJP4mdKEZFuHT169KGvhwwZAgAYMmQITp06hevXryvjR44cQUBAABITE9G3b18MHDgQRUVFms6ZiIiISEvsS0T0NPGdUkTkt27dugWXy6U6FhgYCKvVCgDYunUrRo8ejZdffhmbN2/G8ePH8f333wMAMjMzkZeXh6ysLKxevRqXL1/GggUL8N577yEyMhIAsHr1auTk5CAiIgIZGRlobm7GkSNHsGDBAm2DEhERET0m9iUi8iRuShGR39q3bx/sdrvqWGJiIs6dOwfg/pVeCgoKMG/ePNjtdmzZsgVDhw4FAISEhOCnn37CwoULMWbMGISEhGD69OlYv3698lhZWVlobW3FF198gSVLlsBqteLtt9/WLiARERHRE2JfIiJPMoiIeHoSRERaMxgMKCwsxNSpUz09FSIiIiKvxL5ERE8bP1OKiIiIiIiIiIg0x00pIiIiIiIiIiLSHH99j4iIiIiIiIiINMd3ShERERERERERkea4KUVERERERERERJrjphQREREREREREWmOm1JERERERERERKQ5bkoREREREREREZHmuClFRERERERERESa46YUERERERERERFpjptSRERERERERESkOW5KERERERERERGR5v4PxV40bB6jMv8AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plotting training and test losses\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "# Plot training losses\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(train_losses_s_label, label='Source Label Loss')\n",
    "plt.plot(train_losses_s_domain, label='Source Domain Loss')\n",
    "plt.plot(train_losses_t_domain, label='Target Domain Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Training Losses')\n",
    "plt.legend()\n",
    "\n",
    "# Plot test losses\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(test_losses_source, label='Source Test Loss')\n",
    "plt.plot(test_losses_target, label='Target Test Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Test Losses')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Plotting training and test accuracies\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "# Plot training accuracy\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(train_accs, label='Training Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Training Accuracy')\n",
    "plt.legend()\n",
    "\n",
    "# Plot test accuracy\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(test_accs_source, label='Source Test Accuracy')\n",
    "plt.plot(test_accs_target, label='Target Test Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Test Accuracy')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c394b4a7",
   "metadata": {
    "papermill": {
     "duration": 0.075397,
     "end_time": "2024-07-04T19:07:29.192700",
     "exception": false,
     "start_time": "2024-07-04T19:07:29.117303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "824d2f81",
   "metadata": {
    "papermill": {
     "duration": 0.075346,
     "end_time": "2024-07-04T19:07:29.342507",
     "exception": false,
     "start_time": "2024-07-04T19:07:29.267161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5324072,
     "sourceId": 8845748,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 23375.378048,
   "end_time": "2024-07-04T19:07:32.086392",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-04T12:37:56.708344",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
