{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8816859,"sourceType":"datasetVersion","datasetId":5303909}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch.utils.data as data\nfrom PIL import Image\nimport os\nimport torch.backends.cudnn as cudnn\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-30T06:05:37.564837Z","iopub.execute_input":"2024-06-30T06:05:37.565589Z","iopub.status.idle":"2024-06-30T06:05:37.570176Z","shell.execute_reply.started":"2024-06-30T06:05:37.565558Z","shell.execute_reply":"2024-06-30T06:05:37.569116Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"# Check if CUDA (GPU support) is available\nimport torch\ncuda = torch.cuda.is_available()\n\n# Print whether CUDA is available\nprint('CUDA available:', cuda)\n\ndevice = torch.device('cuda' if cuda else 'cpu')\nprint(\"device: \", device)\n\nif cuda:\n    cudnn.benchmark = True","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:05:39.559359Z","iopub.execute_input":"2024-06-30T06:05:39.559740Z","iopub.status.idle":"2024-06-30T06:05:39.566185Z","shell.execute_reply.started":"2024-06-30T06:05:39.559697Z","shell.execute_reply":"2024-06-30T06:05:39.565242Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"CUDA available: True\ndevice:  cuda\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Data Loader","metadata":{}},{"cell_type":"code","source":"class GetLoader(data.Dataset):\n    def __init__(self, data_root, data_list, transform=None):\n        self.root = data_root\n        self.transform = transform\n\n        f = open(data_list, 'r')\n        data_list = f.readlines()\n        f.close()\n\n        self.n_data = len(data_list)\n\n        self.img_paths = []\n        self.img_labels = []\n\n        for data in data_list:\n            self.img_paths.append(data[:-3])\n            self.img_labels.append(data[-2])\n            \n\n    def __getitem__(self, item):\n        img_paths, labels = self.img_paths[item], self.img_labels[item]\n        imgs = Image.open(os.path.join(self.root, img_paths)).convert('RGB')\n\n        if self.transform is not None:\n            imgs = self.transform(imgs)\n            labels = int(labels)\n\n        return imgs, labels\n\n    def __len__(self):\n        return self.n_data","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:05:41.533583Z","iopub.execute_input":"2024-06-30T06:05:41.533946Z","iopub.status.idle":"2024-06-30T06:05:41.542636Z","shell.execute_reply.started":"2024-06-30T06:05:41.533919Z","shell.execute_reply":"2024-06-30T06:05:41.541672Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":"## Functions","metadata":{}},{"cell_type":"code","source":"from torch.autograd import Function","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:05:42.770076Z","iopub.execute_input":"2024-06-30T06:05:42.770426Z","iopub.status.idle":"2024-06-30T06:05:42.774839Z","shell.execute_reply.started":"2024-06-30T06:05:42.770397Z","shell.execute_reply":"2024-06-30T06:05:42.773928Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"class ReverseLayerF(Function):\n\n    @staticmethod\n    def forward(ctx, x, alpha):\n        ctx.alpha = alpha\n\n        return x.view_as(x)\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        output = grad_output.neg() * ctx.alpha\n\n        return output, None","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:05:43.274550Z","iopub.execute_input":"2024-06-30T06:05:43.274906Z","iopub.status.idle":"2024-06-30T06:05:43.280627Z","shell.execute_reply.started":"2024-06-30T06:05:43.274879Z","shell.execute_reply":"2024-06-30T06:05:43.279736Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"## Model","metadata":{}},{"cell_type":"code","source":"import torch.nn as nn","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:05:44.431821Z","iopub.execute_input":"2024-06-30T06:05:44.432182Z","iopub.status.idle":"2024-06-30T06:05:44.436304Z","shell.execute_reply.started":"2024-06-30T06:05:44.432146Z","shell.execute_reply":"2024-06-30T06:05:44.435422Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"class CNNModel(nn.Module):\n\n    def __init__(self):\n        super(CNNModel, self).__init__()\n        self.feature = nn.Sequential()\n        self.feature.add_module('f_conv1', nn.Conv2d(3, 64, kernel_size=5))\n        self.feature.add_module('f_bn1', nn.BatchNorm2d(64))\n        self.feature.add_module('f_pool1', nn.MaxPool2d(2))\n        self.feature.add_module('f_relu1', nn.ReLU(True))\n        self.feature.add_module('f_conv2', nn.Conv2d(64, 50, kernel_size=5))\n        self.feature.add_module('f_bn2', nn.BatchNorm2d(50))\n        self.feature.add_module('f_drop1', nn.Dropout())\n        self.feature.add_module('f_pool2', nn.MaxPool2d(2))\n        self.feature.add_module('f_relu2', nn.ReLU(True))\n\n        self.class_classifier = nn.Sequential()\n        self.class_classifier.add_module('c_fc1', nn.Linear(50 * 4 * 4, 100))\n        self.class_classifier.add_module('c_bn1', nn.BatchNorm1d(100))\n        self.class_classifier.add_module('c_relu1', nn.ReLU(True))\n        self.class_classifier.add_module('c_drop1', nn.Dropout())\n        self.class_classifier.add_module('c_fc2', nn.Linear(100, 100))\n        self.class_classifier.add_module('c_bn2', nn.BatchNorm1d(100))\n        self.class_classifier.add_module('c_relu2', nn.ReLU(True))\n        self.class_classifier.add_module('c_fc3', nn.Linear(100, 10))\n        self.class_classifier.add_module('c_softmax', nn.LogSoftmax())\n\n        self.domain_classifier = nn.Sequential()\n        self.domain_classifier.add_module('d_fc1', nn.Linear(50 * 4 * 4, 100))\n        self.domain_classifier.add_module('d_bn1', nn.BatchNorm1d(100))\n        self.domain_classifier.add_module('d_relu1', nn.ReLU(True))\n        self.domain_classifier.add_module('d_fc2', nn.Linear(100, 2))\n        self.domain_classifier.add_module('d_softmax', nn.LogSoftmax(dim=1))\n\n    def forward(self, input_data, alpha):\n        input_data = input_data.expand(input_data.data.shape[0], 3, 28, 28)\n        feature = self.feature(input_data)\n        feature = feature.view(-1, 50 * 4 * 4)\n        reverse_feature = ReverseLayerF.apply(feature, alpha)\n        class_output = self.class_classifier(feature)\n        domain_output = self.domain_classifier(reverse_feature)\n\n        return class_output, domain_output","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:13:44.561572Z","iopub.execute_input":"2024-06-30T06:13:44.562378Z","iopub.status.idle":"2024-06-30T06:13:44.576518Z","shell.execute_reply.started":"2024-06-30T06:13:44.562346Z","shell.execute_reply":"2024-06-30T06:13:44.575533Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"markdown","source":"# Train","metadata":{}},{"cell_type":"code","source":"import os\nimport torch.backends.cudnn as cudnn\nimport torch.utils.data\nfrom torchvision import transforms\nfrom torchvision import datasets","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:13:50.589128Z","iopub.execute_input":"2024-06-30T06:13:50.589952Z","iopub.status.idle":"2024-06-30T06:13:50.594455Z","shell.execute_reply.started":"2024-06-30T06:13:50.589919Z","shell.execute_reply":"2024-06-30T06:13:50.593571Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"\ndef test(dataset_name, epoch):\n    assert dataset_name in ['MNIST', 'mnist_m']\n\n    model_root = os.path.join('/kaggle/working', 'models')\n\n    if dataset_name == 'mnist_m':\n        image_root = os.path.join('/kaggle/input/mninst-m-dataset', 'dataset', dataset_name)\n\n\n    cudnn.benchmark = True\n    batch_size = 128\n    image_size = 28\n    alpha = 0\n\n    \"\"\"load data\"\"\"\n\n    img_transform_source = transforms.Compose([\n        transforms.Resize(image_size),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=(0.1307,), std=(0.3081,))\n    ])\n\n    img_transform_target = transforms.Compose([\n        transforms.Resize(image_size),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))\n    ])\n\n    if dataset_name == 'mnist_m':\n        test_list = os.path.join(image_root, 'mnist_m_test_labels.txt')\n\n        dataset = GetLoader(\n            data_root=os.path.join(image_root, 'mnist_m_test'),\n            data_list=test_list,\n            transform=img_transform_target\n        )\n    else:\n        dataset = datasets.MNIST(\n            root='/kaggle/working/dataset_test',\n            train=False,\n            transform=img_transform_source,\n            download=True  # Download dataset if not present\n\n        )\n\n    dataloader = torch.utils.data.DataLoader(\n        dataset=dataset,\n        batch_size=batch_size,\n        shuffle=False,\n        num_workers=8\n    )\n\n    \"\"\" training \"\"\"\n\n    my_net = torch.load(os.path.join(\n        model_root, 'mnist_mnistm_model_epoch_' + str(epoch) + '.pth'\n    ))\n    my_net = my_net.eval()\n\n    if cuda:\n        my_net = my_net.cuda()\n\n    len_dataloader = len(dataloader)\n    data_target_iter = iter(dataloader)\n\n    i = 0\n    n_total = 0\n    n_correct = 0\n\n    while i < len_dataloader:\n\n        # test model using target data\n        data_target = next(data_target_iter)\n        t_img, t_label = data_target\n\n        batch_size = len(t_label)\n\n        input_img = torch.FloatTensor(batch_size, 3, image_size, image_size)\n        class_label = torch.LongTensor(batch_size)\n\n        if cuda:\n            t_img = t_img.cuda()\n            t_label = t_label.cuda()\n            input_img = input_img.cuda()\n            class_label = class_label.cuda()\n\n        input_img.resize_as_(t_img).copy_(t_img)\n        class_label.resize_as_(t_label).copy_(t_label)\n\n        class_output, _ = my_net(input_data=input_img, alpha=alpha)\n        pred = class_output.data.max(1, keepdim=True)[1]\n        n_correct += pred.eq(class_label.data.view_as(pred)).cpu().sum()\n        n_total += batch_size\n\n        i += 1\n\n    accu = n_correct.data.numpy() * 1.0 / n_total\n\n    print('epoch: %d, accuracy of the %s dataset: %f' % (epoch, dataset_name, accu))","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:16:41.268193Z","iopub.execute_input":"2024-06-30T06:16:41.268584Z","iopub.status.idle":"2024-06-30T06:16:41.285089Z","shell.execute_reply.started":"2024-06-30T06:16:41.268542Z","shell.execute_reply":"2024-06-30T06:16:41.284026Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"markdown","source":"## Main","metadata":{}},{"cell_type":"code","source":"import random\nimport torch.optim as optim\nimport numpy as np\n","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:13:52.248500Z","iopub.execute_input":"2024-06-30T06:13:52.249391Z","iopub.status.idle":"2024-06-30T06:13:52.253731Z","shell.execute_reply.started":"2024-06-30T06:13:52.249349Z","shell.execute_reply":"2024-06-30T06:13:52.252775Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"source_dataset_name = 'MNIST'\ntarget_dataset_name = 'mnist_m'\nsource_image_root = os.path.join('..', 'dataset', source_dataset_name)\ntarget_image_root = os.path.join('/kaggle/input/mninst-m-dataset', 'dataset', target_dataset_name)\nmodel_root = os.path.join('/kaggle/working', 'models')\ncuda = True\ncudnn.benchmark = True\nlr = 1e-3\nbatch_size = 128\nimage_size = 28\nn_epoch = 100\n\nmanual_seed = random.randint(1, 10000)\nrandom.seed(manual_seed)\ntorch.manual_seed(manual_seed)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:13:52.774523Z","iopub.execute_input":"2024-06-30T06:13:52.774899Z","iopub.status.idle":"2024-06-30T06:13:52.784445Z","shell.execute_reply.started":"2024-06-30T06:13:52.774866Z","shell.execute_reply":"2024-06-30T06:13:52.783425Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"<torch._C.Generator at 0x7bfed1863350>"},"metadata":{}}]},{"cell_type":"code","source":"print(os.listdir(target_image_root))","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:13:53.449741Z","iopub.execute_input":"2024-06-30T06:13:53.450096Z","iopub.status.idle":"2024-06-30T06:13:53.456555Z","shell.execute_reply.started":"2024-06-30T06:13:53.450067Z","shell.execute_reply":"2024-06-30T06:13:53.455603Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"['mnist_m_test_labels.txt', 'mnist_m_train', 'mnist_m_test', 'mnist_m_train_labels.txt']\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### Load data\n","metadata":{}},{"cell_type":"code","source":"img_transform_source = transforms.Compose([\n    transforms.Resize(image_size),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=(0.1307,), std=(0.3081,))\n])\n\nimg_transform_target = transforms.Compose([\n    transforms.Resize(image_size),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))\n])","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:13:54.864589Z","iopub.execute_input":"2024-06-30T06:13:54.864976Z","iopub.status.idle":"2024-06-30T06:13:54.871730Z","shell.execute_reply.started":"2024-06-30T06:13:54.864946Z","shell.execute_reply":"2024-06-30T06:13:54.870759Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"dataset_source = datasets.MNIST(\n    root='/kaggle/working/dataset_train',\n    train=True,\n    transform=img_transform_source,\n    download=True\n)\n\ndataloader_source = torch.utils.data.DataLoader(\n    dataset=dataset_source,\n    batch_size=batch_size,\n    shuffle=True,\n    num_workers=8)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:13:55.520844Z","iopub.execute_input":"2024-06-30T06:13:55.521218Z","iopub.status.idle":"2024-06-30T06:13:55.598560Z","shell.execute_reply.started":"2024-06-30T06:13:55.521186Z","shell.execute_reply":"2024-06-30T06:13:55.597696Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"dataset_source","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:13:56.317781Z","iopub.execute_input":"2024-06-30T06:13:56.318109Z","iopub.status.idle":"2024-06-30T06:13:56.324201Z","shell.execute_reply.started":"2024-06-30T06:13:56.318085Z","shell.execute_reply":"2024-06-30T06:13:56.323278Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"Dataset MNIST\n    Number of datapoints: 60000\n    Root location: /kaggle/working/dataset_train\n    Split: Train\n    StandardTransform\nTransform: Compose(\n               Resize(size=28, interpolation=bilinear, max_size=None, antialias=warn)\n               ToTensor()\n               Normalize(mean=(0.1307,), std=(0.3081,))\n           )"},"metadata":{}}]},{"cell_type":"code","source":"input_dir = '/kaggle/input/mnist'\nprint(os.listdir(target_image_root))","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:14:00.131906Z","iopub.execute_input":"2024-06-30T06:14:00.132265Z","iopub.status.idle":"2024-06-30T06:14:00.138769Z","shell.execute_reply.started":"2024-06-30T06:14:00.132234Z","shell.execute_reply":"2024-06-30T06:14:00.137805Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"['mnist_m_test_labels.txt', 'mnist_m_train', 'mnist_m_test', 'mnist_m_train_labels.txt']\n","output_type":"stream"}]},{"cell_type":"code","source":"train_list = os.path.join(target_image_root, 'mnist_m_train_labels.txt')","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:14:00.510839Z","iopub.execute_input":"2024-06-30T06:14:00.511625Z","iopub.status.idle":"2024-06-30T06:14:00.515686Z","shell.execute_reply.started":"2024-06-30T06:14:00.511596Z","shell.execute_reply":"2024-06-30T06:14:00.514768Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"dataset_target = GetLoader(\n    data_root=os.path.join(target_image_root, 'mnist_m_train'),\n    data_list=train_list,\n    transform=img_transform_target\n)\n\ndataloader_target = torch.utils.data.DataLoader(\n    dataset=dataset_target,\n    batch_size=batch_size,\n    shuffle=True,\n    num_workers=8)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:14:00.877367Z","iopub.execute_input":"2024-06-30T06:14:00.878053Z","iopub.status.idle":"2024-06-30T06:14:00.917629Z","shell.execute_reply.started":"2024-06-30T06:14:00.878020Z","shell.execute_reply":"2024-06-30T06:14:00.916769Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":"### Load Model","metadata":{}},{"cell_type":"code","source":"my_net = CNNModel()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:14:01.723646Z","iopub.execute_input":"2024-06-30T06:14:01.724011Z","iopub.status.idle":"2024-06-30T06:14:01.735192Z","shell.execute_reply.started":"2024-06-30T06:14:01.723984Z","shell.execute_reply":"2024-06-30T06:14:01.734192Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"# setup optimizer\n\noptimizer = optim.Adam(my_net.parameters(), lr=lr)\n\nloss_class = torch.nn.NLLLoss()\nloss_domain = torch.nn.NLLLoss()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:14:03.773491Z","iopub.execute_input":"2024-06-30T06:14:03.773857Z","iopub.status.idle":"2024-06-30T06:14:03.779901Z","shell.execute_reply.started":"2024-06-30T06:14:03.773826Z","shell.execute_reply":"2024-06-30T06:14:03.778924Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"if cuda:\n    my_net = my_net.cuda()\n    loss_class = loss_class.cuda()\n    loss_domain = loss_domain.cuda()\n\nfor p in my_net.parameters():\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:14:05.080659Z","iopub.execute_input":"2024-06-30T06:14:05.081560Z","iopub.status.idle":"2024-06-30T06:14:05.088730Z","shell.execute_reply.started":"2024-06-30T06:14:05.081523Z","shell.execute_reply":"2024-06-30T06:14:05.087878Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"if not os.path.exists(model_root):\n    os.makedirs(model_root)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:14:05.686133Z","iopub.execute_input":"2024-06-30T06:14:05.686779Z","iopub.status.idle":"2024-06-30T06:14:05.691070Z","shell.execute_reply.started":"2024-06-30T06:14:05.686747Z","shell.execute_reply":"2024-06-30T06:14:05.689932Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"# training\n\nfor epoch in range(n_epoch):\n\n    len_dataloader = min(len(dataloader_source), len(dataloader_target))\n    data_source_iter = iter(dataloader_source)\n    data_target_iter = iter(dataloader_target)\n\n    # Initialize accumulators for the losses\n    total_err_s_label = 0\n    total_err_s_domain = 0\n    total_err_t_domain = 0\n    \n    i = 0\n    while i < len_dataloader:\n\n        p = float(i + epoch * len_dataloader) / n_epoch / len_dataloader\n        alpha = 2. / (1. + np.exp(-10 * p)) - 1\n\n        # training model using source data\n        data_source = next(data_source_iter)\n        s_img, s_label = data_source\n\n        my_net.zero_grad()\n        batch_size = len(s_label)\n\n        input_img = torch.FloatTensor(batch_size, 3, image_size, image_size)\n        class_label = torch.LongTensor(batch_size)\n        domain_label = torch.zeros(batch_size)\n        domain_label = domain_label.long()\n\n        if cuda:\n            s_img = s_img.cuda()\n            s_label = s_label.cuda()\n            input_img = input_img.cuda()\n            class_label = class_label.cuda()\n            domain_label = domain_label.cuda()\n\n        input_img.resize_as_(s_img).copy_(s_img)\n        class_label.resize_as_(s_label).copy_(s_label)\n\n        class_output, domain_output = my_net(input_data=input_img, alpha=alpha)\n        err_s_label = loss_class(class_output, class_label)\n        err_s_domain = loss_domain(domain_output, domain_label)\n\n        # training model using target data\n        data_target = next(data_target_iter)\n        t_img, _ = data_target\n\n        batch_size = len(t_img)\n\n        input_img = torch.FloatTensor(batch_size, 3, image_size, image_size)\n        domain_label = torch.ones(batch_size)\n        domain_label = domain_label.long()\n\n        if cuda:\n            t_img = t_img.cuda()\n            input_img = input_img.cuda()\n            domain_label = domain_label.cuda()\n\n        input_img.resize_as_(t_img).copy_(t_img)\n\n        _, domain_output = my_net(input_data=input_img, alpha=alpha)\n        err_t_domain = loss_domain(domain_output, domain_label)\n        err = err_t_domain + err_s_domain + err_s_label\n        err.backward()\n        optimizer.step()\n\n        # Accumulate the losses\n        total_err_s_label += err_s_label.item() # Convert tensor to Python number and accumulate\n        total_err_s_domain += err_s_domain.item()\n        total_err_t_domain += err_t_domain.item()\n        \n        i += 1\n\n    # Calculate the average losses\n    avg_err_s_label = total_err_s_label / len_dataloader\n    avg_err_s_domain = total_err_s_domain / len_dataloader\n    avg_err_t_domain = total_err_t_domain / len_dataloader\n\n    print('epoch: %d, avg_err_s_label: %f, avg_err_s_domain: %f, avg_err_t_domain: %f' %\n          (epoch, avg_err_s_label, avg_err_s_domain, avg_err_t_domain))\n    \n\n    torch.save(my_net, '{0}/mnist_mnistm_model_epoch_{1}.pth'.format(model_root, epoch))\n    test(source_dataset_name, epoch)\n    test(target_dataset_name, epoch)\n\nprint('TRAINING COMPLETED')","metadata":{"execution":{"iopub.status.busy":"2024-06-30T06:16:51.025471Z","iopub.execute_input":"2024-06-30T06:16:51.025845Z","iopub.status.idle":"2024-06-30T07:00:16.987340Z","shell.execute_reply.started":"2024-06-30T06:16:51.025814Z","shell.execute_reply":"2024-06-30T07:00:16.986053Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stdout","text":"epoch: 0, avg_err_s_label: 0.074124, avg_err_s_domain: 0.099014, avg_err_t_domain: 0.099358\nepoch: 0, accuracy of the MNIST dataset: 0.981100\nepoch: 0, accuracy of the mnist_m dataset: 0.317889\nepoch: 1, avg_err_s_label: 0.077385, avg_err_s_domain: 0.209994, avg_err_t_domain: 0.213212\nepoch: 1, accuracy of the MNIST dataset: 0.959800\nepoch: 1, accuracy of the mnist_m dataset: 0.338111\nepoch: 2, avg_err_s_label: 0.094035, avg_err_s_domain: 0.309727, avg_err_t_domain: 0.303715\nepoch: 2, accuracy of the MNIST dataset: 0.976900\nepoch: 2, accuracy of the mnist_m dataset: 0.445556\nepoch: 3, avg_err_s_label: 0.117470, avg_err_s_domain: 0.441680, avg_err_t_domain: 0.437722\nepoch: 3, accuracy of the MNIST dataset: 0.953300\nepoch: 3, accuracy of the mnist_m dataset: 0.402556\nepoch: 4, avg_err_s_label: 0.130680, avg_err_s_domain: 0.487148, avg_err_t_domain: 0.482023\nepoch: 4, accuracy of the MNIST dataset: 0.933500\nepoch: 4, accuracy of the mnist_m dataset: 0.436222\nepoch: 5, avg_err_s_label: 0.134660, avg_err_s_domain: 0.542813, avg_err_t_domain: 0.545989\nepoch: 5, accuracy of the MNIST dataset: 0.964900\nepoch: 5, accuracy of the mnist_m dataset: 0.571333\nepoch: 6, avg_err_s_label: 0.146020, avg_err_s_domain: 0.556142, avg_err_t_domain: 0.552599\nepoch: 6, accuracy of the MNIST dataset: 0.950200\nepoch: 6, accuracy of the mnist_m dataset: 0.422111\nepoch: 7, avg_err_s_label: 0.143581, avg_err_s_domain: 0.576053, avg_err_t_domain: 0.577778\nepoch: 7, accuracy of the MNIST dataset: 0.927200\nepoch: 7, accuracy of the mnist_m dataset: 0.373333\nepoch: 8, avg_err_s_label: 0.139731, avg_err_s_domain: 0.569127, avg_err_t_domain: 0.572891\nepoch: 8, accuracy of the MNIST dataset: 0.928100\nepoch: 8, accuracy of the mnist_m dataset: 0.344667\nepoch: 9, avg_err_s_label: 0.147064, avg_err_s_domain: 0.573655, avg_err_t_domain: 0.576409\nepoch: 9, accuracy of the MNIST dataset: 0.962200\nepoch: 9, accuracy of the mnist_m dataset: 0.499222\nepoch: 10, avg_err_s_label: 0.143505, avg_err_s_domain: 0.585903, avg_err_t_domain: 0.585798\nepoch: 10, accuracy of the MNIST dataset: 0.979400\nepoch: 10, accuracy of the mnist_m dataset: 0.437778\nepoch: 11, avg_err_s_label: 0.155668, avg_err_s_domain: 0.580134, avg_err_t_domain: 0.579215\nepoch: 11, accuracy of the MNIST dataset: 0.956400\nepoch: 11, accuracy of the mnist_m dataset: 0.458889\nepoch: 12, avg_err_s_label: 0.152164, avg_err_s_domain: 0.574731, avg_err_t_domain: 0.576422\nepoch: 12, accuracy of the MNIST dataset: 0.961300\nepoch: 12, accuracy of the mnist_m dataset: 0.564444\nepoch: 13, avg_err_s_label: 0.155204, avg_err_s_domain: 0.590036, avg_err_t_domain: 0.594075\nepoch: 13, accuracy of the MNIST dataset: 0.943500\nepoch: 13, accuracy of the mnist_m dataset: 0.498111\nepoch: 14, avg_err_s_label: 0.157903, avg_err_s_domain: 0.594994, avg_err_t_domain: 0.599178\nepoch: 14, accuracy of the MNIST dataset: 0.945900\nepoch: 14, accuracy of the mnist_m dataset: 0.459889\nepoch: 15, avg_err_s_label: 0.157585, avg_err_s_domain: 0.577663, avg_err_t_domain: 0.576509\nepoch: 15, accuracy of the MNIST dataset: 0.971100\nepoch: 15, accuracy of the mnist_m dataset: 0.619444\nepoch: 16, avg_err_s_label: 0.157013, avg_err_s_domain: 0.597418, avg_err_t_domain: 0.594622\nepoch: 16, accuracy of the MNIST dataset: 0.961200\nepoch: 16, accuracy of the mnist_m dataset: 0.555222\nepoch: 17, avg_err_s_label: 0.176887, avg_err_s_domain: 0.612602, avg_err_t_domain: 0.608675\nepoch: 17, accuracy of the MNIST dataset: 0.961100\nepoch: 17, accuracy of the mnist_m dataset: 0.639778\nepoch: 18, avg_err_s_label: 0.157060, avg_err_s_domain: 0.593200, avg_err_t_domain: 0.590302\nepoch: 18, accuracy of the MNIST dataset: 0.970200\nepoch: 18, accuracy of the mnist_m dataset: 0.635778\nepoch: 19, avg_err_s_label: 0.164994, avg_err_s_domain: 0.599141, avg_err_t_domain: 0.602208\nepoch: 19, accuracy of the MNIST dataset: 0.958400\nepoch: 19, accuracy of the mnist_m dataset: 0.574667\nepoch: 20, avg_err_s_label: 0.163169, avg_err_s_domain: 0.607931, avg_err_t_domain: 0.610602\nepoch: 20, accuracy of the MNIST dataset: 0.941300\nepoch: 20, accuracy of the mnist_m dataset: 0.476778\nepoch: 21, avg_err_s_label: 0.168124, avg_err_s_domain: 0.601608, avg_err_t_domain: 0.598545\nepoch: 21, accuracy of the MNIST dataset: 0.962400\nepoch: 21, accuracy of the mnist_m dataset: 0.575778\nepoch: 22, avg_err_s_label: 0.175129, avg_err_s_domain: 0.603018, avg_err_t_domain: 0.606893\nepoch: 22, accuracy of the MNIST dataset: 0.929100\nepoch: 22, accuracy of the mnist_m dataset: 0.528778\nepoch: 23, avg_err_s_label: 0.169029, avg_err_s_domain: 0.614958, avg_err_t_domain: 0.615725\nepoch: 23, accuracy of the MNIST dataset: 0.954300\nepoch: 23, accuracy of the mnist_m dataset: 0.599000\nepoch: 24, avg_err_s_label: 0.158341, avg_err_s_domain: 0.613865, avg_err_t_domain: 0.613555\nepoch: 24, accuracy of the MNIST dataset: 0.945800\nepoch: 24, accuracy of the mnist_m dataset: 0.669000\nepoch: 25, avg_err_s_label: 0.168953, avg_err_s_domain: 0.624628, avg_err_t_domain: 0.620403\nepoch: 25, accuracy of the MNIST dataset: 0.936000\nepoch: 25, accuracy of the mnist_m dataset: 0.624111\nepoch: 26, avg_err_s_label: 0.159275, avg_err_s_domain: 0.615689, avg_err_t_domain: 0.621899\nepoch: 26, accuracy of the MNIST dataset: 0.961000\nepoch: 26, accuracy of the mnist_m dataset: 0.528333\nepoch: 27, avg_err_s_label: 0.158855, avg_err_s_domain: 0.609689, avg_err_t_domain: 0.612958\nepoch: 27, accuracy of the MNIST dataset: 0.966600\nepoch: 27, accuracy of the mnist_m dataset: 0.502222\nepoch: 28, avg_err_s_label: 0.161981, avg_err_s_domain: 0.619228, avg_err_t_domain: 0.627284\nepoch: 28, accuracy of the MNIST dataset: 0.964500\nepoch: 28, accuracy of the mnist_m dataset: 0.564667\nepoch: 29, avg_err_s_label: 0.167266, avg_err_s_domain: 0.615311, avg_err_t_domain: 0.619909\nepoch: 29, accuracy of the MNIST dataset: 0.968100\nepoch: 29, accuracy of the mnist_m dataset: 0.643111\nepoch: 30, avg_err_s_label: 0.155065, avg_err_s_domain: 0.621449, avg_err_t_domain: 0.625375\nepoch: 30, accuracy of the MNIST dataset: 0.956000\nepoch: 30, accuracy of the mnist_m dataset: 0.635889\nepoch: 31, avg_err_s_label: 0.158468, avg_err_s_domain: 0.636155, avg_err_t_domain: 0.636727\nepoch: 31, accuracy of the MNIST dataset: 0.963500\nepoch: 31, accuracy of the mnist_m dataset: 0.633778\nepoch: 32, avg_err_s_label: 0.153900, avg_err_s_domain: 0.625610, avg_err_t_domain: 0.631179\nepoch: 32, accuracy of the MNIST dataset: 0.970100\nepoch: 32, accuracy of the mnist_m dataset: 0.646000\nepoch: 33, avg_err_s_label: 0.153425, avg_err_s_domain: 0.630445, avg_err_t_domain: 0.637309\nepoch: 33, accuracy of the MNIST dataset: 0.969900\nepoch: 33, accuracy of the mnist_m dataset: 0.433000\nepoch: 34, avg_err_s_label: 0.151856, avg_err_s_domain: 0.613688, avg_err_t_domain: 0.616888\nepoch: 34, accuracy of the MNIST dataset: 0.957200\nepoch: 34, accuracy of the mnist_m dataset: 0.538889\nepoch: 35, avg_err_s_label: 0.149109, avg_err_s_domain: 0.625511, avg_err_t_domain: 0.627127\nepoch: 35, accuracy of the MNIST dataset: 0.973500\nepoch: 35, accuracy of the mnist_m dataset: 0.629778\nepoch: 36, avg_err_s_label: 0.151218, avg_err_s_domain: 0.626846, avg_err_t_domain: 0.631244\nepoch: 36, accuracy of the MNIST dataset: 0.950000\nepoch: 36, accuracy of the mnist_m dataset: 0.592889\nepoch: 37, avg_err_s_label: 0.152476, avg_err_s_domain: 0.612788, avg_err_t_domain: 0.614726\nepoch: 37, accuracy of the MNIST dataset: 0.977900\nepoch: 37, accuracy of the mnist_m dataset: 0.664778\nepoch: 38, avg_err_s_label: 0.156070, avg_err_s_domain: 0.636847, avg_err_t_domain: 0.636117\nepoch: 38, accuracy of the MNIST dataset: 0.975200\nepoch: 38, accuracy of the mnist_m dataset: 0.607556\nepoch: 39, avg_err_s_label: 0.138771, avg_err_s_domain: 0.638000, avg_err_t_domain: 0.640104\nepoch: 39, accuracy of the MNIST dataset: 0.980400\nepoch: 39, accuracy of the mnist_m dataset: 0.569889\nepoch: 40, avg_err_s_label: 0.141351, avg_err_s_domain: 0.631087, avg_err_t_domain: 0.635654\nepoch: 40, accuracy of the MNIST dataset: 0.947300\nepoch: 40, accuracy of the mnist_m dataset: 0.607556\nepoch: 41, avg_err_s_label: 0.137128, avg_err_s_domain: 0.643097, avg_err_t_domain: 0.643967\nepoch: 41, accuracy of the MNIST dataset: 0.973300\nepoch: 41, accuracy of the mnist_m dataset: 0.496556\nepoch: 42, avg_err_s_label: 0.135703, avg_err_s_domain: 0.637650, avg_err_t_domain: 0.638077\nepoch: 42, accuracy of the MNIST dataset: 0.967700\nepoch: 42, accuracy of the mnist_m dataset: 0.568333\nepoch: 43, avg_err_s_label: 0.134231, avg_err_s_domain: 0.626430, avg_err_t_domain: 0.629799\nepoch: 43, accuracy of the MNIST dataset: 0.952600\nepoch: 43, accuracy of the mnist_m dataset: 0.673111\nepoch: 44, avg_err_s_label: 0.140009, avg_err_s_domain: 0.640027, avg_err_t_domain: 0.643612\nepoch: 44, accuracy of the MNIST dataset: 0.978700\nepoch: 44, accuracy of the mnist_m dataset: 0.569556\nepoch: 45, avg_err_s_label: 0.129542, avg_err_s_domain: 0.630746, avg_err_t_domain: 0.631173\nepoch: 45, accuracy of the MNIST dataset: 0.980700\nepoch: 45, accuracy of the mnist_m dataset: 0.584667\nepoch: 46, avg_err_s_label: 0.127646, avg_err_s_domain: 0.634362, avg_err_t_domain: 0.633601\nepoch: 46, accuracy of the MNIST dataset: 0.972400\nepoch: 46, accuracy of the mnist_m dataset: 0.651333\nepoch: 47, avg_err_s_label: 0.131035, avg_err_s_domain: 0.639470, avg_err_t_domain: 0.642752\nepoch: 47, accuracy of the MNIST dataset: 0.975600\nepoch: 47, accuracy of the mnist_m dataset: 0.639667\nepoch: 48, avg_err_s_label: 0.122216, avg_err_s_domain: 0.650264, avg_err_t_domain: 0.648960\nepoch: 48, accuracy of the MNIST dataset: 0.974500\nepoch: 48, accuracy of the mnist_m dataset: 0.680556\nepoch: 49, avg_err_s_label: 0.123417, avg_err_s_domain: 0.635150, avg_err_t_domain: 0.635202\nepoch: 49, accuracy of the MNIST dataset: 0.977900\nepoch: 49, accuracy of the mnist_m dataset: 0.624444\nepoch: 50, avg_err_s_label: 0.126365, avg_err_s_domain: 0.635100, avg_err_t_domain: 0.637224\nepoch: 50, accuracy of the MNIST dataset: 0.950900\nepoch: 50, accuracy of the mnist_m dataset: 0.579556\nepoch: 51, avg_err_s_label: 0.126859, avg_err_s_domain: 0.629522, avg_err_t_domain: 0.630090\nepoch: 51, accuracy of the MNIST dataset: 0.977200\nepoch: 51, accuracy of the mnist_m dataset: 0.496889\nepoch: 52, avg_err_s_label: 0.125560, avg_err_s_domain: 0.630881, avg_err_t_domain: 0.631805\nepoch: 52, accuracy of the MNIST dataset: 0.967500\nepoch: 52, accuracy of the mnist_m dataset: 0.628222\nepoch: 53, avg_err_s_label: 0.119089, avg_err_s_domain: 0.643020, avg_err_t_domain: 0.649069\nepoch: 53, accuracy of the MNIST dataset: 0.976300\nepoch: 53, accuracy of the mnist_m dataset: 0.683222\nepoch: 54, avg_err_s_label: 0.111887, avg_err_s_domain: 0.644692, avg_err_t_domain: 0.647753\nepoch: 54, accuracy of the MNIST dataset: 0.981000\nepoch: 54, accuracy of the mnist_m dataset: 0.584333\nepoch: 55, avg_err_s_label: 0.116444, avg_err_s_domain: 0.636618, avg_err_t_domain: 0.642374\nepoch: 55, accuracy of the MNIST dataset: 0.977600\nepoch: 55, accuracy of the mnist_m dataset: 0.577667\nepoch: 56, avg_err_s_label: 0.115714, avg_err_s_domain: 0.635029, avg_err_t_domain: 0.637259\nepoch: 56, accuracy of the MNIST dataset: 0.978500\nepoch: 56, accuracy of the mnist_m dataset: 0.598444\nepoch: 57, avg_err_s_label: 0.118906, avg_err_s_domain: 0.635929, avg_err_t_domain: 0.638670\nepoch: 57, accuracy of the MNIST dataset: 0.851000\nepoch: 57, accuracy of the mnist_m dataset: 0.727444\nepoch: 58, avg_err_s_label: 0.117649, avg_err_s_domain: 0.648492, avg_err_t_domain: 0.647502\nepoch: 58, accuracy of the MNIST dataset: 0.976300\nepoch: 58, accuracy of the mnist_m dataset: 0.645000\nepoch: 59, avg_err_s_label: 0.109955, avg_err_s_domain: 0.639432, avg_err_t_domain: 0.639462\nepoch: 59, accuracy of the MNIST dataset: 0.981500\nepoch: 59, accuracy of the mnist_m dataset: 0.815222\nepoch: 60, avg_err_s_label: 0.113260, avg_err_s_domain: 0.643266, avg_err_t_domain: 0.647095\nepoch: 60, accuracy of the MNIST dataset: 0.969600\nepoch: 60, accuracy of the mnist_m dataset: 0.727889\nepoch: 61, avg_err_s_label: 0.114791, avg_err_s_domain: 0.639865, avg_err_t_domain: 0.643083\nepoch: 61, accuracy of the MNIST dataset: 0.975000\nepoch: 61, accuracy of the mnist_m dataset: 0.690000\nepoch: 62, avg_err_s_label: 0.111860, avg_err_s_domain: 0.652200, avg_err_t_domain: 0.656130\nepoch: 62, accuracy of the MNIST dataset: 0.964700\nepoch: 62, accuracy of the mnist_m dataset: 0.691556\nepoch: 63, avg_err_s_label: 0.116846, avg_err_s_domain: 0.640632, avg_err_t_domain: 0.642558\nepoch: 63, accuracy of the MNIST dataset: 0.971400\nepoch: 63, accuracy of the mnist_m dataset: 0.682333\nepoch: 64, avg_err_s_label: 0.106629, avg_err_s_domain: 0.633387, avg_err_t_domain: 0.637924\nepoch: 64, accuracy of the MNIST dataset: 0.975100\nepoch: 64, accuracy of the mnist_m dataset: 0.670667\nepoch: 65, avg_err_s_label: 0.114345, avg_err_s_domain: 0.636425, avg_err_t_domain: 0.638021\nepoch: 65, accuracy of the MNIST dataset: 0.975500\nepoch: 65, accuracy of the mnist_m dataset: 0.756667\nepoch: 66, avg_err_s_label: 0.115976, avg_err_s_domain: 0.637959, avg_err_t_domain: 0.638824\nepoch: 66, accuracy of the MNIST dataset: 0.969900\nepoch: 66, accuracy of the mnist_m dataset: 0.740000\nepoch: 67, avg_err_s_label: 0.113745, avg_err_s_domain: 0.646224, avg_err_t_domain: 0.648546\nepoch: 67, accuracy of the MNIST dataset: 0.979500\nepoch: 67, accuracy of the mnist_m dataset: 0.693889\nepoch: 68, avg_err_s_label: 0.105828, avg_err_s_domain: 0.646573, avg_err_t_domain: 0.648524\nepoch: 68, accuracy of the MNIST dataset: 0.974300\nepoch: 68, accuracy of the mnist_m dataset: 0.590667\nepoch: 69, avg_err_s_label: 0.107190, avg_err_s_domain: 0.642947, avg_err_t_domain: 0.646993\nepoch: 69, accuracy of the MNIST dataset: 0.967700\nepoch: 69, accuracy of the mnist_m dataset: 0.721111\nepoch: 70, avg_err_s_label: 0.107491, avg_err_s_domain: 0.645919, avg_err_t_domain: 0.647271\nepoch: 70, accuracy of the MNIST dataset: 0.981100\nepoch: 70, accuracy of the mnist_m dataset: 0.728444\nepoch: 71, avg_err_s_label: 0.104377, avg_err_s_domain: 0.640903, avg_err_t_domain: 0.643663\nepoch: 71, accuracy of the MNIST dataset: 0.981200\nepoch: 71, accuracy of the mnist_m dataset: 0.701444\nepoch: 72, avg_err_s_label: 0.100431, avg_err_s_domain: 0.640803, avg_err_t_domain: 0.646212\nepoch: 72, accuracy of the MNIST dataset: 0.972300\nepoch: 72, accuracy of the mnist_m dataset: 0.712667\nepoch: 73, avg_err_s_label: 0.106384, avg_err_s_domain: 0.655775, avg_err_t_domain: 0.657061\nepoch: 73, accuracy of the MNIST dataset: 0.971200\nepoch: 73, accuracy of the mnist_m dataset: 0.663667\nepoch: 74, avg_err_s_label: 0.103669, avg_err_s_domain: 0.644547, avg_err_t_domain: 0.648441\nepoch: 74, accuracy of the MNIST dataset: 0.983300\nepoch: 74, accuracy of the mnist_m dataset: 0.581111\nepoch: 75, avg_err_s_label: 0.105370, avg_err_s_domain: 0.648977, avg_err_t_domain: 0.652958\nepoch: 75, accuracy of the MNIST dataset: 0.981000\nepoch: 75, accuracy of the mnist_m dataset: 0.696778\nepoch: 76, avg_err_s_label: 0.108540, avg_err_s_domain: 0.647662, avg_err_t_domain: 0.652082\nepoch: 76, accuracy of the MNIST dataset: 0.979800\nepoch: 76, accuracy of the mnist_m dataset: 0.738778\nepoch: 77, avg_err_s_label: 0.097296, avg_err_s_domain: 0.643536, avg_err_t_domain: 0.648254\nepoch: 77, accuracy of the MNIST dataset: 0.976300\nepoch: 77, accuracy of the mnist_m dataset: 0.791889\nepoch: 78, avg_err_s_label: 0.102436, avg_err_s_domain: 0.657423, avg_err_t_domain: 0.660319\nepoch: 78, accuracy of the MNIST dataset: 0.939500\nepoch: 78, accuracy of the mnist_m dataset: 0.718000\nepoch: 79, avg_err_s_label: 0.096672, avg_err_s_domain: 0.646470, avg_err_t_domain: 0.650657\nepoch: 79, accuracy of the MNIST dataset: 0.956600\nepoch: 79, accuracy of the mnist_m dataset: 0.698667\nepoch: 80, avg_err_s_label: 0.094540, avg_err_s_domain: 0.656726, avg_err_t_domain: 0.662524\nepoch: 80, accuracy of the MNIST dataset: 0.984900\nepoch: 80, accuracy of the mnist_m dataset: 0.613111\nepoch: 81, avg_err_s_label: 0.095135, avg_err_s_domain: 0.649107, avg_err_t_domain: 0.653455\nepoch: 81, accuracy of the MNIST dataset: 0.983700\nepoch: 81, accuracy of the mnist_m dataset: 0.772222\nepoch: 82, avg_err_s_label: 0.091486, avg_err_s_domain: 0.645009, avg_err_t_domain: 0.650555\nepoch: 82, accuracy of the MNIST dataset: 0.983100\nepoch: 82, accuracy of the mnist_m dataset: 0.757000\nepoch: 83, avg_err_s_label: 0.094963, avg_err_s_domain: 0.647244, avg_err_t_domain: 0.650984\nepoch: 83, accuracy of the MNIST dataset: 0.978400\nepoch: 83, accuracy of the mnist_m dataset: 0.743667\nepoch: 84, avg_err_s_label: 0.093869, avg_err_s_domain: 0.644727, avg_err_t_domain: 0.646984\nepoch: 84, accuracy of the MNIST dataset: 0.982800\nepoch: 84, accuracy of the mnist_m dataset: 0.597778\nepoch: 85, avg_err_s_label: 0.094645, avg_err_s_domain: 0.654951, avg_err_t_domain: 0.658063\nepoch: 85, accuracy of the MNIST dataset: 0.984900\nepoch: 85, accuracy of the mnist_m dataset: 0.672222\nepoch: 86, avg_err_s_label: 0.092836, avg_err_s_domain: 0.647080, avg_err_t_domain: 0.651183\nepoch: 86, accuracy of the MNIST dataset: 0.984100\nepoch: 86, accuracy of the mnist_m dataset: 0.742444\nepoch: 87, avg_err_s_label: 0.091118, avg_err_s_domain: 0.653656, avg_err_t_domain: 0.657179\nepoch: 87, accuracy of the MNIST dataset: 0.981900\nepoch: 87, accuracy of the mnist_m dataset: 0.649778\nepoch: 88, avg_err_s_label: 0.099191, avg_err_s_domain: 0.650862, avg_err_t_domain: 0.659298\nepoch: 88, accuracy of the MNIST dataset: 0.977200\nepoch: 88, accuracy of the mnist_m dataset: 0.797556\nepoch: 89, avg_err_s_label: 0.090707, avg_err_s_domain: 0.650237, avg_err_t_domain: 0.649175\nepoch: 89, accuracy of the MNIST dataset: 0.974900\nepoch: 89, accuracy of the mnist_m dataset: 0.782556\nepoch: 90, avg_err_s_label: 0.089545, avg_err_s_domain: 0.652446, avg_err_t_domain: 0.658023\nepoch: 90, accuracy of the MNIST dataset: 0.975100\nepoch: 90, accuracy of the mnist_m dataset: 0.622667\nepoch: 91, avg_err_s_label: 0.088818, avg_err_s_domain: 0.646639, avg_err_t_domain: 0.648335\nepoch: 91, accuracy of the MNIST dataset: 0.974800\nepoch: 91, accuracy of the mnist_m dataset: 0.726556\nepoch: 92, avg_err_s_label: 0.095682, avg_err_s_domain: 0.659128, avg_err_t_domain: 0.660066\nepoch: 92, accuracy of the MNIST dataset: 0.968700\nepoch: 92, accuracy of the mnist_m dataset: 0.832222\nepoch: 93, avg_err_s_label: 0.088075, avg_err_s_domain: 0.641084, avg_err_t_domain: 0.643980\nepoch: 93, accuracy of the MNIST dataset: 0.975700\nepoch: 93, accuracy of the mnist_m dataset: 0.670111\nepoch: 94, avg_err_s_label: 0.090866, avg_err_s_domain: 0.661490, avg_err_t_domain: 0.664085\nepoch: 94, accuracy of the MNIST dataset: 0.975400\nepoch: 94, accuracy of the mnist_m dataset: 0.711778\nepoch: 95, avg_err_s_label: 0.087724, avg_err_s_domain: 0.653849, avg_err_t_domain: 0.658010\nepoch: 95, accuracy of the MNIST dataset: 0.983000\nepoch: 95, accuracy of the mnist_m dataset: 0.816444\nepoch: 96, avg_err_s_label: 0.087794, avg_err_s_domain: 0.652666, avg_err_t_domain: 0.653288\nepoch: 96, accuracy of the MNIST dataset: 0.961900\nepoch: 96, accuracy of the mnist_m dataset: 0.784778\nepoch: 97, avg_err_s_label: 0.088915, avg_err_s_domain: 0.648266, avg_err_t_domain: 0.651514\nepoch: 97, accuracy of the MNIST dataset: 0.982000\nepoch: 97, accuracy of the mnist_m dataset: 0.715667\nepoch: 98, avg_err_s_label: 0.083823, avg_err_s_domain: 0.647510, avg_err_t_domain: 0.651474\nepoch: 98, accuracy of the MNIST dataset: 0.967400\nepoch: 98, accuracy of the mnist_m dataset: 0.701333\nepoch: 99, avg_err_s_label: 0.087291, avg_err_s_domain: 0.657195, avg_err_t_domain: 0.658453\nepoch: 99, accuracy of the MNIST dataset: 0.985700\nepoch: 99, accuracy of the mnist_m dataset: 0.782222\nTRAINING COMPLETED\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}