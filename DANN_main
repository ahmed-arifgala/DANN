{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5d6f27b0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:23.242437Z",
     "iopub.status.busy": "2024-07-07T13:56:23.242155Z",
     "iopub.status.idle": "2024-07-07T13:56:26.697392Z",
     "shell.execute_reply": "2024-07-07T13:56:26.696552Z"
    },
    "papermill": {
     "duration": 3.470109,
     "end_time": "2024-07-07T13:56:26.699777",
     "exception": false,
     "start_time": "2024-07-07T13:56:23.229668",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.utils.data as data\n",
    "from PIL import Image\n",
    "import os\n",
    "import torch.backends.cudnn as cudnn\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fbf6cbca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:26.724898Z",
     "iopub.status.busy": "2024-07-07T13:56:26.724496Z",
     "iopub.status.idle": "2024-07-07T13:56:26.728678Z",
     "shell.execute_reply": "2024-07-07T13:56:26.727806Z"
    },
    "papermill": {
     "duration": 0.017999,
     "end_time": "2024-07-07T13:56:26.730586",
     "exception": false,
     "start_time": "2024-07-07T13:56:26.712587",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "os.environ['CUDA_LAUNCH_BLOCKING'] = '1'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "91e8d7d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:26.753568Z",
     "iopub.status.busy": "2024-07-07T13:56:26.753272Z",
     "iopub.status.idle": "2024-07-07T13:56:26.757052Z",
     "shell.execute_reply": "2024-07-07T13:56:26.756212Z"
    },
    "papermill": {
     "duration": 0.017295,
     "end_time": "2024-07-07T13:56:26.758903",
     "exception": false,
     "start_time": "2024-07-07T13:56:26.741608",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import torchvision.models as models\n",
    "\n",
    "# # Load AlexNet\n",
    "# alexnet = models.alexnet(pretrained=True)\n",
    "\n",
    "# # Print model summary\n",
    "# print(alexnet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9c1c17e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:26.783325Z",
     "iopub.status.busy": "2024-07-07T13:56:26.782853Z",
     "iopub.status.idle": "2024-07-07T13:56:26.786299Z",
     "shell.execute_reply": "2024-07-07T13:56:26.785496Z"
    },
    "papermill": {
     "duration": 0.018255,
     "end_time": "2024-07-07T13:56:26.788083",
     "exception": false,
     "start_time": "2024-07-07T13:56:26.769828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# features = alexnet.features.children\n",
    "# print(features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "300f886a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:26.810886Z",
     "iopub.status.busy": "2024-07-07T13:56:26.810639Z",
     "iopub.status.idle": "2024-07-07T13:56:26.814248Z",
     "shell.execute_reply": "2024-07-07T13:56:26.813433Z"
    },
    "papermill": {
     "duration": 0.01713,
     "end_time": "2024-07-07T13:56:26.816104",
     "exception": false,
     "start_time": "2024-07-07T13:56:26.798974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Calculate mean and standard deviation\n",
    "# data = mnist_data.data.numpy().astype(np.float32) / 255.0\n",
    "# mean = np.mean(data)\n",
    "# std = np.std(data)\n",
    "\n",
    "# print('mean: ', mean)\n",
    "# print('std: ', std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "230797d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:26.838755Z",
     "iopub.status.busy": "2024-07-07T13:56:26.838475Z",
     "iopub.status.idle": "2024-07-07T13:56:26.899048Z",
     "shell.execute_reply": "2024-07-07T13:56:26.898184Z"
    },
    "papermill": {
     "duration": 0.074242,
     "end_time": "2024-07-07T13:56:26.901165",
     "exception": false,
     "start_time": "2024-07-07T13:56:26.826923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CUDA available: True\n",
      "device:  cuda\n"
     ]
    }
   ],
   "source": [
    "# Check if CUDA (GPU support) is available\n",
    "import torch\n",
    "cuda = torch.cuda.is_available()\n",
    "\n",
    "# Print whether CUDA is available\n",
    "print('CUDA available:', cuda)\n",
    "\n",
    "device = torch.device('cuda' if cuda else 'cpu')\n",
    "print(\"device: \", device)\n",
    "\n",
    "if cuda:\n",
    "    cudnn.benchmark = True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efde5f0a",
   "metadata": {
    "papermill": {
     "duration": 0.010642,
     "end_time": "2024-07-07T13:56:26.922916",
     "exception": false,
     "start_time": "2024-07-07T13:56:26.912274",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fa5c8bcd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:26.946046Z",
     "iopub.status.busy": "2024-07-07T13:56:26.945771Z",
     "iopub.status.idle": "2024-07-07T13:56:28.460929Z",
     "shell.execute_reply": "2024-07-07T13:56:28.459957Z"
    },
    "papermill": {
     "duration": 1.529232,
     "end_time": "2024-07-07T13:56:28.463310",
     "exception": false,
     "start_time": "2024-07-07T13:56:26.934078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import torch.backends.cudnn as cudnn\n",
    "import torch.utils.data\n",
    "from torchvision import transforms\n",
    "from torchvision import datasets\n",
    "import random\n",
    "import torch.optim as optim\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "41df8fb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:28.488085Z",
     "iopub.status.busy": "2024-07-07T13:56:28.486714Z",
     "iopub.status.idle": "2024-07-07T13:56:28.499026Z",
     "shell.execute_reply": "2024-07-07T13:56:28.498179Z"
    },
    "papermill": {
     "duration": 0.026306,
     "end_time": "2024-07-07T13:56:28.501015",
     "exception": false,
     "start_time": "2024-07-07T13:56:28.474709",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<torch._C.Generator at 0x78ed1cca32b0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#data file names\n",
    "source_dataset_name = 'source_domain'\n",
    "target_dataset_name = 'target_domain'\n",
    "\n",
    "#folders that contain the image foldes and label text files\n",
    "source_image_root = os.path.join('/kaggle/input/plantvillage-dann/Plantvillage_Dataset', source_dataset_name)\n",
    "target_image_root = os.path.join('/kaggle/input/plantvillage-dann/Plantvillage_Dataset', target_dataset_name)\n",
    "\n",
    "#dir where model is to be stored\n",
    "model_root = os.path.join('/kaggle/working', 'models')\n",
    "\n",
    "#hyperparameters\n",
    "cuda = True\n",
    "cudnn.benchmark = True\n",
    "lr = 1e-3\n",
    "batch_size = 32\n",
    "image_size = 128 \n",
    "n_epoch = 100\n",
    "\n",
    "manual_seed = random.randint(1, 10000)\n",
    "random.seed(manual_seed)\n",
    "torch.manual_seed(manual_seed)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30d49f20",
   "metadata": {
    "papermill": {
     "duration": 0.010748,
     "end_time": "2024-07-07T13:56:28.522823",
     "exception": false,
     "start_time": "2024-07-07T13:56:28.512075",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Data Loader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f3fe2949",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:28.545992Z",
     "iopub.status.busy": "2024-07-07T13:56:28.545746Z",
     "iopub.status.idle": "2024-07-07T13:56:28.554285Z",
     "shell.execute_reply": "2024-07-07T13:56:28.553468Z"
    },
    "papermill": {
     "duration": 0.022233,
     "end_time": "2024-07-07T13:56:28.556082",
     "exception": false,
     "start_time": "2024-07-07T13:56:28.533849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## custom data loader function to load the data and apply the transformation\n",
    "\n",
    "#   def __init__(self, data_root, data_list, transform=None, domain=None):\n",
    "        \n",
    "class GetLoader(data.Dataset):\n",
    "    def __init__(self, data_root, data_list, transform=None):\n",
    "        self.root = data_root ## data image folder\n",
    "        self.transform = transform \n",
    "#         self.domain = domain\n",
    "\n",
    "        ## read label txt file\n",
    "        f = open(data_list, 'r')\n",
    "        data_list = f.readlines()\n",
    "        f.close()\n",
    "\n",
    "        self.n_data = len(data_list)\n",
    "\n",
    "        self.img_paths = []\n",
    "        self.img_labels = []\n",
    "\n",
    "        for line in data_list:\n",
    "            img_file, label = line.strip().split(' ', 1)\n",
    "            self.img_paths.append(img_file)\n",
    "            self.img_labels.append(label)\n",
    "            \n",
    "\n",
    "    def __getitem__(self, item):\n",
    "        img_paths, labels = self.img_paths[item], self.img_labels[item]\n",
    "        imgs = Image.open(os.path.join(self.root, img_paths)).convert('RGB')\n",
    "\n",
    "#         if self.domain == 'source':\n",
    "#             imgs = imgs.convert('RGB')\n",
    "#         elif self.domain == 'target':\n",
    "#             imgs = imgs.convert('L')\n",
    "#         else:\n",
    "#             print('Error! Incorrect domain name.')\n",
    "            \n",
    "            \n",
    "        if self.transform is not None:\n",
    "            imgs = self.transform(imgs)\n",
    "            labels = int(labels)\n",
    "\n",
    "        return imgs, labels\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.n_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c2bc2bf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:28.579344Z",
     "iopub.status.busy": "2024-07-07T13:56:28.579074Z",
     "iopub.status.idle": "2024-07-07T13:56:28.583314Z",
     "shell.execute_reply": "2024-07-07T13:56:28.582467Z"
    },
    "papermill": {
     "duration": 0.017923,
     "end_time": "2024-07-07T13:56:28.585142",
     "exception": false,
     "start_time": "2024-07-07T13:56:28.567219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Fetch data label\n",
    "\n",
    "# source domain\n",
    "label_list_source = os.path.join(target_image_root, 'train_labels.txt')\n",
    "\n",
    "# target domain\n",
    "label_list_target = os.path.join(target_image_root, 'train_labels.txt')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd81b861",
   "metadata": {
    "papermill": {
     "duration": 0.010778,
     "end_time": "2024-07-07T13:56:28.607041",
     "exception": false,
     "start_time": "2024-07-07T13:56:28.596263",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Standardization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "da02c08e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:28.630155Z",
     "iopub.status.busy": "2024-07-07T13:56:28.629853Z",
     "iopub.status.idle": "2024-07-07T13:56:28.635786Z",
     "shell.execute_reply": "2024-07-07T13:56:28.635039Z"
    },
    "papermill": {
     "duration": 0.01955,
     "end_time": "2024-07-07T13:56:28.637627",
     "exception": false,
     "start_time": "2024-07-07T13:56:28.618077",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "##Standardization function\n",
    "\n",
    "def calculate_mean_std(loader):\n",
    "    \n",
    "    ##initializing accumulaters\n",
    "    mean = 0.0\n",
    "    std = 0.0\n",
    "    total_images_count = 0\n",
    "\n",
    "    for images, _ in loader: # loader returns the images and the labels for each batch\n",
    "        images_count_in_a_batch = images.size(0) #returns the batch size shape(batch_size, channels, height, width)\n",
    "        images = images.view(images_count_in_a_batch, images.size(1), -1) #reshape the image (batch_size, channel, flattened)\n",
    "        mean += images.mean(2).sum(0) #takes mean at the flattened dim and sums for all the images in the batch\n",
    "        std += images.std(2).sum(0) \n",
    "        total_images_count += images_count_in_a_batch \n",
    "\n",
    "    mean /= total_images_count #to calc avg mean\n",
    "    std /= total_images_count #to calc avg std\n",
    "\n",
    "    return mean, std\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7b212550",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:28.660926Z",
     "iopub.status.busy": "2024-07-07T13:56:28.660275Z",
     "iopub.status.idle": "2024-07-07T13:56:28.664694Z",
     "shell.execute_reply": "2024-07-07T13:56:28.663800Z"
    },
    "papermill": {
     "duration": 0.018193,
     "end_time": "2024-07-07T13:56:28.666855",
     "exception": false,
     "start_time": "2024-07-07T13:56:28.648662",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Temporary transform for calculating mean and std\n",
    "temp_transform = transforms.Compose([\n",
    "    transforms.Resize(image_size),\n",
    "    transforms.ToTensor()\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "eee69a21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:28.695681Z",
     "iopub.status.busy": "2024-07-07T13:56:28.695370Z",
     "iopub.status.idle": "2024-07-07T13:56:28.853679Z",
     "shell.execute_reply": "2024-07-07T13:56:28.852685Z"
    },
    "papermill": {
     "duration": 0.175779,
     "end_time": "2024-07-07T13:56:28.856060",
     "exception": false,
     "start_time": "2024-07-07T13:56:28.680281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Source Domain\n",
    "temp_dataset_source = GetLoader(\n",
    "                                data_root = os.path.join(source_image_root, 'train'),\n",
    "                                data_list = label_list_source,\n",
    "                                transform = temp_transform,\n",
    "#                                 domain = 'source'\n",
    "                               )\n",
    "\n",
    "temp_loader_source = torch.utils.data.DataLoader(\n",
    "                                temp_dataset_source, \n",
    "                                batch_size=batch_size, \n",
    "                                shuffle=True, \n",
    "                                num_workers=4\n",
    "                                )\n",
    "\n",
    "# Target Domain\n",
    "temp_dataset_target = GetLoader(\n",
    "                                data_root=os.path.join(target_image_root, 'train'), \n",
    "                                data_list=label_list_target, \n",
    "                                transform=temp_transform,\n",
    "#                                 domain = 'target'\n",
    "                                )\n",
    "\n",
    "temp_loader_target = torch.utils.data.DataLoader(\n",
    "                                temp_dataset_target, \n",
    "                                batch_size=batch_size, \n",
    "                                shuffle=True, \n",
    "                                num_workers=4\n",
    "                                )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "987f4463",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T13:56:28.879788Z",
     "iopub.status.busy": "2024-07-07T13:56:28.879495Z",
     "iopub.status.idle": "2024-07-07T14:00:03.617661Z",
     "shell.execute_reply": "2024-07-07T14:00:03.616516Z"
    },
    "papermill": {
     "duration": 214.76348,
     "end_time": "2024-07-07T14:00:03.631061",
     "exception": false,
     "start_time": "2024-07-07T13:56:28.867581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Source Mean: tensor([0.4671, 0.4899, 0.4111]), Source Std: tensor([0.1659, 0.1381, 0.1833])\n",
      "Target Mean: tensor([0.4723, 0.4723, 0.4723]), Target Std: tensor([0.1463, 0.1463, 0.1463])\n"
     ]
    }
   ],
   "source": [
    "mean_source, std_source = calculate_mean_std(temp_loader_source)\n",
    "mean_target, std_target = calculate_mean_std(temp_loader_target)\n",
    "\n",
    "\n",
    "# mean_source = [0.4666, 0.4894, 0.4106]\n",
    "# std_source = [0.1542, 0.1256, 0.1727]\n",
    "# mean_target = [0.4718]\n",
    "# std_target = [0.1345]\n",
    "\n",
    "# # Print results\n",
    "print(f\"Source Mean: {mean_source}, Source Std: {std_source}\")\n",
    "print(f\"Target Mean: {mean_target}, Target Std: {std_target}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d85e823f",
   "metadata": {
    "papermill": {
     "duration": 0.010817,
     "end_time": "2024-07-07T14:00:03.653246",
     "exception": false,
     "start_time": "2024-07-07T14:00:03.642429",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "### Loading data after standardization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "688db495",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:03.677463Z",
     "iopub.status.busy": "2024-07-07T14:00:03.677115Z",
     "iopub.status.idle": "2024-07-07T14:00:03.683397Z",
     "shell.execute_reply": "2024-07-07T14:00:03.682543Z"
    },
    "papermill": {
     "duration": 0.020589,
     "end_time": "2024-07-07T14:00:03.685242",
     "exception": false,
     "start_time": "2024-07-07T14:00:03.664653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Define final transformer\n",
    "\n",
    "img_transform_source = transforms.Compose([\n",
    "    transforms.Resize(image_size),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=mean_source, std=std_source)\n",
    "])\n",
    "\n",
    "img_transform_target = transforms.Compose([\n",
    "    transforms.Resize(image_size),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=mean_target, std=std_target)\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "325f3946",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:03.708685Z",
     "iopub.status.busy": "2024-07-07T14:00:03.708391Z",
     "iopub.status.idle": "2024-07-07T14:00:03.757787Z",
     "shell.execute_reply": "2024-07-07T14:00:03.756894Z"
    },
    "papermill": {
     "duration": 0.063529,
     "end_time": "2024-07-07T14:00:03.759884",
     "exception": false,
     "start_time": "2024-07-07T14:00:03.696355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Loading Source Data\n",
    "\n",
    "\n",
    "dataset_source = GetLoader(\n",
    "    data_root=os.path.join(source_image_root, 'train'), #folder that contains the data images\n",
    "    data_list=label_list_source,#label text file\n",
    "    transform=img_transform_source #transformation\n",
    ")\n",
    "\n",
    "dataloader_source = torch.utils.data.DataLoader(\n",
    "    dataset=dataset_source,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=True,\n",
    "    num_workers=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "bf24f845",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:03.784383Z",
     "iopub.status.busy": "2024-07-07T14:00:03.784077Z",
     "iopub.status.idle": "2024-07-07T14:00:03.831246Z",
     "shell.execute_reply": "2024-07-07T14:00:03.830573Z"
    },
    "papermill": {
     "duration": 0.061262,
     "end_time": "2024-07-07T14:00:03.833137",
     "exception": false,
     "start_time": "2024-07-07T14:00:03.771875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Loading Target Data\n",
    "\n",
    "dataset_target = GetLoader(\n",
    "    data_root=os.path.join(target_image_root, 'train'), #folder that contains the data images\n",
    "    data_list=label_list_target,#label text file\n",
    "    transform=img_transform_target #transformation\n",
    ")\n",
    "\n",
    "dataloader_target = torch.utils.data.DataLoader(\n",
    "    dataset=dataset_target,\n",
    "    batch_size=batch_size,\n",
    "    shuffle=True,\n",
    "    num_workers=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8f1afbef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:03.856615Z",
     "iopub.status.busy": "2024-07-07T14:00:03.856332Z",
     "iopub.status.idle": "2024-07-07T14:00:03.860383Z",
     "shell.execute_reply": "2024-07-07T14:00:03.859500Z"
    },
    "papermill": {
     "duration": 0.017853,
     "end_time": "2024-07-07T14:00:03.862404",
     "exception": false,
     "start_time": "2024-07-07T14:00:03.844551",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from torch.autograd import Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7e2fb2b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:03.885809Z",
     "iopub.status.busy": "2024-07-07T14:00:03.885569Z",
     "iopub.status.idle": "2024-07-07T14:00:03.890640Z",
     "shell.execute_reply": "2024-07-07T14:00:03.889801Z"
    },
    "papermill": {
     "duration": 0.019132,
     "end_time": "2024-07-07T14:00:03.892511",
     "exception": false,
     "start_time": "2024-07-07T14:00:03.873379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class ReverseLayerF(Function):\n",
    "\n",
    "    @staticmethod\n",
    "    def forward(ctx, x, alpha):\n",
    "        ctx.alpha = alpha\n",
    "\n",
    "        return x.view_as(x)\n",
    "\n",
    "    @staticmethod\n",
    "    def backward(ctx, grad_output):\n",
    "        output = grad_output.neg() * ctx.alpha\n",
    "\n",
    "        return output, None"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "970cbd33",
   "metadata": {
    "papermill": {
     "duration": 0.01099,
     "end_time": "2024-07-07T14:00:03.914885",
     "exception": false,
     "start_time": "2024-07-07T14:00:03.903895",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cf426560",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:03.938003Z",
     "iopub.status.busy": "2024-07-07T14:00:03.937767Z",
     "iopub.status.idle": "2024-07-07T14:00:03.941772Z",
     "shell.execute_reply": "2024-07-07T14:00:03.940849Z"
    },
    "papermill": {
     "duration": 0.017609,
     "end_time": "2024-07-07T14:00:03.943697",
     "exception": false,
     "start_time": "2024-07-07T14:00:03.926088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torchvision.models as models\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ee43ce31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:03.967341Z",
     "iopub.status.busy": "2024-07-07T14:00:03.967106Z",
     "iopub.status.idle": "2024-07-07T14:00:03.972417Z",
     "shell.execute_reply": "2024-07-07T14:00:03.971581Z"
    },
    "papermill": {
     "duration": 0.019585,
     "end_time": "2024-07-07T14:00:03.974361",
     "exception": false,
     "start_time": "2024-07-07T14:00:03.954776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# class CNNModel(nn.Module):\n",
    "\n",
    "#     def __init__(self):\n",
    "#         super(CNNModel, self).__init__()\n",
    "#         self.feature = nn.Sequential()\n",
    "#         self.feature.add_module('f_conv1', nn.Conv2d(3, 64, kernel_size=5))\n",
    "#         self.feature.add_module('f_bn1', nn.BatchNorm2d(64))\n",
    "#         self.feature.add_module('f_pool1', nn.MaxPool2d(2))\n",
    "#         self.feature.add_module('f_relu1', nn.ReLU(True))\n",
    "#         self.feature.add_module('f_conv2', nn.Conv2d(64, 50, kernel_size=5))\n",
    "#         self.feature.add_module('f_bn2', nn.BatchNorm2d(50))\n",
    "#         self.feature.add_module('f_drop1', nn.Dropout())\n",
    "#         self.feature.add_module('f_pool2', nn.MaxPool2d(2))\n",
    "#         self.feature.add_module('f_relu2', nn.ReLU(True))\n",
    "\n",
    "#         self.class_classifier = nn.Sequential()\n",
    "#         self.class_classifier.add_module('c_fc1', nn.Linear(50 * 4 * 4, 100))\n",
    "#         self.class_classifier.add_module('c_bn1', nn.BatchNorm1d(100))\n",
    "#         self.class_classifier.add_module('c_relu1', nn.ReLU(True))\n",
    "#         self.class_classifier.add_module('c_drop1', nn.Dropout())\n",
    "#         self.class_classifier.add_module('c_fc2', nn.Linear(100, 100))\n",
    "#         self.class_classifier.add_module('c_bn2', nn.BatchNorm1d(100))\n",
    "#         self.class_classifier.add_module('c_relu2', nn.ReLU(True))\n",
    "#         self.class_classifier.add_module('c_fc3', nn.Linear(100, 38))\n",
    "#         self.class_classifier.add_module('c_softmax', nn.LogSoftmax())\n",
    "\n",
    "#         self.domain_classifier = nn.Sequential()\n",
    "#         self.domain_classifier.add_module('d_fc1', nn.Linear(50 * 4 * 4, 100))\n",
    "#         self.domain_classifier.add_module('d_bn1', nn.BatchNorm1d(100))\n",
    "#         self.domain_classifier.add_module('d_relu1', nn.ReLU(True))\n",
    "#         self.domain_classifier.add_module('d_fc2', nn.Linear(100, 2))\n",
    "#         self.domain_classifier.add_module('d_softmax', nn.LogSoftmax(dim=1))\n",
    "\n",
    "#     def forward(self, input_data, alpha):\n",
    "#         input_data = input_data.expand(input_data.data.shape[0], 3, 28, 28)\n",
    "#         feature = self.feature(input_data)\n",
    "#         feature = feature.view(-1, 50 * 4 * 4)\n",
    "#         reverse_feature = ReverseLayerF.apply(feature, alpha)\n",
    "#         class_output = self.class_classifier(feature)\n",
    "#         domain_output = self.domain_classifier(reverse_feature)\n",
    "\n",
    "#         return class_output, domain_output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "df4d3906",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:03.997707Z",
     "iopub.status.busy": "2024-07-07T14:00:03.997439Z",
     "iopub.status.idle": "2024-07-07T14:00:04.015560Z",
     "shell.execute_reply": "2024-07-07T14:00:04.014800Z"
    },
    "papermill": {
     "duration": 0.031685,
     "end_time": "2024-07-07T14:00:04.017332",
     "exception": false,
     "start_time": "2024-07-07T14:00:03.985647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CNNModel(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNNModel, self).__init__()\n",
    "        \n",
    "        # Defining the feature extractor part\n",
    "        self.feature = nn.Sequential()\n",
    "        self.feature.add_module('f_conv1', nn.Conv2d(3, 64, kernel_size=3))  \n",
    "        self.feature.add_module('f_bn1', nn.BatchNorm2d(64))  # BatchNorm after Conv layer\n",
    "        self.feature.add_module('f_pool1', nn.MaxPool2d(kernel_size=2, stride=2))\n",
    "        self.feature.add_module('f_relu1', nn.ReLU(True))\n",
    "#         self.feature.add_module('f_dropout1', nn.Dropout2d(p=0.2))  # Dropout after max pooling\n",
    "\n",
    "        \n",
    "        self.feature.add_module('f_conv2', nn.Conv2d(64, 32, kernel_size=3))\n",
    "        self.feature.add_module('f_bn2', nn.BatchNorm2d(32))  # BatchNorm after Conv layer\n",
    "        self.feature.add_module('f_pool2', nn.MaxPool2d(kernel_size=2, stride=2))\n",
    "#         self.feature.add_module('f_dropout2', nn.Dropout2d(p=0.21))  # Dropout after max pooling\n",
    "        self.feature.add_module('f_relu2', nn.ReLU(True))\n",
    "#         self.feature.add_module('f_dropout2', nn.Dropout2d(p=0.25))  # Dropout after max pooling\n",
    "\n",
    "            \n",
    "        self.feature.add_module('f_conv3', nn.Conv2d(32, 16, kernel_size=3))\n",
    "        self.feature.add_module('f_bn3', nn.BatchNorm2d(16))  # BatchNorm after Conv layer\n",
    "        self.feature.add_module('f_pool3', nn.MaxPool2d(kernel_size=2, stride=2))\n",
    "        self.feature.add_module('f_relu3', nn.ReLU(True))\n",
    "\n",
    "        # Classifier for class prediction\n",
    "        self.class_classifier = nn.Sequential()\n",
    "        self.class_classifier.add_module('c_fc1', nn.Linear(16 * 14 * 14, 128))  # Adjust based on flattened input\n",
    "        self.class_classifier.add_module('c_bn1', nn.BatchNorm1d(128))  # BatchNorm after FC layer\n",
    "        self.class_classifier.add_module('c_relu1', nn.ReLU(True))\n",
    "#         self.class_classifier.add_module('c_dropout1', nn.Dropout(p=0.5))\n",
    "        \n",
    "        self.class_classifier.add_module('c_fc2', nn.Linear(128, 38))  # 38 classes\n",
    "        self.class_classifier.add_module('c_softmax', nn.LogSoftmax(dim=1))\n",
    "        \n",
    "        # Classifier for domain prediction (DANN)\n",
    "        self.domain_classifier = nn.Sequential()\n",
    "        self.domain_classifier.add_module('d_fc1', nn.Linear(16 * 14 * 14, 128))  # Same input size\n",
    "        self.domain_classifier.add_module('d_bn1', nn.BatchNorm1d(128))  # BatchNorm after FC layer\n",
    "        self.domain_classifier.add_module('d_relu1', nn.ReLU(True))\n",
    "        \n",
    "        self.domain_classifier.add_module('d_fc2', nn.Linear(128, 2))  # Assuming binary domain classification\n",
    "        self.domain_classifier.add_module('d_softmax', nn.LogSoftmax(dim=1))\n",
    "\n",
    "    def forward(self, input_data, alpha):\n",
    "        # Assuming the input is already 1x128x128\n",
    "        input_data = input_data.expand(input_data.data.shape[0], 3, 128, 128)\n",
    "\n",
    "            \n",
    "        feature = self.feature(input_data)\n",
    "        feature = feature.view(-1, 16 * 14 * 14)  # Flattening the feature map\n",
    "        \n",
    "        # Gradient reversal layer\n",
    "        reverse_feature = ReverseLayerF.apply(feature, alpha)\n",
    "        \n",
    "        # Class and domain classification outputs\n",
    "        class_output = self.class_classifier(feature)\n",
    "        domain_output = self.domain_classifier(reverse_feature)\n",
    "        \n",
    "        return class_output, domain_output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4aac078a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:04.041131Z",
     "iopub.status.busy": "2024-07-07T14:00:04.040850Z",
     "iopub.status.idle": "2024-07-07T14:00:04.045933Z",
     "shell.execute_reply": "2024-07-07T14:00:04.045154Z"
    },
    "papermill": {
     "duration": 0.018993,
     "end_time": "2024-07-07T14:00:04.047730",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.028737",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# class CNNModel(nn.Module):\n",
    "#     def __init__(self):\n",
    "#         super(CNNModel, self).__init__()\n",
    "        \n",
    "#         # Load pre-trained AlexNet without the final classification layer\n",
    "#         alexnet = models.alexnet(pretrained=False)\n",
    "#         self.feature_extractor = nn.Sequential(*list(alexnet.features.children()))\n",
    "\n",
    "#         # Class classifier\n",
    "#         self.class_classifier = nn.Sequential(\n",
    "#             nn.Linear(256 * 6 * 6, 4096),  # Adjust input size according to feature extractor output\n",
    "#             nn.ReLU(True),\n",
    "#             nn.Dropout(0.3),\n",
    "#             nn.Linear(4096, 4096),\n",
    "#             nn.ReLU(True),\n",
    "#             nn.Dropout(),\n",
    "#             nn.Linear(4096, 38),  # Number of classes in your specific task\n",
    "#             nn.LogSoftmax(dim=1)\n",
    "#         )\n",
    "\n",
    "#         # Domain classifier\n",
    "#         self.domain_classifier = nn.Sequential(\n",
    "#             nn.Linear(256 * 6 * 6, 1024),  # Adjust input size according to feature extractor output\n",
    "#             nn.ReLU(True),\n",
    "#             nn.Dropout(0.3),\n",
    "#             nn.Linear(1024, 1024),\n",
    "#             nn.ReLU(True),\n",
    "#             nn.Dropout(0.3),\n",
    "#             nn.Linear(1024, 2),  # Binary classification: source or target domain\n",
    "#             nn.LogSoftmax(dim=1)\n",
    "#         )\n",
    "\n",
    "#     def forward(self, input_data, alpha):\n",
    "        \n",
    "#         input_data = input_data.expand(input_data.data.shape[0], 3, 224, 224)\n",
    "\n",
    "#         # Feature extraction through AlexNet\n",
    "#         features = self.feature_extractor(input_data)\n",
    "#         features = features.view(-1, 256 * 6 * 6)  # Flatten the feature map\n",
    "\n",
    "#         # Reverse features for domain classification\n",
    "#         reverse_features = ReverseLayerF.apply(features, alpha)\n",
    "\n",
    "#         # Get class and domain outputs\n",
    "#         class_output = self.class_classifier(features)\n",
    "#         domain_output = self.domain_classifier(reverse_features)\n",
    "\n",
    "#         return class_output, domain_output\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3dfd3b10",
   "metadata": {
    "papermill": {
     "duration": 0.01101,
     "end_time": "2024-07-07T14:00:04.069725",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.058715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c70484b0",
   "metadata": {
    "papermill": {
     "duration": 0.010859,
     "end_time": "2024-07-07T14:00:04.091744",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.080885",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Test Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0e9f87de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:04.115424Z",
     "iopub.status.busy": "2024-07-07T14:00:04.115146Z",
     "iopub.status.idle": "2024-07-07T14:00:04.129240Z",
     "shell.execute_reply": "2024-07-07T14:00:04.128408Z"
    },
    "papermill": {
     "duration": 0.028246,
     "end_time": "2024-07-07T14:00:04.131157",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.102911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "def test(dataset_name, epoch):\n",
    "    assert dataset_name in ['source_domain', 'target_domain']\n",
    "\n",
    "#     model_root = os.path.join('/kaggle/working', 'models')\n",
    "\n",
    "    image_root = os.path.join('/kaggle/input/plantvillage-dann/Plantvillage_Dataset', dataset_name)\n",
    "    \n",
    "    cudnn.benchmark = True\n",
    "    batch_size = 32\n",
    "    image_size = 128\n",
    "    alpha = 0\n",
    "\n",
    "    \"\"\"load data\"\"\"\n",
    "\n",
    "    img_transform_source = transforms.Compose([\n",
    "        transforms.Resize(image_size),\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize(mean=mean_source, std=std_source)\n",
    "    ])\n",
    "\n",
    "    img_transform_target = transforms.Compose([\n",
    "        transforms.Resize(image_size),\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize(mean=mean_target, std=std_target)\n",
    "    ])\n",
    "        \n",
    "    test_list = os.path.join(image_root, 'test_labels.txt')\n",
    "\n",
    "    dataset = GetLoader(\n",
    "        data_root=os.path.join(image_root, 'test'),\n",
    "        data_list=test_list,\n",
    "        transform=img_transform_source if dataset_name == 'source_domain' else img_transform_target\n",
    "    )\n",
    "        \n",
    "\n",
    "    dataloader = torch.utils.data.DataLoader(\n",
    "        dataset=dataset,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=False,\n",
    "        num_workers=8\n",
    "    )\n",
    "\n",
    "    \"\"\" training \"\"\"\n",
    "\n",
    "    my_net = torch.load(os.path.join(\n",
    "        model_root, 'plantvillage_model_epoch_' + str(epoch) + '.pth'\n",
    "    ))\n",
    "    my_net = my_net.eval()\n",
    "\n",
    "    if cuda:\n",
    "        my_net = my_net.cuda()\n",
    "\n",
    "    len_dataloader = len(dataloader)\n",
    "    data_target_iter = iter(dataloader)\n",
    "\n",
    "    i = 0\n",
    "    n_total = 0\n",
    "    n_correct = 0\n",
    "    total_loss = 0  # Initialize total loss\n",
    "\n",
    "\n",
    "    while i < len_dataloader:\n",
    "\n",
    "        # test model using target data\n",
    "        data_target = next(data_target_iter)\n",
    "        t_img, t_label = data_target\n",
    "\n",
    "        batch_size = len(t_label)\n",
    "\n",
    "        input_img = torch.FloatTensor(batch_size, 3, image_size, image_size)\n",
    "        class_label = torch.LongTensor(batch_size)\n",
    "\n",
    "        if cuda:\n",
    "            t_img = t_img.cuda()\n",
    "            t_label = t_label.cuda()\n",
    "            input_img = input_img.cuda()\n",
    "            class_label = class_label.cuda()\n",
    "\n",
    "        input_img.resize_as_(t_img).copy_(t_img)\n",
    "        class_label.resize_as_(t_label).copy_(t_label)\n",
    "\n",
    "        ##run model\n",
    "        class_output, _ = my_net(input_data=input_img, alpha=alpha)\n",
    "        \n",
    "        ##calc loss\n",
    "        err_test_label = loss_class(class_output, class_label)\n",
    "        \n",
    "        total_loss += err_test_label.item()  # Accumulate the loss\n",
    "\n",
    "        \n",
    "        ##calc acc\n",
    "        pred = class_output.data.max(1, keepdim=True)[1]\n",
    "        n_correct += pred.eq(class_label.data.view_as(pred)).cpu().sum().item()\n",
    "        n_total += batch_size\n",
    "\n",
    "        i += 1\n",
    "        \n",
    "    avg_loss = total_loss / len_dataloader  # Compute average loss\n",
    "    accu = n_correct / n_total\n",
    "\n",
    "#     print('epoch: %d, accuracy of the %s dataset: %f' % (epoch, dataset_name, accu))\n",
    "    \n",
    "    return avg_loss, accu"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8d0a52d",
   "metadata": {
    "papermill": {
     "duration": 0.010736,
     "end_time": "2024-07-07T14:00:04.153389",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.142653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Main"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "480d3e33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:04.176441Z",
     "iopub.status.busy": "2024-07-07T14:00:04.176195Z",
     "iopub.status.idle": "2024-07-07T14:00:04.183656Z",
     "shell.execute_reply": "2024-07-07T14:00:04.182582Z"
    },
    "papermill": {
     "duration": 0.021115,
     "end_time": "2024-07-07T14:00:04.185711",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.164596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['train_labels.txt', 'test', 'test_labels.txt', 'train']\n"
     ]
    }
   ],
   "source": [
    "print(os.listdir(target_image_root))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b844bf7",
   "metadata": {
    "papermill": {
     "duration": 0.011313,
     "end_time": "2024-07-07T14:00:04.208146",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.196833",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Load Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fa2856e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:04.231956Z",
     "iopub.status.busy": "2024-07-07T14:00:04.231672Z",
     "iopub.status.idle": "2024-07-07T14:00:04.252762Z",
     "shell.execute_reply": "2024-07-07T14:00:04.252079Z"
    },
    "papermill": {
     "duration": 0.035373,
     "end_time": "2024-07-07T14:00:04.254743",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.219370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "my_net = CNNModel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "eb59c5c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:04.278332Z",
     "iopub.status.busy": "2024-07-07T14:00:04.278077Z",
     "iopub.status.idle": "2024-07-07T14:00:04.283314Z",
     "shell.execute_reply": "2024-07-07T14:00:04.282515Z"
    },
    "papermill": {
     "duration": 0.019007,
     "end_time": "2024-07-07T14:00:04.285205",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.266198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# setup optimizer\n",
    "\n",
    "optimizer = optim.Adam(my_net.parameters(), lr=lr)\n",
    "\n",
    "loss_class = torch.nn.NLLLoss()\n",
    "loss_domain = torch.nn.NLLLoss()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cf90eae3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:04.351134Z",
     "iopub.status.busy": "2024-07-07T14:00:04.350813Z",
     "iopub.status.idle": "2024-07-07T14:00:04.503243Z",
     "shell.execute_reply": "2024-07-07T14:00:04.502386Z"
    },
    "papermill": {
     "duration": 0.167707,
     "end_time": "2024-07-07T14:00:04.505925",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.338218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "if cuda:\n",
    "    my_net = my_net.cuda()\n",
    "    loss_class = loss_class.cuda()\n",
    "    loss_domain = loss_domain.cuda()\n",
    "\n",
    "for p in my_net.parameters():\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "2822e8cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:04.531223Z",
     "iopub.status.busy": "2024-07-07T14:00:04.530906Z",
     "iopub.status.idle": "2024-07-07T14:00:04.535156Z",
     "shell.execute_reply": "2024-07-07T14:00:04.534271Z"
    },
    "papermill": {
     "duration": 0.018795,
     "end_time": "2024-07-07T14:00:04.537044",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.518249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "if not os.path.exists(model_root):\n",
    "    os.makedirs(model_root)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8f194a0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:04.561463Z",
     "iopub.status.busy": "2024-07-07T14:00:04.561176Z",
     "iopub.status.idle": "2024-07-07T14:00:04.565404Z",
     "shell.execute_reply": "2024-07-07T14:00:04.564550Z"
    },
    "papermill": {
     "duration": 0.018508,
     "end_time": "2024-07-07T14:00:04.567511",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.549003",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100\n"
     ]
    }
   ],
   "source": [
    "print(n_epoch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9232d99d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T14:00:04.591497Z",
     "iopub.status.busy": "2024-07-07T14:00:04.591220Z",
     "iopub.status.idle": "2024-07-07T16:52:05.683348Z",
     "shell.execute_reply": "2024-07-07T16:52:05.681852Z"
    },
    "papermill": {
     "duration": 10321.107067,
     "end_time": "2024-07-07T16:52:05.685872",
     "exception": false,
     "start_time": "2024-07-07T14:00:04.578805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TRAINING STARTED...\n",
      "\n",
      "epoch:  1\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.727453, err_s_domain: 0.417290, err_t_domain: 0.416926, accuracy: 0.802597\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torch/utils/data/dataloader.py:557: UserWarning: This DataLoader will create 8 worker processes in total. Our suggested max number of worker in current system is 4, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
      "  warnings.warn(_create_warning_msg(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tTest:\n",
      "\t\tSource dataset -  loss: 1.376056, accuracy: 0.638654\n",
      "\t\tTarget dataset -  loss: 2.867502, accuracy: 0.360886\n",
      "\n",
      "epoch:  2\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.287832, err_s_domain: 0.354928, err_t_domain: 0.358107, accuracy: 0.913053\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 1.786852, accuracy: 0.583395\n",
      "\t\tTarget dataset -  loss: 2.811793, accuracy: 0.424605\n",
      "\n",
      "epoch:  3\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.217006, err_s_domain: 0.438122, err_t_domain: 0.441001, accuracy: 0.932050\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 1.320782, accuracy: 0.692994\n",
      "\t\tTarget dataset -  loss: 2.900777, accuracy: 0.422582\n",
      "\n",
      "epoch:  4\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.176454, err_s_domain: 0.484500, err_t_domain: 0.483490, accuracy: 0.943816\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 1.972214, accuracy: 0.625506\n",
      "\t\tTarget dataset -  loss: 1.940903, accuracy: 0.563442\n",
      "\n",
      "epoch:  5\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.166420, err_s_domain: 0.539093, err_t_domain: 0.540674, accuracy: 0.944806\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 1.484285, accuracy: 0.686466\n",
      "\t\tTarget dataset -  loss: 1.984726, accuracy: 0.591210\n",
      "\n",
      "epoch:  6\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.148812, err_s_domain: 0.595755, err_t_domain: 0.597444, accuracy: 0.951991\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 1.163441, accuracy: 0.746506\n",
      "\t\tTarget dataset -  loss: 1.655488, accuracy: 0.643343\n",
      "\n",
      "epoch:  7\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.128620, err_s_domain: 0.617161, err_t_domain: 0.619673, accuracy: 0.957079\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.595291, accuracy: 0.839463\n",
      "\t\tTarget dataset -  loss: 1.233622, accuracy: 0.708441\n",
      "\n",
      "epoch:  8\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.115550, err_s_domain: 0.647944, err_t_domain: 0.648259, accuracy: 0.961731\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.680088, accuracy: 0.829993\n",
      "\t\tTarget dataset -  loss: 0.885471, accuracy: 0.781721\n",
      "\n",
      "epoch:  9\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.099047, err_s_domain: 0.663053, err_t_domain: 0.663202, accuracy: 0.967142\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.521048, accuracy: 0.858680\n",
      "\t\tTarget dataset -  loss: 0.889978, accuracy: 0.784755\n",
      "\n",
      "epoch:  10\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.084022, err_s_domain: 0.673420, err_t_domain: 0.673478, accuracy: 0.972346\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.661308, accuracy: 0.833579\n",
      "\t\tTarget dataset -  loss: 0.765429, accuracy: 0.808018\n",
      "\n",
      "epoch:  11\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.076814, err_s_domain: 0.677489, err_t_domain: 0.678129, accuracy: 0.975316\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.535536, accuracy: 0.867506\n",
      "\t\tTarget dataset -  loss: 0.688991, accuracy: 0.831924\n",
      "\n",
      "epoch:  12\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.063482, err_s_domain: 0.683176, err_t_domain: 0.683442, accuracy: 0.979990\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.516713, accuracy: 0.876885\n",
      "\t\tTarget dataset -  loss: 0.871930, accuracy: 0.800478\n",
      "\n",
      "epoch:  13\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.060502, err_s_domain: 0.683533, err_t_domain: 0.683902, accuracy: 0.979852\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.467047, accuracy: 0.879184\n",
      "\t\tTarget dataset -  loss: 0.731352, accuracy: 0.826131\n",
      "\n",
      "epoch:  14\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.052823, err_s_domain: 0.686200, err_t_domain: 0.687050, accuracy: 0.982293\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.598832, accuracy: 0.858680\n",
      "\t\tTarget dataset -  loss: 0.795357, accuracy: 0.814822\n",
      "\n",
      "epoch:  15\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.048467, err_s_domain: 0.688076, err_t_domain: 0.687614, accuracy: 0.983651\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.543459, accuracy: 0.869897\n",
      "\t\tTarget dataset -  loss: 0.644537, accuracy: 0.845807\n",
      "\n",
      "epoch:  16\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.045585, err_s_domain: 0.688498, err_t_domain: 0.689030, accuracy: 0.985655\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.515151, accuracy: 0.878540\n",
      "\t\tTarget dataset -  loss: 0.710092, accuracy: 0.832015\n",
      "\n",
      "epoch:  17\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.046851, err_s_domain: 0.689032, err_t_domain: 0.689011, accuracy: 0.984365\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.454568, accuracy: 0.887367\n",
      "\t\tTarget dataset -  loss: 0.689906, accuracy: 0.841670\n",
      "\n",
      "epoch:  18\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.040501, err_s_domain: 0.690445, err_t_domain: 0.690418, accuracy: 0.987359\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.512819, accuracy: 0.881850\n",
      "\t\tTarget dataset -  loss: 0.642738, accuracy: 0.855094\n",
      "\n",
      "epoch:  19\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.038564, err_s_domain: 0.690304, err_t_domain: 0.690778, accuracy: 0.987428\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.443883, accuracy: 0.890217\n",
      "\t\tTarget dataset -  loss: 0.648435, accuracy: 0.852243\n",
      "\n",
      "epoch:  20\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.033055, err_s_domain: 0.691127, err_t_domain: 0.691245, accuracy: 0.989132\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.488675, accuracy: 0.883321\n",
      "\t\tTarget dataset -  loss: 0.669228, accuracy: 0.849577\n",
      "\n",
      "epoch:  21\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.030747, err_s_domain: 0.691323, err_t_domain: 0.690975, accuracy: 0.990260\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.491041, accuracy: 0.883965\n",
      "\t\tTarget dataset -  loss: 0.630646, accuracy: 0.857484\n",
      "\n",
      "epoch:  22\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.027858, err_s_domain: 0.691706, err_t_domain: 0.692283, accuracy: 0.990790\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.477960, accuracy: 0.887551\n",
      "\t\tTarget dataset -  loss: 0.635656, accuracy: 0.857668\n",
      "\n",
      "epoch:  23\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.030925, err_s_domain: 0.691595, err_t_domain: 0.691121, accuracy: 0.989408\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.486075, accuracy: 0.889481\n",
      "\t\tTarget dataset -  loss: 0.659797, accuracy: 0.861622\n",
      "\n",
      "epoch:  24\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.027666, err_s_domain: 0.691964, err_t_domain: 0.692339, accuracy: 0.990398\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.535498, accuracy: 0.883781\n",
      "\t\tTarget dataset -  loss: 0.642853, accuracy: 0.860978\n",
      "\n",
      "epoch:  25\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.025998, err_s_domain: 0.692462, err_t_domain: 0.692520, accuracy: 0.991319\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.544211, accuracy: 0.883781\n",
      "\t\tTarget dataset -  loss: 0.679727, accuracy: 0.858680\n",
      "\n",
      "epoch:  26\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.025592, err_s_domain: 0.692676, err_t_domain: 0.692674, accuracy: 0.991204\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.539026, accuracy: 0.882586\n",
      "\t\tTarget dataset -  loss: 0.657311, accuracy: 0.862449\n",
      "\n",
      "epoch:  27\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.022713, err_s_domain: 0.692481, err_t_domain: 0.692532, accuracy: 0.992724\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.555700, accuracy: 0.882677\n",
      "\t\tTarget dataset -  loss: 0.692644, accuracy: 0.856565\n",
      "\n",
      "epoch:  28\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.023989, err_s_domain: 0.692473, err_t_domain: 0.692586, accuracy: 0.991642\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.573787, accuracy: 0.883229\n",
      "\t\tTarget dataset -  loss: 0.677239, accuracy: 0.861530\n",
      "\n",
      "epoch:  29\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.020072, err_s_domain: 0.692550, err_t_domain: 0.692205, accuracy: 0.993484\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.613144, accuracy: 0.876701\n",
      "\t\tTarget dataset -  loss: 0.699868, accuracy: 0.861806\n",
      "\n",
      "epoch:  30\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.023292, err_s_domain: 0.692649, err_t_domain: 0.692860, accuracy: 0.992148\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.603805, accuracy: 0.876333\n",
      "\t\tTarget dataset -  loss: 0.719441, accuracy: 0.856381\n",
      "\n",
      "epoch:  31\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.022384, err_s_domain: 0.692761, err_t_domain: 0.692687, accuracy: 0.993299\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.677364, accuracy: 0.870357\n",
      "\t\tTarget dataset -  loss: 0.743966, accuracy: 0.855094\n",
      "\n",
      "epoch:  32\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.020005, err_s_domain: 0.692671, err_t_domain: 0.692685, accuracy: 0.993783\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.567100, accuracy: 0.883965\n",
      "\t\tTarget dataset -  loss: 0.715634, accuracy: 0.862541\n",
      "\n",
      "epoch:  33\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.017509, err_s_domain: 0.692883, err_t_domain: 0.692740, accuracy: 0.994197\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.575462, accuracy: 0.884700\n",
      "\t\tTarget dataset -  loss: 0.698211, accuracy: 0.864380\n",
      "\n",
      "epoch:  34\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.018499, err_s_domain: 0.692791, err_t_domain: 0.692895, accuracy: 0.993967\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.584922, accuracy: 0.881942\n",
      "\t\tTarget dataset -  loss: 0.726886, accuracy: 0.856657\n",
      "\n",
      "epoch:  35\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.021353, err_s_domain: 0.692759, err_t_domain: 0.692765, accuracy: 0.993207\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.579279, accuracy: 0.882861\n",
      "\t\tTarget dataset -  loss: 0.731832, accuracy: 0.860427\n",
      "\n",
      "epoch:  36\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.018906, err_s_domain: 0.692716, err_t_domain: 0.692879, accuracy: 0.993484\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.626178, accuracy: 0.881758\n",
      "\t\tTarget dataset -  loss: 0.700371, accuracy: 0.871000\n",
      "\n",
      "epoch:  37\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.018898, err_s_domain: 0.692879, err_t_domain: 0.692799, accuracy: 0.993783\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.666637, accuracy: 0.874310\n",
      "\t\tTarget dataset -  loss: 0.728829, accuracy: 0.865208\n",
      "\n",
      "epoch:  38\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.019016, err_s_domain: 0.693044, err_t_domain: 0.693084, accuracy: 0.993829\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.611926, accuracy: 0.881942\n",
      "\t\tTarget dataset -  loss: 0.713053, accuracy: 0.867598\n",
      "\n",
      "epoch:  39\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.017573, err_s_domain: 0.692964, err_t_domain: 0.692932, accuracy: 0.993829\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.606535, accuracy: 0.885712\n",
      "\t\tTarget dataset -  loss: 0.680714, accuracy: 0.872931\n",
      "\n",
      "epoch:  40\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.015823, err_s_domain: 0.693002, err_t_domain: 0.692956, accuracy: 0.994543\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.620494, accuracy: 0.880195\n",
      "\t\tTarget dataset -  loss: 0.723557, accuracy: 0.862082\n",
      "\n",
      "epoch:  41\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.016772, err_s_domain: 0.692959, err_t_domain: 0.693041, accuracy: 0.994474\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.650462, accuracy: 0.879000\n",
      "\t\tTarget dataset -  loss: 0.724183, accuracy: 0.867966\n",
      "\n",
      "epoch:  42\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.016190, err_s_domain: 0.692923, err_t_domain: 0.693002, accuracy: 0.994474\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.653138, accuracy: 0.876701\n",
      "\t\tTarget dataset -  loss: 0.715259, accuracy: 0.867598\n",
      "\n",
      "epoch:  43\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.015830, err_s_domain: 0.693108, err_t_domain: 0.693101, accuracy: 0.994727\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.683377, accuracy: 0.871828\n",
      "\t\tTarget dataset -  loss: 0.750674, accuracy: 0.860519\n",
      "\n",
      "epoch:  44\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.013571, err_s_domain: 0.692973, err_t_domain: 0.692926, accuracy: 0.995602\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.721395, accuracy: 0.870725\n",
      "\t\tTarget dataset -  loss: 0.736409, accuracy: 0.865392\n",
      "\n",
      "epoch:  45\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.012652, err_s_domain: 0.693113, err_t_domain: 0.693061, accuracy: 0.995740\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.613759, accuracy: 0.884884\n",
      "\t\tTarget dataset -  loss: 0.700132, accuracy: 0.870725\n",
      "\n",
      "epoch:  46\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.017595, err_s_domain: 0.692871, err_t_domain: 0.692999, accuracy: 0.994082\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.618053, accuracy: 0.885344\n",
      "\t\tTarget dataset -  loss: 0.706815, accuracy: 0.873667\n",
      "\n",
      "epoch:  47\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.013397, err_s_domain: 0.693072, err_t_domain: 0.693132, accuracy: 0.995625\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.648389, accuracy: 0.879367\n",
      "\t\tTarget dataset -  loss: 0.740577, accuracy: 0.867414\n",
      "\n",
      "epoch:  48\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.015697, err_s_domain: 0.693157, err_t_domain: 0.693093, accuracy: 0.995141\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.671053, accuracy: 0.876517\n",
      "\t\tTarget dataset -  loss: 0.771376, accuracy: 0.864472\n",
      "\n",
      "epoch:  49\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.016665, err_s_domain: 0.693024, err_t_domain: 0.693040, accuracy: 0.994635\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.743259, accuracy: 0.867966\n",
      "\t\tTarget dataset -  loss: 0.797262, accuracy: 0.858404\n",
      "\n",
      "epoch:  50\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.014035, err_s_domain: 0.693051, err_t_domain: 0.693040, accuracy: 0.995280\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.687021, accuracy: 0.877804\n",
      "\t\tTarget dataset -  loss: 0.759887, accuracy: 0.867323\n",
      "\n",
      "epoch:  51\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.011142, err_s_domain: 0.693166, err_t_domain: 0.693165, accuracy: 0.996155\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.692845, accuracy: 0.878540\n",
      "\t\tTarget dataset -  loss: 0.779471, accuracy: 0.866219\n",
      "\n",
      "epoch:  52\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.013108, err_s_domain: 0.693201, err_t_domain: 0.693188, accuracy: 0.995694\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.729191, accuracy: 0.870908\n",
      "\t\tTarget dataset -  loss: 0.764192, accuracy: 0.868150\n",
      "\n",
      "epoch:  53\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.014149, err_s_domain: 0.693068, err_t_domain: 0.693007, accuracy: 0.995441\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.656359, accuracy: 0.879184\n",
      "\t\tTarget dataset -  loss: 0.725910, accuracy: 0.871092\n",
      "\n",
      "epoch:  54\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.011618, err_s_domain: 0.693265, err_t_domain: 0.693181, accuracy: 0.995924\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.675608, accuracy: 0.877620\n",
      "\t\tTarget dataset -  loss: 0.797073, accuracy: 0.862909\n",
      "\n",
      "epoch:  55\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.010235, err_s_domain: 0.692971, err_t_domain: 0.693018, accuracy: 0.996638\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.722406, accuracy: 0.877529\n",
      "\t\tTarget dataset -  loss: 0.817290, accuracy: 0.863461\n",
      "\n",
      "epoch:  56\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.013649, err_s_domain: 0.693111, err_t_domain: 0.693238, accuracy: 0.995763\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.670036, accuracy: 0.880655\n",
      "\t\tTarget dataset -  loss: 0.751076, accuracy: 0.869713\n",
      "\n",
      "epoch:  57\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.014590, err_s_domain: 0.693079, err_t_domain: 0.692974, accuracy: 0.995303\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.650666, accuracy: 0.884700\n",
      "\t\tTarget dataset -  loss: 0.754872, accuracy: 0.871092\n",
      "\n",
      "epoch:  58\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009604, err_s_domain: 0.693209, err_t_domain: 0.693147, accuracy: 0.996984\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.661006, accuracy: 0.883045\n",
      "\t\tTarget dataset -  loss: 0.733650, accuracy: 0.874402\n",
      "\n",
      "epoch:  59\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.010646, err_s_domain: 0.693046, err_t_domain: 0.693156, accuracy: 0.996362\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.711421, accuracy: 0.878540\n",
      "\t\tTarget dataset -  loss: 0.787730, accuracy: 0.868058\n",
      "\n",
      "epoch:  60\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.010879, err_s_domain: 0.693104, err_t_domain: 0.693103, accuracy: 0.996339\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.701209, accuracy: 0.879735\n",
      "\t\tTarget dataset -  loss: 0.787065, accuracy: 0.867506\n",
      "\n",
      "epoch:  61\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.013047, err_s_domain: 0.693049, err_t_domain: 0.693064, accuracy: 0.995579\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.724395, accuracy: 0.875506\n",
      "\t\tTarget dataset -  loss: 0.783068, accuracy: 0.867047\n",
      "\n",
      "epoch:  62\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.011812, err_s_domain: 0.693140, err_t_domain: 0.693100, accuracy: 0.996040\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.748229, accuracy: 0.871276\n",
      "\t\tTarget dataset -  loss: 0.799892, accuracy: 0.863921\n",
      "\n",
      "epoch:  63\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.011830, err_s_domain: 0.693101, err_t_domain: 0.693163, accuracy: 0.996454\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.682260, accuracy: 0.883045\n",
      "\t\tTarget dataset -  loss: 0.760994, accuracy: 0.871184\n",
      "\n",
      "epoch:  64\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.011043, err_s_domain: 0.693092, err_t_domain: 0.693029, accuracy: 0.996661\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.707775, accuracy: 0.879184\n",
      "\t\tTarget dataset -  loss: 0.761090, accuracy: 0.875138\n",
      "\n",
      "epoch:  65\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009358, err_s_domain: 0.693151, err_t_domain: 0.693124, accuracy: 0.996961\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.753728, accuracy: 0.875598\n",
      "\t\tTarget dataset -  loss: 0.829514, accuracy: 0.868426\n",
      "\n",
      "epoch:  66\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009222, err_s_domain: 0.693196, err_t_domain: 0.693228, accuracy: 0.997053\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.828202, accuracy: 0.865943\n",
      "\t\tTarget dataset -  loss: 0.890845, accuracy: 0.860243\n",
      "\n",
      "epoch:  67\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009857, err_s_domain: 0.693103, err_t_domain: 0.693176, accuracy: 0.997122\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.791655, accuracy: 0.870816\n",
      "\t\tTarget dataset -  loss: 0.867220, accuracy: 0.862266\n",
      "\n",
      "epoch:  68\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.010358, err_s_domain: 0.693032, err_t_domain: 0.693050, accuracy: 0.996454\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.745599, accuracy: 0.877161\n",
      "\t\tTarget dataset -  loss: 0.808836, accuracy: 0.870633\n",
      "\n",
      "epoch:  69\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.010633, err_s_domain: 0.693187, err_t_domain: 0.693107, accuracy: 0.996638\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.728073, accuracy: 0.882677\n",
      "\t\tTarget dataset -  loss: 0.798395, accuracy: 0.875322\n",
      "\n",
      "epoch:  70\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009831, err_s_domain: 0.693081, err_t_domain: 0.693109, accuracy: 0.996938\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.738488, accuracy: 0.876885\n",
      "\t\tTarget dataset -  loss: 0.822823, accuracy: 0.869253\n",
      "\n",
      "epoch:  71\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009827, err_s_domain: 0.693180, err_t_domain: 0.693146, accuracy: 0.996569\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.748283, accuracy: 0.881022\n",
      "\t\tTarget dataset -  loss: 0.805364, accuracy: 0.874402\n",
      "\n",
      "epoch:  72\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009018, err_s_domain: 0.693108, err_t_domain: 0.693188, accuracy: 0.997260\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.984636, accuracy: 0.848658\n",
      "\t\tTarget dataset -  loss: 1.021110, accuracy: 0.844888\n",
      "\n",
      "epoch:  73\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.010459, err_s_domain: 0.693134, err_t_domain: 0.693041, accuracy: 0.996845\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.808306, accuracy: 0.875138\n",
      "\t\tTarget dataset -  loss: 0.882911, accuracy: 0.865759\n",
      "\n",
      "epoch:  74\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.010913, err_s_domain: 0.693170, err_t_domain: 0.693171, accuracy: 0.996408\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.732786, accuracy: 0.880563\n",
      "\t\tTarget dataset -  loss: 0.833324, accuracy: 0.869713\n",
      "\n",
      "epoch:  75\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.006581, err_s_domain: 0.693259, err_t_domain: 0.693208, accuracy: 0.997813\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.746581, accuracy: 0.881666\n",
      "\t\tTarget dataset -  loss: 0.801442, accuracy: 0.877988\n",
      "\n",
      "epoch:  76\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009822, err_s_domain: 0.693075, err_t_domain: 0.693111, accuracy: 0.996776\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.755102, accuracy: 0.875965\n",
      "\t\tTarget dataset -  loss: 0.809919, accuracy: 0.871000\n",
      "\n",
      "epoch:  77\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.010494, err_s_domain: 0.693034, err_t_domain: 0.693067, accuracy: 0.996684\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.793226, accuracy: 0.876517\n",
      "\t\tTarget dataset -  loss: 0.859930, accuracy: 0.871276\n",
      "\n",
      "epoch:  78\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.008616, err_s_domain: 0.693185, err_t_domain: 0.693148, accuracy: 0.997329\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.752446, accuracy: 0.879643\n",
      "\t\tTarget dataset -  loss: 0.865443, accuracy: 0.865484\n",
      "\n",
      "epoch:  79\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.016477, err_s_domain: 0.693048, err_t_domain: 0.693157, accuracy: 0.996293\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.722561, accuracy: 0.885344\n",
      "\t\tTarget dataset -  loss: 0.797027, accuracy: 0.876425\n",
      "\n",
      "epoch:  80\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.010018, err_s_domain: 0.693118, err_t_domain: 0.693068, accuracy: 0.996753\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.771478, accuracy: 0.877345\n",
      "\t\tTarget dataset -  loss: 0.814539, accuracy: 0.871736\n",
      "\n",
      "epoch:  81\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.007742, err_s_domain: 0.693261, err_t_domain: 0.693245, accuracy: 0.997329\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.751755, accuracy: 0.881298\n",
      "\t\tTarget dataset -  loss: 0.803156, accuracy: 0.873759\n",
      "\n",
      "epoch:  82\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009689, err_s_domain: 0.693124, err_t_domain: 0.693112, accuracy: 0.997122\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.798445, accuracy: 0.871460\n",
      "\t\tTarget dataset -  loss: 0.862618, accuracy: 0.865392\n",
      "\n",
      "epoch:  83\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009757, err_s_domain: 0.693046, err_t_domain: 0.693023, accuracy: 0.996730\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.749665, accuracy: 0.878816\n",
      "\t\tTarget dataset -  loss: 0.817230, accuracy: 0.872747\n",
      "\n",
      "epoch:  84\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.005901, err_s_domain: 0.693272, err_t_domain: 0.693301, accuracy: 0.997905\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.756554, accuracy: 0.882402\n",
      "\t\tTarget dataset -  loss: 0.835725, accuracy: 0.873115\n",
      "\n",
      "epoch:  85\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.007563, err_s_domain: 0.693074, err_t_domain: 0.693118, accuracy: 0.997260\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.807005, accuracy: 0.871276\n",
      "\t\tTarget dataset -  loss: 0.868676, accuracy: 0.865759\n",
      "\n",
      "epoch:  86\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.010619, err_s_domain: 0.693200, err_t_domain: 0.693083, accuracy: 0.996224\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.761598, accuracy: 0.879643\n",
      "\t\tTarget dataset -  loss: 0.809207, accuracy: 0.874586\n",
      "\n",
      "epoch:  87\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009219, err_s_domain: 0.693139, err_t_domain: 0.693159, accuracy: 0.997260\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.800455, accuracy: 0.878264\n",
      "\t\tTarget dataset -  loss: 0.890941, accuracy: 0.868702\n",
      "\n",
      "epoch:  88\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009529, err_s_domain: 0.693129, err_t_domain: 0.693172, accuracy: 0.996661\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.797570, accuracy: 0.875782\n",
      "\t\tTarget dataset -  loss: 0.831210, accuracy: 0.872104\n",
      "\n",
      "epoch:  89\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.007486, err_s_domain: 0.693225, err_t_domain: 0.693177, accuracy: 0.997974\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.811531, accuracy: 0.873759\n",
      "\t\tTarget dataset -  loss: 0.862315, accuracy: 0.869070\n",
      "\n",
      "epoch:  90\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.008340, err_s_domain: 0.692899, err_t_domain: 0.692921, accuracy: 0.997030\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.750295, accuracy: 0.887459\n",
      "\t\tTarget dataset -  loss: 0.829494, accuracy: 0.877988\n",
      "\n",
      "epoch:  91\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.008562, err_s_domain: 0.693147, err_t_domain: 0.693125, accuracy: 0.997214\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.817064, accuracy: 0.876701\n",
      "\t\tTarget dataset -  loss: 0.866012, accuracy: 0.873851\n",
      "\n",
      "epoch:  92\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.011969, err_s_domain: 0.693114, err_t_domain: 0.693149, accuracy: 0.997099\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.811479, accuracy: 0.876241\n",
      "\t\tTarget dataset -  loss: 0.879687, accuracy: 0.867690\n",
      "\n",
      "epoch:  93\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.008472, err_s_domain: 0.693138, err_t_domain: 0.693158, accuracy: 0.997398\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.772867, accuracy: 0.882494\n",
      "\t\tTarget dataset -  loss: 0.817560, accuracy: 0.876517\n",
      "\n",
      "epoch:  94\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.008390, err_s_domain: 0.693182, err_t_domain: 0.693161, accuracy: 0.997329\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.790260, accuracy: 0.880747\n",
      "\t\tTarget dataset -  loss: 0.853560, accuracy: 0.873023\n",
      "\n",
      "epoch:  95\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.005263, err_s_domain: 0.693172, err_t_domain: 0.693187, accuracy: 0.998365\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.825554, accuracy: 0.875873\n",
      "\t\tTarget dataset -  loss: 0.854655, accuracy: 0.873299\n",
      "\n",
      "epoch:  96\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.008825, err_s_domain: 0.693029, err_t_domain: 0.692999, accuracy: 0.997214\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.848340, accuracy: 0.870081\n",
      "\t\tTarget dataset -  loss: 0.908690, accuracy: 0.863369\n",
      "\n",
      "epoch:  97\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.009058, err_s_domain: 0.693062, err_t_domain: 0.693055, accuracy: 0.996938\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.789395, accuracy: 0.879092\n",
      "\t\tTarget dataset -  loss: 0.835741, accuracy: 0.872563\n",
      "\n",
      "epoch:  98\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.007819, err_s_domain: 0.693195, err_t_domain: 0.693184, accuracy: 0.997536\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.828170, accuracy: 0.873207\n",
      "\t\tTarget dataset -  loss: 0.895810, accuracy: 0.866771\n",
      "\n",
      "epoch:  99\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.007489, err_s_domain: 0.693196, err_t_domain: 0.693155, accuracy: 0.997559\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.821053, accuracy: 0.872012\n",
      "\t\tTarget dataset -  loss: 0.871440, accuracy: 0.867506\n",
      "\n",
      "epoch:  100\n",
      "\tTrain:\n",
      "\t\terr_s_label: 0.006861, err_s_domain: 0.693147, err_t_domain: 0.693155, accuracy: 0.997859\n",
      "\tTest:\n",
      "\t\tSource dataset -  loss: 0.796208, accuracy: 0.879092\n",
      "\t\tTarget dataset -  loss: 0.843826, accuracy: 0.873483\n",
      "TRAINING COMPLETED\n"
     ]
    }
   ],
   "source": [
    "# training\n",
    "\n",
    "# Initialize lists to store metrics\n",
    "train_losses_s_label = []\n",
    "train_losses_s_domain = []\n",
    "train_losses_t_domain = []\n",
    "train_accs = []\n",
    "test_losses_source = []\n",
    "test_accs_source = []\n",
    "test_losses_target = []\n",
    "test_accs_target = []\n",
    "\n",
    "print('TRAINING STARTED...')\n",
    "\n",
    "for epoch in range(1, n_epoch + 1):\n",
    "\n",
    "    \n",
    "    len_dataloader = min(len(dataloader_source), len(dataloader_target)) ##returns the number of batches to find the min no of batches\n",
    "    data_source_iter = iter(dataloader_source) ##initialize iterator\n",
    "    data_target_iter = iter(dataloader_target)\n",
    "\n",
    "    # Initialize accumulators for the losses\n",
    "    total_err_s_label = 0\n",
    "    total_err_s_domain = 0\n",
    "    total_err_t_domain = 0\n",
    "    total_correct = 0\n",
    "    total_samples = 0\n",
    "    \n",
    "    i = 0\n",
    "    while i < len_dataloader: ##run iterations equal to the number of batches\n",
    "\n",
    "        p = float(i + epoch * len_dataloader) / n_epoch / len_dataloader\n",
    "        alpha = 2. / (1. + np.exp(-10 * p)) - 1\n",
    "\n",
    "        # training model using SOURCE DATA \n",
    "        \n",
    "        data_source = next(data_source_iter) ##fetch the next batch of data\n",
    "        s_img, s_label = data_source ## returns the images and their corresponding labels\n",
    "\n",
    "        my_net.zero_grad() ## resets the gradient to remove gradients of previous batches\n",
    "        batch_size = len(s_label)\n",
    "\n",
    "        ##initialize variables\n",
    "        input_img = torch.FloatTensor(batch_size, 3, image_size, image_size)\n",
    "        class_label = torch.LongTensor(batch_size)\n",
    "        domain_label = torch.zeros(batch_size) ##to zero becz it is source domain\n",
    "        domain_label = domain_label.long()\n",
    "        \n",
    "#         print(type(input_img))\n",
    "#         print(type(class_label))\n",
    "#         print(type(domain_label))\n",
    "\n",
    "        if cuda:\n",
    "             # Check tensor types and shapes before transferring to CUDA\n",
    "#             print(type(s_img), s_img.size(), s_img.dtype)\n",
    "#             print(type(s_label), s_label.size(), s_label.dtype)\n",
    "    \n",
    "            s_img = s_img.cuda()\n",
    "            s_label = s_label.cuda()\n",
    "            input_img = input_img.cuda()\n",
    "            class_label = class_label.cuda()\n",
    "            domain_label = domain_label.cuda()\n",
    "\n",
    "        input_img.resize_as_(s_img).copy_(s_img)\n",
    "        class_label.resize_as_(s_label).copy_(s_label)\n",
    "\n",
    "        ##train the model\n",
    "        class_output, domain_output = my_net(input_data=input_img, alpha=alpha)\n",
    "        \n",
    "        ##calc errors\n",
    "        err_s_label = loss_class(class_output, class_label) ##classification error\n",
    "        err_s_domain = loss_domain(domain_output, domain_label) ##domain error\n",
    "\n",
    "        \n",
    "        # training model using TARGET DATA\n",
    "        data_target = next(data_target_iter) ##fetches the next batch\n",
    "        t_img, _ = data_target ##returns the images but not the labels as to do unsupervised learning\n",
    "\n",
    "#         print(type(t_img))\n",
    "\n",
    "        batch_size = len(t_img)\n",
    "\n",
    "        ##initialize variables\n",
    "        input_img = torch.FloatTensor(batch_size, 3, image_size, image_size)\n",
    "        domain_label = torch.ones(batch_size) ##one becz its target domain\n",
    "        domain_label = domain_label.long()\n",
    "\n",
    "        if cuda:\n",
    "            t_img = t_img.cuda()\n",
    "            input_img = input_img.cuda()\n",
    "            domain_label = domain_label.cuda()\n",
    "\n",
    "        input_img.resize_as_(t_img).copy_(t_img)\n",
    "\n",
    "        ##train the model\n",
    "        _, domain_output = my_net(input_data=input_img, alpha=alpha)\n",
    "        \n",
    "        ##calc error\n",
    "        err_t_domain = loss_domain(domain_output, domain_label)\n",
    "        err = err_t_domain + err_s_domain + err_s_label\n",
    "        \n",
    "        \n",
    "        err.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        # Accumulate the losses\n",
    "        total_err_s_label += err_s_label.item() # Convert tensor to Python number and accumulate\n",
    "        total_err_s_domain += err_s_domain.item()\n",
    "        total_err_t_domain += err_t_domain.item()\n",
    "        \n",
    "        # Calculate accuracy for source data\n",
    "        pred = class_output.data.max(1, keepdim=True)[1]\n",
    "        total_correct += pred.eq(class_label.data.view_as(pred)).cpu().sum().item()\n",
    "        total_samples += batch_size\n",
    "        \n",
    "        i += 1\n",
    "\n",
    "    # Calculate the average losses\n",
    "    avg_err_s_label = total_err_s_label / len_dataloader\n",
    "    avg_err_s_domain = total_err_s_domain / len_dataloader\n",
    "    avg_err_t_domain = total_err_t_domain / len_dataloader\n",
    "    avg_accuracy = total_correct / total_samples\n",
    "\n",
    "    # Append to lists for graph\n",
    "    train_losses_s_label.append(avg_err_s_label)\n",
    "    train_losses_s_domain.append(avg_err_s_domain)\n",
    "    train_losses_t_domain.append(avg_err_t_domain)\n",
    "    train_accs.append(avg_accuracy)\n",
    "    \n",
    "    # Print training metrics\n",
    "    print('\\nepoch: ', epoch)\n",
    "    print('\\tTrain:')\n",
    "    print('\\t\\terr_s_label: %f, err_s_domain: %f, err_t_domain: %f, accuracy: %f' %\n",
    "          (avg_err_s_label, avg_err_s_domain, avg_err_t_domain, avg_accuracy))\n",
    "    \n",
    "\n",
    "    torch.save(my_net, '{0}/plantvillage_model_epoch_{1}.pth'.format(model_root, epoch))\n",
    "   \n",
    "    test_loss_source, test_acc_source = test(source_dataset_name, epoch)\n",
    "    test_loss_target, test_acc_target = test(target_dataset_name, epoch)\n",
    "\n",
    "    # Append test metrics\n",
    "    test_losses_source.append(test_loss_source)\n",
    "    test_accs_source.append(test_acc_source)\n",
    "    \n",
    "    test_losses_target.append(test_loss_target)\n",
    "    test_accs_target.append(test_acc_target)\n",
    "    \n",
    "    # Print test metrics\n",
    "    print('\\tTest:')\n",
    "    print('\\t\\tSource dataset -  loss: %f, accuracy: %f' % (test_loss_source, test_acc_source))\n",
    "    print('\\t\\tTarget dataset -  loss: %f, accuracy: %f' % (test_loss_target, test_acc_target))\n",
    "\n",
    "    \n",
    "    \n",
    "print('TRAINING COMPLETED')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95cbb6ba",
   "metadata": {
    "papermill": {
     "duration": 0.026609,
     "end_time": "2024-07-07T16:52:05.739854",
     "exception": false,
     "start_time": "2024-07-07T16:52:05.713245",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Graphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ba5980fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-07T16:52:05.795897Z",
     "iopub.status.busy": "2024-07-07T16:52:05.795545Z",
     "iopub.status.idle": "2024-07-07T16:52:07.059695Z",
     "shell.execute_reply": "2024-07-07T16:52:07.058728Z"
    },
    "papermill": {
     "duration": 1.295714,
     "end_time": "2024-07-07T16:52:07.062226",
     "exception": false,
     "start_time": "2024-07-07T16:52:05.766512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plotting training and test losses\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "# Plot training losses\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(train_losses_s_label, label='Source Label Loss')\n",
    "plt.plot(train_losses_s_domain, label='Source Domain Loss')\n",
    "plt.plot(train_losses_t_domain, label='Target Domain Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Training Losses')\n",
    "plt.legend()\n",
    "\n",
    "# Plot test losses\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(test_losses_source, label='Source Test Loss')\n",
    "plt.plot(test_losses_target, label='Target Test Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Test Losses')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Plotting training and test accuracies\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "# Plot training accuracy\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(train_accs, label='Training Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Training Accuracy')\n",
    "plt.legend()\n",
    "\n",
    "# Plot test accuracy\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(test_accs_source, label='Source Test Accuracy')\n",
    "plt.plot(test_accs_target, label='Target Test Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Test Accuracy')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47c050e9",
   "metadata": {
    "papermill": {
     "duration": 0.02843,
     "end_time": "2024-07-07T16:52:07.120126",
     "exception": false,
     "start_time": "2024-07-07T16:52:07.091696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95c47789",
   "metadata": {
    "papermill": {
     "duration": 0.028419,
     "end_time": "2024-07-07T16:52:07.178596",
     "exception": false,
     "start_time": "2024-07-07T16:52:07.150177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5324072,
     "sourceId": 8845748,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10549.335126,
   "end_time": "2024-07-07T16:52:09.848919",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-07T13:56:20.513793",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
